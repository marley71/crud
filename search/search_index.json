{
    "docs": [
        {
            "location": "/", 
            "text": "Cupparijs4 (Versione Alpha)\n\n\nLibreria CRUD per la realizzazione di interfacce professionali basate su chiamate REST con \nmetodi CREATE,READ,UPDATE,DELETE. Il protocollo utilizzato per la comunicazione \u00e8 il json. \nLa libreria utilizza il concetto di componente. La pagina \u00e8 formata da componenti ed esse\nsono gestite attraverso l'oggetto principale \nApp\n. \nIl concetto di base \u00e8 quello di creare una logica e una grafica delle componenti\nin modo che ci sia una versione base implementata dalla libreria, ma che sia customizzabile\na piacere nella propria applicazione sia come layout grafico sia come logica.\n\n\nComponenti base\n\n\nNella libreria \u00e8 stata definita una classe main che permette di simulare l'erediareit\u00e0 degli oggetti.\nQuesta classe si chiama \nClass\n. Elenchiamo le principali componenti presenti nella libreria:\n\n\nComponent\n\n\nAbbiamo creato un oggetto principale per tutte le componenti presenti nella libreria si chiama\n\n\nComponent\n. Va considerato come una classe astratta. L'oggetto Component\nestende un oggetto javascript chiamato Class che \u00e8 stato definito per permettere una facile simulazione\ndell'ereditariet\u00e0 di un normale linguaggio ad oggetti. Non andrebbe mai istanziato\n\n\nRender\n\n\nUna componente \nRender\n si prende il compito di gestire il singolo dato secondo controlli standard html o plugins \ndi varia complessit\u00e0.\n\n\nLa gestione del componente \nRender\n \u00e8 stata differenziata dal modo in cui esso pu\u00f2 essere gestito. \nI modi con cui pu\u00f2 essere gestito sono:\n\n\n\n\nVIEW : In questa modalit\u00e0 il componente render si preoccupa di visualizzare i dati, \nnon \u00e8 prevista nessuna modifica.\n\n\nEDIT : In questa modalit\u00e0 il componente render oltre a visualizzare i dati, deve prevederne\nla modifica\n\n\nSEARCH: In questa modalit\u00e0 il componente deve gestire l'input dell'utente e l'operatore della search che normalmente\n\u00e8 nascosto\n\n\n\n\nQueste modalit\u00e0 sono nate per favorire una migliore customizzazione dei componenti render\nin base al contesto in cui vengno utilizzati.\n\nRenders\n\n\nView\n\n\nLa componente \nView\n rappresenta una collezione di dati. A questi dati \nvengono associati dei componenti di tipo \nRender\n. \n\nViews\n\n\nDashboard\n\n\nLa componente dashboard \u00e8 stata create per la la gestione di pi\u00f9 viste che interagiscono o no tra di loro.\nIn questo modo si possono creare dashboard specifiche per le nostre applicazioni.\n\nDashboards\n\n\nTemplate\n\n\nIl componente \nTemplate\n permette di costruire un template html di contorno per l'oggetto \nRender\n. \nViene utilizzato dalle views e permette di poter customizzare i templates per alcuni renders presenti nella\n view.\n\nTemplates\n\n\nAction\n\n\nIl componente \nAction\n \u00e8 nato per la gestione delle azioni vogliamo realizzare su di una vista.\n\nActions\n\n\nConf\n\n\nSono oggetti di configurazioni iniziali per le istanze delle varie views. Questo permette di avere delle \nconfigurazioni globali su alcuni campi delle nostre viste senza definirli ogni volta.\n\nConfs\n\n\nRoute\n\n\nLa componente \nRoute\n incapsula l'interazione con il server sia per il recupero sia per la spedizione \ndei dati. In genere viene utilizzata da una view e dalle azioni.\n\nRoutes\n\n\nServer\n\n\nClasse che rappresenta un wrapper delle chiamate ajax di jquery, con alcune estensioni.\n\nServer\n\n\nApp\n\n\nLa componente \nApp\n rappresenta l'oggetto per la gestione della pagina e delle sue varie componenti \njavascript.\n\nApp", 
            "title": "Home"
        }, 
        {
            "location": "/#cupparijs4-versione-alpha", 
            "text": "Libreria CRUD per la realizzazione di interfacce professionali basate su chiamate REST con \nmetodi CREATE,READ,UPDATE,DELETE. Il protocollo utilizzato per la comunicazione \u00e8 il json. \nLa libreria utilizza il concetto di componente. La pagina \u00e8 formata da componenti ed esse\nsono gestite attraverso l'oggetto principale  App . \nIl concetto di base \u00e8 quello di creare una logica e una grafica delle componenti\nin modo che ci sia una versione base implementata dalla libreria, ma che sia customizzabile\na piacere nella propria applicazione sia come layout grafico sia come logica.", 
            "title": "Cupparijs4 (Versione Alpha)"
        }, 
        {
            "location": "/#componenti-base", 
            "text": "Nella libreria \u00e8 stata definita una classe main che permette di simulare l'erediareit\u00e0 degli oggetti.\nQuesta classe si chiama  Class . Elenchiamo le principali componenti presenti nella libreria:", 
            "title": "Componenti base"
        }, 
        {
            "location": "/#component", 
            "text": "Abbiamo creato un oggetto principale per tutte le componenti presenti nella libreria si chiama  Component . Va considerato come una classe astratta. L'oggetto Component\nestende un oggetto javascript chiamato Class che \u00e8 stato definito per permettere una facile simulazione\ndell'ereditariet\u00e0 di un normale linguaggio ad oggetti. Non andrebbe mai istanziato", 
            "title": "Component"
        }, 
        {
            "location": "/#render", 
            "text": "Una componente  Render  si prende il compito di gestire il singolo dato secondo controlli standard html o plugins \ndi varia complessit\u00e0.  La gestione del componente  Render  \u00e8 stata differenziata dal modo in cui esso pu\u00f2 essere gestito. \nI modi con cui pu\u00f2 essere gestito sono:   VIEW : In questa modalit\u00e0 il componente render si preoccupa di visualizzare i dati, \nnon \u00e8 prevista nessuna modifica.  EDIT : In questa modalit\u00e0 il componente render oltre a visualizzare i dati, deve prevederne\nla modifica  SEARCH: In questa modalit\u00e0 il componente deve gestire l'input dell'utente e l'operatore della search che normalmente\n\u00e8 nascosto   Queste modalit\u00e0 sono nate per favorire una migliore customizzazione dei componenti render\nin base al contesto in cui vengno utilizzati. Renders", 
            "title": "Render"
        }, 
        {
            "location": "/#view", 
            "text": "La componente  View  rappresenta una collezione di dati. A questi dati \nvengono associati dei componenti di tipo  Render .  Views", 
            "title": "View"
        }, 
        {
            "location": "/#dashboard", 
            "text": "La componente dashboard \u00e8 stata create per la la gestione di pi\u00f9 viste che interagiscono o no tra di loro.\nIn questo modo si possono creare dashboard specifiche per le nostre applicazioni. Dashboards", 
            "title": "Dashboard"
        }, 
        {
            "location": "/#template", 
            "text": "Il componente  Template  permette di costruire un template html di contorno per l'oggetto  Render . \nViene utilizzato dalle views e permette di poter customizzare i templates per alcuni renders presenti nella\n view. Templates", 
            "title": "Template"
        }, 
        {
            "location": "/#action", 
            "text": "Il componente  Action  \u00e8 nato per la gestione delle azioni vogliamo realizzare su di una vista. Actions", 
            "title": "Action"
        }, 
        {
            "location": "/#conf", 
            "text": "Sono oggetti di configurazioni iniziali per le istanze delle varie views. Questo permette di avere delle \nconfigurazioni globali su alcuni campi delle nostre viste senza definirli ogni volta. Confs", 
            "title": "Conf"
        }, 
        {
            "location": "/#route", 
            "text": "La componente  Route  incapsula l'interazione con il server sia per il recupero sia per la spedizione \ndei dati. In genere viene utilizzata da una view e dalle azioni. Routes", 
            "title": "Route"
        }, 
        {
            "location": "/#server", 
            "text": "Classe che rappresenta un wrapper delle chiamate ajax di jquery, con alcune estensioni. Server", 
            "title": "Server"
        }, 
        {
            "location": "/#app", 
            "text": "La componente  App  rappresenta l'oggetto per la gestione della pagina e delle sue varie componenti \njavascript. App", 
            "title": "App"
        }, 
        {
            "location": "/component/", 
            "text": "Component\n\n\nLa classe principale di tutte le componenti grafiche \u00e8 \nComponent\n, definisce il comportamento\ngenerale che un componente deve avere nella visualizzazione di un html. Un componente, quando viene disegnato,\nchiama in sequenza una serie di metodi che rappresentano gli agganci dove noi possiamo scrivere il nostro codice\nche caratterizzer\u00e0 la componente.\n\n\nLa classe ha un metodo \ntemplate\n che ritorna una stringa html del componente. Il concetto principale \u00e8 quello di \ninserire nel template del componente dei marcatori (attributi dal formato \ndata-{marcatore}\n). \nQuesti marcatori permettono di avere la possibilit\u00e0 di stravolgere completamente il template di base senza modificare \nil comportamento del nostro componente. L'unico obbligo \u00e8 di mantenere questi marcatori per il suo corretto funzionamento.\n\n\nE' stata inserita la possibilit\u00e0 di avere dei \ntraits\n che ne permetteno l'estensione\ncon funzionalit\u00e0 proprie della nostra applicazione senza dover per forza ridefinire la classe componente. \nOltre ai traits \u00e8 stata inserita la possibilit\u00e0 di avere dei \ntraitsTemplate\n sono dei traits particolari e il loro \nmetodo viene chiamato subito dopo che il template \u00e8 stato iniettato nel dom della pagina.\nPossiamo considerarli come post elaborazioni da fare sul dom html non previste dalla libreria. Vedremo pi\u00f9\navanti il loro utilizzo.\n\n\nPer convenzione i metodi preceduti da \"_\" sono da considerarsi privati e non andrebbero mai ridefiniti se non per cambiare\nsostanzialmente il comportamento della classe a basso livello.\n\n\nPropriet\u00e0\n\n\n\n\n\n\nclassName\n : 'Component' - Questa propriet\u00e0 \u00e8 stata introdotta a causa del fatto che javascript non \u00e8 un linguaggio \nad oggetti e per avere la possibilit\u00e0 di poter estendere le classi, \u00e8 stato utilizzata un trucchetto. Questo trucchetto \nrende impossibile sapere, a runtime, in quale classe ci si trovi.\n\n\n\n\n\n\ndefaultTraitsTemplate\n : ['TraitTranslate','TraitTemplate','TraitPlaceholder'] - vettore di traits definiti di default\nin particolare :\n\n\n\n\nTraitTranslate\n ha il compito per la sostituzione di tutti i marcatori data-label presenti nel template con le nostre \ndefinizioni. Molto utile nei siti multi lingua, o dove ci sono delle parti di un html che hanno label variabili.\n\n\nTraitTemplate\n: Ha il compito di poter spezzare un template complesso in sottotemplate magari interscambiabili.\nutilizza i marcatori data-template che si trovano dentro la stringa template e ci inietta il risultato della\nchiamata {valore}Template. Per esempio se dentro il marcatore data-template troviamo il valore \nsubItem\n verr\u00e0 chiamata\nil metodo componente.subItemTemplate() e il risultato sar\u00e0 iniettato dentro il tag dove \u00e8 presente il marcatore data-template=\"subItem\" \n\n\nTraitPlaceholder\n: ha il compito di inserire il risultato della traduzione del valore del marcatore data-placeholder nell'attributo\nplaceholder che si trovano negli input.\n\n\n\n\n\n\ntraitsTemplate\n : [] - vettore di eventuali altri traits custom che vogliamo siano eseguiti subito dopo avere iniettato il template\n\n\ntraits\n : [] - traits per estendere funzionalit\u00e0 del component senza ridefinirne la classe.\n\n\ncontainer\n : null - rappresenta l'eventuale container html prensente nel dom della pagina dove verr\u00e0\ndisegnato il componente.\n\n\n\n\nMetodi\n\n\n\n\n\n\ninit(attributes)\n: costruttore, attributes rappresentano gli attributi\nche si vogliono sostituire, \u00e8 possibile passare anche delle function e ridefinire i metodi della classe\no aggiungerne dei nuovi. \n\n\n\n\n\n\nattrs(attrs)\n : permettere di ridefinire propriet\u00e0 o metodi dell'oggetto\n\n\n\n\n\n\ntemplate()\n :  metodo che restituisce il template html del componente\n\n\n\n\n\n\ngetTemplate()\n : metodo che un oggetto jquery('div') che wrappa il template del componente.\n\n\n\n\n\n\nhtml()\n : ritorna l'html puntato dalla propriet\u00e0 container del componente\n\n\n\n\n\n\njQe(selector)\n : ritorna l'oggetto jquery associato al container del componente, se viene\npassato il parametro \nselector\n allora si posiziona all'elemento puntato dal selector all'interno\ndel container.\n\n\n\n\n\n\nbeforeRender(callback)\n : questo metodo viene chiamato prima di eseguire il render. Questo metodo rappresenta\nil primo punto in cui scrivere codice che si vuole eseguire prima di renderizzare il componente\n\n\n\n\n\n\nrender(callback)\n : metodo dove viene iniettato nel container l'html del componente in \nbase alle proprie politiche.\n\n\n\n\n\n\nafterRender(callback)\n : metodo che viene chiamato dopo il metodo render.\n\n\n\n\n\n\nbeforeFinalize(callback)\n : metodo per il proprio codice custom chiamato prima del finalize\n\n\n\n\nfinalize(callback)\n : metodo per aggiungere eventi o istanziare plugins \n\n\n\n\nafterFinalize(callback)\n : metodo custom per eventuali esigenze su oggetti dopo che sono stati visualizzati agganciati\neventi e istanziati plugins.\n\n\n\n\n\n\n_prepareContainer()\n  : scrive l'html che viene restituito dal metodo \ntemplate\n dentro il container.\nSe il container \u00e8 null viene creato un oggetto jquery contentente l'html. Dopo viene chiamato \n_executeTraitsTemplate\n\n\n\n\n\n\n_executeTraitsTemplate()\n : metodo eseguito dopo che si \u00e8 scritto l'html. Utilizzare questo metodo\nse si vogliono eseguire dei particolari filtri con il concetto di trait\n\n\n\n\n\n\n_loadExternalResources(callback)\n : carica eventuali risorse esterne prima di far partire il render del component\n@param callback : funzione di ritorno \n\n\n\n\n\n\ndraw(callback)\n : disegna l'html del componente e poi richiama la callback.\nIl metodo draw esegue in seguenza diversi metodi che vengono richiamati attraverso la\ncallback e che permettono la possibilit\u00e0 di definire il comporamento del componente mentre viene disegnato o di aggangiare\neventi custom. Tutti questi metodi hanno una callback come parametro che rappresenta la funzione da chiamare dopo che si\n\u00e8 finito di operare dentro il metodo. Questo modo di eseguire i metodi permette di poter inserire anche delle funzioni\nasincrone aspettare il termine delle chiamate prima di procedere. Nello stesso tempo permette di bloccare il flusso\nsemplicemente non richiamando la callback. Sotto viene rappresentato il flusso delle chiamate del metodo draw.\n\n\n\n\n_loadExternalResources(callback)\n;\n\n\nbeforeRender(callback)\n\n\n_prepareContainer()\n \n\n\nrender(callback)\n\n\nafterRender(callback)\n\n\nbeforeFinalize(callback)\n\n\nfinalize(callback)\n\n\nafterFinalize(callback)\n\n\n\n\n\n\n\n\nComponent.parseHtml(templateString,tplData)\n : metodo statico che crea un oggetto jquery eseguendo\nil parse della stringa passata. In caso vengono passati dei con tplData tutti i tag che hanno il marcatore\ndata-field=\"field\" vengono iniettati i valori. Vedere la sezione ... per ulteriori dettagli.\n\n\nComponent.uid\n = 0; variabile statica per la generazione di id univoci.\n\n\nComponent.newID()\n : metodo statico che ritorna un id univoco fomato da 'c_{int}'+ dove {int} \u00e8 un intero incrementale\n\n\nTraits che agiscono sui template\n\n\ncoming soon.\n\n\nRender dei template con dati dinamici\n\n\ncoming soon", 
            "title": "Component"
        }, 
        {
            "location": "/component/#component", 
            "text": "La classe principale di tutte le componenti grafiche \u00e8  Component , definisce il comportamento\ngenerale che un componente deve avere nella visualizzazione di un html. Un componente, quando viene disegnato,\nchiama in sequenza una serie di metodi che rappresentano gli agganci dove noi possiamo scrivere il nostro codice\nche caratterizzer\u00e0 la componente.  La classe ha un metodo  template  che ritorna una stringa html del componente. Il concetto principale \u00e8 quello di \ninserire nel template del componente dei marcatori (attributi dal formato  data-{marcatore} ). \nQuesti marcatori permettono di avere la possibilit\u00e0 di stravolgere completamente il template di base senza modificare \nil comportamento del nostro componente. L'unico obbligo \u00e8 di mantenere questi marcatori per il suo corretto funzionamento.  E' stata inserita la possibilit\u00e0 di avere dei  traits  che ne permetteno l'estensione\ncon funzionalit\u00e0 proprie della nostra applicazione senza dover per forza ridefinire la classe componente. \nOltre ai traits \u00e8 stata inserita la possibilit\u00e0 di avere dei  traitsTemplate  sono dei traits particolari e il loro \nmetodo viene chiamato subito dopo che il template \u00e8 stato iniettato nel dom della pagina.\nPossiamo considerarli come post elaborazioni da fare sul dom html non previste dalla libreria. Vedremo pi\u00f9\navanti il loro utilizzo.  Per convenzione i metodi preceduti da \"_\" sono da considerarsi privati e non andrebbero mai ridefiniti se non per cambiare\nsostanzialmente il comportamento della classe a basso livello.", 
            "title": "Component"
        }, 
        {
            "location": "/component/#proprieta", 
            "text": "className  : 'Component' - Questa propriet\u00e0 \u00e8 stata introdotta a causa del fatto che javascript non \u00e8 un linguaggio \nad oggetti e per avere la possibilit\u00e0 di poter estendere le classi, \u00e8 stato utilizzata un trucchetto. Questo trucchetto \nrende impossibile sapere, a runtime, in quale classe ci si trovi.    defaultTraitsTemplate  : ['TraitTranslate','TraitTemplate','TraitPlaceholder'] - vettore di traits definiti di default\nin particolare :   TraitTranslate  ha il compito per la sostituzione di tutti i marcatori data-label presenti nel template con le nostre \ndefinizioni. Molto utile nei siti multi lingua, o dove ci sono delle parti di un html che hanno label variabili.  TraitTemplate : Ha il compito di poter spezzare un template complesso in sottotemplate magari interscambiabili.\nutilizza i marcatori data-template che si trovano dentro la stringa template e ci inietta il risultato della\nchiamata {valore}Template. Per esempio se dentro il marcatore data-template troviamo il valore  subItem  verr\u00e0 chiamata\nil metodo componente.subItemTemplate() e il risultato sar\u00e0 iniettato dentro il tag dove \u00e8 presente il marcatore data-template=\"subItem\"   TraitPlaceholder : ha il compito di inserire il risultato della traduzione del valore del marcatore data-placeholder nell'attributo\nplaceholder che si trovano negli input.    traitsTemplate  : [] - vettore di eventuali altri traits custom che vogliamo siano eseguiti subito dopo avere iniettato il template  traits  : [] - traits per estendere funzionalit\u00e0 del component senza ridefinirne la classe.  container  : null - rappresenta l'eventuale container html prensente nel dom della pagina dove verr\u00e0\ndisegnato il componente.", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/component/#metodi", 
            "text": "init(attributes) : costruttore, attributes rappresentano gli attributi\nche si vogliono sostituire, \u00e8 possibile passare anche delle function e ridefinire i metodi della classe\no aggiungerne dei nuovi.     attrs(attrs)  : permettere di ridefinire propriet\u00e0 o metodi dell'oggetto    template()  :  metodo che restituisce il template html del componente    getTemplate()  : metodo che un oggetto jquery('div') che wrappa il template del componente.    html()  : ritorna l'html puntato dalla propriet\u00e0 container del componente    jQe(selector)  : ritorna l'oggetto jquery associato al container del componente, se viene\npassato il parametro  selector  allora si posiziona all'elemento puntato dal selector all'interno\ndel container.    beforeRender(callback)  : questo metodo viene chiamato prima di eseguire il render. Questo metodo rappresenta\nil primo punto in cui scrivere codice che si vuole eseguire prima di renderizzare il componente    render(callback)  : metodo dove viene iniettato nel container l'html del componente in \nbase alle proprie politiche.    afterRender(callback)  : metodo che viene chiamato dopo il metodo render.    beforeFinalize(callback)  : metodo per il proprio codice custom chiamato prima del finalize   finalize(callback)  : metodo per aggiungere eventi o istanziare plugins    afterFinalize(callback)  : metodo custom per eventuali esigenze su oggetti dopo che sono stati visualizzati agganciati\neventi e istanziati plugins.    _prepareContainer()   : scrive l'html che viene restituito dal metodo  template  dentro il container.\nSe il container \u00e8 null viene creato un oggetto jquery contentente l'html. Dopo viene chiamato  _executeTraitsTemplate    _executeTraitsTemplate()  : metodo eseguito dopo che si \u00e8 scritto l'html. Utilizzare questo metodo\nse si vogliono eseguire dei particolari filtri con il concetto di trait    _loadExternalResources(callback)  : carica eventuali risorse esterne prima di far partire il render del component\n@param callback : funzione di ritorno     draw(callback)  : disegna l'html del componente e poi richiama la callback.\nIl metodo draw esegue in seguenza diversi metodi che vengono richiamati attraverso la\ncallback e che permettono la possibilit\u00e0 di definire il comporamento del componente mentre viene disegnato o di aggangiare\neventi custom. Tutti questi metodi hanno una callback come parametro che rappresenta la funzione da chiamare dopo che si\n\u00e8 finito di operare dentro il metodo. Questo modo di eseguire i metodi permette di poter inserire anche delle funzioni\nasincrone aspettare il termine delle chiamate prima di procedere. Nello stesso tempo permette di bloccare il flusso\nsemplicemente non richiamando la callback. Sotto viene rappresentato il flusso delle chiamate del metodo draw.   _loadExternalResources(callback) ;  beforeRender(callback)  _prepareContainer()    render(callback)  afterRender(callback)  beforeFinalize(callback)  finalize(callback)  afterFinalize(callback)     Component.parseHtml(templateString,tplData)  : metodo statico che crea un oggetto jquery eseguendo\nil parse della stringa passata. In caso vengono passati dei con tplData tutti i tag che hanno il marcatore\ndata-field=\"field\" vengono iniettati i valori. Vedere la sezione ... per ulteriori dettagli.  Component.uid  = 0; variabile statica per la generazione di id univoci.  Component.newID()  : metodo statico che ritorna un id univoco fomato da 'c_{int}'+ dove {int} \u00e8 un intero incrementale", 
            "title": "Metodi"
        }, 
        {
            "location": "/component/#traits-che-agiscono-sui-template", 
            "text": "coming soon.", 
            "title": "Traits che agiscono sui template"
        }, 
        {
            "location": "/component/#render-dei-template-con-dati-dinamici", 
            "text": "coming soon", 
            "title": "Render dei template con dati dinamici"
        }, 
        {
            "location": "/renders/", 
            "text": "Render\n\n\nLa classe \nRender\n estende la classe \nComponent\n e rappresenta la classe per la gestione di un \nsingolo dato. La classe render pu\u00f2 essere utilizzata in maniera diretta, ma il loro utilizzo reale \u00e8 \ncome componenti dei singoli dati di una view. Dentro la view un render pu\u00f2 essere usato in 3 modi differenti, \nin modalit\u00e0 \nedit, search, view\n.\n\n\nLa classe Render deve essere consideata come una specie di classe astratta edefinisce alcuni metodi di uso generale e \ni metodi che i veri oggetti Render devono ridefinire per funzionare. Quindi come la classe che \ndefinisce l'interfaccia dei vari oggetti Render concreti. Non dovrebbe mai essere istanziata.\n\n\nil modo \u00e8 definito nelle costanti\n\n\nRender.VIEW = 'view';\nRender.EDIT = 'edit';\nRender.SEARCH = 'search';\n\n\n\n\nPropriet\u00e0\n\n\n\n\nkey\n : null - key dell'oggetto render (il campo del db o del field che vogliamo gestire)\n\n\n\n\nclassName\n : 'Render' - nome della Classe reale dell'oggetto\n\n\n\n\n\n\nelement_selector\n : '[data-render_element]' - marcatore dell'elemento\n\n\n\n\ncontrol_selector\n : '[data-render_control]' - marcatore del controllo html (input, select, ecc)\n\n\noperator_selector\n : '[data-control_operator]' - marcatore dell'input hidden dove \u00e8 memorizzato l'operatore in caso di modalit\u00e0 \nsearch\n\n\n\n\noperator\n : null - valore operatore in caso di modalit\u00e0 search\n\n\n\n\n\n\nvalue\n : null - valore oggetto\n\n\n\n\napp\n : null - identificatore dell'oggetto app della pagina viene assegnato a runtime dall'oggetto \nApp\n.\n\n\nresources\n : [] - vettore risorse da caricare prima di chiamare il finalize\n\n\nmetadata\n : {} - array associativo metadati che descrivono il dato\n\n\nhtmlAttributes\n : {}, attributi html per l'oggetto speciale identificato dal marcatore \ncontrol_selector\n\n\n\n\nMetodi\n\n\n\n\ninit(key,attributes)\n - ridefinizione del costruttore rispetto al Component. \n\n\n@param key : nome del campo\n\n\n@param attributes: attributi/function dell'oggetto che vogliamo ridefinire\n\n\n\n\n\n\n_setHtmlAttributes(el)\n - setta gli attributi presenti nella propriet\u00e0 \nhtmlAttributes\n all'elemento el\n\n\n@param el : elemento jQuery a cui settare gli attributi\n\n\n\n\n\n\nchange()\n : metodo chiamato al momento del change del render.\n\n\nclear()\n : medoto da chiamare per il clear del componente render. \n\n\nsetMetadata(metadata)\n : setta la propriet\u00e0 metadata\n\n\n@param metadata : valore associativo che descrivono il dato\n\n\n\n\n\n\nRender.factory(key,options)\n : metodo statico che permette di creare un Render\n\n\n@param key \u00e8 il nome del campo da creare\n\n\n@param options vettore associativo delle opzioni del render. La factory prende\noptions.type e options.mode per cercare il nome della classe da istanziare. Se non esistono,\n prende come type 'input' e come mode 'edit'.\n\n\n@return object ritorna il render creato.\n\n\n\n\n\n\n\n\nesempio\n\n\nFacciamo una piccola premessa. Per evitare di dover scrivere tutto il nome della classe Render \u00e8 stata adottata la \nsequente politica:\n\n\n\n\nTutti gli oggetti Render devono avere il nome che inizia per \nRender\n\n\nogni Render pu\u00f2 avere 3 classi, una per la gestione dell'oggetto render in modalit\u00e0 view una per la gestione in \nmodalit\u00e0 search e una in modalit\u00e0 edit. Supponiamo di aver pensato il nostro render e di chiamarlo \ninput\n. allora dovremmo\ncreare 3 classi: \n\n\nRenderInputView : oggetto che gestir\u00e0 la visualizzazione di input in modalit\u00e0 view.\n\n\nRenderInputEdit : oggetto che gestir\u00e0 la visualizzazione di input in modalit\u00e0 edit.\n\n\nRenderInputSearch : oggetto che gestir\u00e0 la visualizzazione di input in modalit\u00e0 search\n\n\n\n\n\n\n\n\nEcco il codice da scrivere\n\n\nvar r = Render.factory('fieldName', {\n    type : 'input',\n    mode : 'edit'\n})\n// la factory cercher\u00e0 la definizione della classe 'RenderInputEdit' che rappresenta\n// l'oggetto che gestir\u00e0 il Render Input in modalit\u00e0 edit.\n\n\n\n\nRender Implementati\n\n\nLa libreria mette a disposizione dei renders di default per gli usi pi\u00f9 comuni, in modo da avere gi\u00e0 una base abbastanza\ncompleta per iniziare a creare le nostre applicazioni. Questi renders possono essere ridefiniti e creati di nuovi.\nQuesto ci permette di cambiare, nella nostra applicazione, aspetto e/o funzionalit\u00e0. \n\n\nAlcuni \nmode\n per alcuni render non hanno senso, in questo caso non definire la classe per quel \nmode\n, questo generer\u00e0 un errore\nche far\u00e0 capire dell'utilizzo sbagliato del componente Render. [todo: fare esempio]\n\n\nIn tutti i render che verranno mostrati sotto mostreremo:\n\n\n\n\nil contenuto del metodo template.\n\n\ni marcatori utilizzati per la gestione corretta del suo comportamento.\n\n\n\n\n\n\nRenderInput\n\n\nComponente per la gestione degli input standard html.\n\n\nRenderInputEdit\n\n\nEsempio\n\n\n{{{render_input_edit}}}\n\n\ntemplate\n\n\ninput data-render_control type=\ntext\n class=\nform-control\n data-placeholder=\n\n\n\n\n\n\n\nmarcatori\n\n\ndata-render_control\n: necessario, indica il controllo che ricever\u00e0 il dato\n\n\ndata-placeholder\n : opzionale, eventuale placeholder da utilizzare, verr\u00e0 fatta la translate sul valore\n\n\n\n\n\n\n\n\nRenderInputSearch\n\n\nEsempio\n\n\ntemplate\n\n\ninput data-render_control type=\ntext\n class=\nform-control\n placeholder=\n\n\ninput data-control_operator type=\nhidden\n \n\n\n\n\n\nRenderInputView\n\n\nIn modalit\u00e0 view, pu\u00f2 essere solo uno span. Potevo anche non definirlo, perche' non ha senso un Input in modalit\u00e0 view, \nIo ho scelto di visualizzarlo in uno span, qualcuno potrebbe decidere di farlo visualizzare come un input in modalit\u00e0\nreadonly. A voi la scelta.\n\n\nEsempio\n\n\ntemplate\n\n\nspan data-render_control\n/span\n\n\n\n\n\n\n\nRenderHidden\n\n\nComponente per la gestione degli input nascosti. \n\n\nRenderHiddenEdit\n\n\nEsempio\n\n\ntemplate\n\n\ninput data-render_control type=\nhidden\n\n\n\n\n\n\n\nmarcatori\n\n\ndata-render_control\n: necessario, indica il controllo che ricever\u00e0 il dato\n\n\n\n\n\n\n\n\n\n\nRenderPassword\n\n\nComponente per la gestione degli input password.\n\n\nRenderPasswordEdit\n\n\nEsempio\n\n\ntemplate\n\n\ninput data-render_control type=\ntext\n class=\nform-control\n data-placeholder=\n\n\n\n\n\n\n\nmarcatori\n\n\ndata-render_control\n: necessario, indica il controllo che ricever\u00e0 il dato\n\n\ndata-placeholder\n : opzionale, eventuale placeholder da utilizzare, verr\u00e0 fatta la translate sul valore\n\n\n\n\n\n\n\n\n\n\nRenderText\n\n\nRender text \u00e8 nato per rappresentare la visualizzazione di un testo. La stessa classe \u00e8 stata ridefinita\nper tutti i 3 modi.\n\n\nEsempio\n\n\ntemplate\n\n\nspan data-render_control\n/span\n\n\n\n\n\n\n\nRenderTextarea\n\n\nRenderTextareaEdit\n\n\nEsempio\n\n\ntemplate\n\n\ntextarea data-render_element data-render_control class=\nform-control\n name=\n value=\n/textarea\n\n\n\n\n\nRenderTextareaSearch\n\n\nEsempio\n\n\ntextarea data-render_element data-render_control class=\nform-control\n name=\n value=\n/textarea\n\n            \ninput data-control_operator type=\nhidden\n \n\n\n\n\n\nRenderTextareaView\n\n\nEsempio\n\n\nspan data-render_control\n/span\n\n\n\n\n\n\n\nRenderSelect\n\n\nOggetto per la selezione di un valore utilizzando le select\n\n\nRenderSelectEdit\n\n\nEsempio\n\n\ntemplate\n\n\nselect data-render_control class=\nform-control\n \n/select\n\n\n\n\n\nmarcatori\n\n\nRenderSelectSearch\n\n\nEsempio\n\n\ntemplate\n\n\nselect data-render_control class=\nform-control\n \n/select\n\n\ninput data-control_operator type=\nhidden\n \n\n\n\n\n\nmarcatori\n\n\nRenderSelectView\n\n\nEsempio\n\n\ntemplate\n\n\nselect data-render_control class=\nform-control\n \n/select\n\n\n\n\n\nmarcatori\n\n\n\n\nRenderInputHelped\n\n\nQuesto Render permette di aggiungere ad un input una serie di valori predefiniti che aiutano l'utilizzatore\n\n\nPropriet\u00e0\n\n\n\n\ncustomValue : true, indica se pu\u00f2 essere inserito un valore fuori dal range dei valori predefiniti\n\n\nmetadata : sono i valori predefiniti vettore associativo valore : 'Testo da visualizzare'\n\n\n\n\n{\n    domainValues : {}\n}\n\n\n\n\n//@TODO esempio\n\n\nRenderInputHelpedEdit\n\n\nEsempio\n\n\ntemplate\n\n\ndiv data-render_element\n\n    \ninput  data-render_control class=\nform-control\n type=\ntext\n name=\n value=\n\n    \ndiv data-option_values\n\n        \ndiv class=\nbtn-group btn-group-xs\n role=\ngroup\n aria-label=\n...\n data-field=\ndata\n data-self\n\n            \nbutton type=\nbutton\n class=\nbtn btn-default\n data-html=\nlabel\n data-attrs=\n{'data-value':value}\n/button\n\n        \n/div\n\n    \n/div\n\n\n/div\n\n\n\n\n\nmarcatori\n\n\nRenderInputHelpedSearch\n\n\nEsempio\n\n\ntemplate\n\n\ndiv data-render_element\n\n    \ninput  data-control_operator class=\nform-control\n type=\nhidden\n name=\n value=\n\n    \ninput  data-render_control class=\nform-control\n type=\ntext\n name=\n value=\n\n    \ndiv data-option_values\n\n        \ndiv class=\nbtn-group btn-group-xs\n role=\ngroup\n aria-label=\n...\n data-field=\ndata\n data-self\n\n            \nbutton type=\nbutton\n class=\nbtn btn-default\n data-html=\nlabel\n data-attrs=\n{'data-value':value}\n/button\n\n        \n/div\n\n    \n/div\n\n\n/div\n\n\n\n\n\nmarcatori\n\n\n\n\nRenderImage\n\n\nOggetto per la renderizzazione di un'immagine proveniente. Esiste solo in modalit\u00e0 view.\n\n\nRenderImageView\n\n\nEsempio\n\n\ntemplate\n\n\nimg data-render_control\n\n\n\n\n\nmarcatori\n\n\n\n\nRenderRadio\n\n\n\n\ncaption_selector : '[data-render_caption]' - marcatore \n\n\n\n\nRenderRadioEdit\n\n\nEsempio\n\n\ntemplate\n\n\nlabel data-render_element class=\nradio-inline\n\n  \ninput data-render_control  type=\nradio\n value=\n \nspan data-render_caption\n/span\n\n\n/label\n\n\ninput data-render_exists type=\nhidden\n \n\n\n\n\n\nmarcatori\n\n\nRenderRadioSearch\n\n\nEsempio\n\n\ntemplate\n\n\nlabel data-render_element class=\nradio-inline\n\n  \ninput data-render_control  type=\nradio\n value=\n \nspan data-render_caption\n/span\n\n\n/label\n\n\ninput data-control_operator type=\nhidden\n \n\n\n\n\n\nmarcatori\n\n\nRenderRadioView\n\n\nEsempio\n\n\ntemplate\n\n\ndiv data-render_element class=\ncheckbox-inline\n\n    \ni data-class=\nicon_class\n \n/i\n \nspan data-field=\ntext\n \n/span\n\n\n/div\n\n\n\n\n\nmarcatori\n\n\n\n\nRenderCheckbox\n\n\n\n\ncaption_selector : '[data-render_caption]' - marcatore \n\n\n\n\nRenderCheckboxEdit\n\n\nEsempio\n\n\ntemplate\n\n\nlabel data-render_element class=\ncheckbox-inline\n\n    \ninput data-render_control type=\ncheckbox\n value=\n  \nspan data-render_caption\n \n/span\n\n\n/label\n\n\ninput data-render_exists type=\nhidden\n \n\n\n\n\n\nmarcatori\n\n\nRenderCheckboxSearch\n\n\nEsempio\n\n\ntemplate\n\n\nlabel data-render_element class=\ncheckbox-inline\n\n    \ninput data-render_control type=\ncheckbox\n value=\n  \nspan data-render_caption\n \n/span\n\n\n/label\n\n\ninput data-control_operator type=\nhidden\n \n\n\n\n\n\nmarcatori\n\n\nRenderCheckboxView\n\n\nEsempio\n\n\ntemplate\n\n\ndiv data-render_element class=\ncheckbox-inline\n\n    \ni data-class=\nicon_class\n \n/i\n \nspan data-field=\ntext\n \n/span\n\n\n/div\n\n\n\n\n\nmarcatori\n\n\n\n\nRenderCaptcha\n\n\nQuesto render incapsula il captca con il suo relativo reload. Esiste solo in modalit\u00e0 edit\n\n\nRenderCaptchaEdit\n\n\nEsempio\n\n\ntemplate\n\n\ndiv class=\nrow\n\n    \ndiv class=\ncol-sm-4\n data-captcha_img  \n\n\n    \n/div\n\n    \ndiv class=\ncol-sm-4\n\n            \ninput data-render_control=\n class=\nform-control\n type=\ntext\n name=\n value=\n\n    \n/div\n\n    \ndiv class=\ncol-sm-4\n\n        \nbutton class=\nbtn btn-sm btn-default\n type=\nbutton\n data-button_reload\nReload\n/button\n\n    \n/div\n\n\n/div\n\n\n\n\n\nmarcatori\n\n\n\n\ncaptcha_img_selector : '[data-captcha_img]'\n\n\n\n\n\n\nRenderCustom\n\n\nOggetto per chi vuole poter modificare l'html da renderizzare. Qui si pu\u00f2 inserire \ntutto quello che si vuole utilizzando che chiamate render e finalize. Le tre classi sono\nuguali.\n\n\nRenderCustomEdit\n\n\nEsempio\n\n\ntemplate\n\n\ndiv data-render_element data-render_control\n/div\n\n\n\n\n\nmarcatori\n\n\n\n\ndata-render_element\n\n\ndata-render_control\n\n\n\n\n\n\nRenderDecimal\n\n\nOggetto per la gestione dei decimali con parte intera e decimale gestiti separatamente.\n\n\nRenderDecimalEdit\n\n\nEsempio\n\n\ntemplate\n\n\ndiv class=\ninput-group\n data-render_element\n\n    \nspan class=\ninput-group-addon hide symbol_left\n data-render_symbol\n/span\n\n    \ninput class=\nform-control text-right\n type=\ntext\n data-render_control_int\n\n    \nspan class=\ninput-group-addon\n,\n/span\n\n    \ninput class=\nform-control text-right\n type=\ntext\n data-render_control_dec\n\n    \ninput type=\nhidden\n data-render_control=\n\n    \nspan class=\ninput-group-addon hide symbol_right\n data-render_symbol\n/span\n\n\n/div\n\n\n\n\n\nmarcatori\n\n\nRenderDecimalSearch\n\n\nEsempio\n\n\ntemplate\n\n\ndiv class=\ninput-group\n data-render_element\n\n    \nspan class=\ninput-group-addon hide symbol_left\n data-render_symbol\n/span\n\n    \ninput class=\nform-control text-right\n type=\ntext\n data-render_control_int\n\n    \nspan class=\ninput-group-addon\n,\n/span\n\n    \ninput class=\nform-control text-right\n type=\ntext\n data-render_control_dec\n\n    \ninput type=\nhidden\n data-render_control=\n\n    \nspan class=\ninput-group-addon hide symbol_right\n data-render_symbol\n/span\n\n    \ninput data-control_operator type=\nhidden\n \n\n\n/div\n\n\n\n\n\nmarcatori\n\n\nRenderDecimalView\n\n\nEsempio\n\n\ntemplate\n\n\ndiv data-render_element class=\ntext-right\n\n    \nspan class=\nhide symbol_left\n data-render_symbol\n/span\n\n    \nspan class=\ntext-right\n data-render_control_int\n/span\n\n    \nspan class=\nhide symbol_right text-left\n data-render_symbol\n/span\n\n\n/div\n\n\n\n\n\nmarcatori\n\n\n\n\nRenderAutocomplete\n\n\nQuesto render \u00e8 stato pensato per il popolamento di una chiave con riferimento ad una tabella\nesterna permettendo la ricerca e inserendo la chiave_id  selezionata nel input nascosto.\nEsiste solo in modalit\u00e0 edit che si chiama \nRenderAutocompleteEdit\n\n\nRenderAutocompleteEdit\n\n\nEsempio\n\n\ntemplate\n\n\ndiv class=\ninput-group\n\n    \nspan style=\nheight:19px\n class=\ninput-group-addon\n id=\nbasic-addon1\n data-render_autocomplete_view data-lang=\nautocomplete-nonselezionato\n/span\n\n    \ninput data-render_control type=\nhidden\n name=\n value=\n\n    \ndiv data-render_element class=\nautosuggest\n data-minLength=\n1\n data-queryURL=\n\n        \ninput data-render_autocomplete_input type=\ntext\n name=\nsrc\n placeholder=\n class=\nform-control typeahead\n /\n\n    \n/div\n\n\n/div\n\n\n\n\n\nPropriet\u00e0\n\n\n\n\nrouteName\n : 'autocomplete' - nome della route da utilizzare per reperire i dati dal server\n\n\nautocomplete_view_selector\n : '[data-render_autocomplete_view]' - marcatore dove verr\u00e0 visualizzato\nle info della entry scelta\n\n\n\n\nautocomplete_input_selector\n : '[data-render_autocomplete_input]' - marcatore dove verr\u00e0 agganciato\nil plugins typehead di bootstrap.\n\n\n\n\n\n\nfields\n : [],                // campi su cui effettuare la ricerca, vengono messi come parametro field nella \nrichiesta al server\n\n\n\n\nlabelFields : [] , campi da utilizzare nella visualizzazione della selectbox e nel campo label dell'item scelto\n\n\nmetadata\n :\n\n\n\n\n{\n    modelData : null,           // dati del modello selezionato\n    autocompleteModel : null,   // nome modello da utilizzare nelle chiamate rest per la popolazione dei dati\n    method : null,              // eventuale parametro da mandare in get nella chiamata rest\n    separator : null,           // separatore da utillare nella visualizzazione dei campi in caso siano piu' di uno\n    n_items : null,             // numero di items da richiedere\n}\n\n\n\n\n\n\nresources\n : vettore delle risorse esterne che ha bisogno per funzionare. Questo render si appoggia a\ntypeahead bootstrap.\n\n\n\n\n[\n        'typeahead/bootstrap3-typeahead.min.js',\n        'typeahead/typeahead.bundle.js',\n        'typeahead/typeaheadjs.css'\n]\n\n\n\n\nMetodi\n\n\n\n\n\n\n_getLabelValue()\n : \n\n\n\n\nritorna il nome dell'inputview, tiene conto del fatto che si potrebbe trovare in un hasmany\n\n\ne il nome potrebbe avere le []\n */\n\n\n\n\n\n\n\n\n_getInputViewName\n : function () \n\n\n\n\n\n\n_getFieldValue\n : function() \n\n\n\n\n\n\n_createUrl\n : function () \n\n\n\n\n\n\n_renderSelectedValue\n : function () \n\n\n\n\n\n\ngetAutocompleteRow\n : function (element) \n\n\n\n\n\n\nev_selected\n : function (datum) \n\n\n\n\n\n\ngetValue\n : function () \n\n\n\n\n\n\nRenderBelongsto\n\n\nQuesto render \u00e8 solo per la visualizzazione di dati pi\u00f9 complessi che non sono formati da un solo\nvalore, in genere viene utilizzato per la rappresentazione di campi di una tabella\nesterna rispetto a campo corrente, istanza\n\n\nRenderBelongstoView\n\n\nEsempio\n\n\nmarcatori\n\n\n\n\ndata-render_element\n\n\n\n\ntemplate\n\n\n    \ndiv data-render_element\n/div\n\n\n\n\n\nitemTemplate : vuoto. Da definire solo se si vuole avere una visualizzazinoe particolare\ndei campi. Per esempio supponiamo che il nostro belongsto punti ad una tabella \nclienti con questi dati\n\n\n{\n    nome : 'nome',\n    cognome : 'cognome',\n}\n\n\n\n\ndiv\n\n    \nspan data-field=\ncognome\n/span\n altro campo \nspan data-field=\nnome\n/span\n\n\n/div\n\n\n\n\n\nPropriet\u00e0\n\n\n\n\nseparator : null,\n\n\nfields: [],\n\n\n\n\nnullLabel : '',\n\n\ngetValue : function () {\n    var self = this;\n    return self.value;\n},\n\n\n\n\n\n\n});\n\n\n\n\nRenderDateSelect\n\n\nQuesto render \u00e8 per l'inserimento o la visualizzazione di una data. Questo oggetto \nutilizza le selectbox html per l'inserimento di una data.\nE' fromato da una classe base \nDateSelectCommon\n che ha i metodi comuni alle 3 viste.\n\n\nPropriet\u00e0\n\n\n\n\nyear_selector    : '[data-render_year]',\n\n\nmonth_selector    : '[data-render_month]',\n\n\nday_selector    : '[data-render_day]',\n\n\npicker_selector : '[data-render_picker]',\n\n\nh24 : true,\n\n\ntime : false,\n\n\ndateFormat : 'YYYY-MM-DD',\n\n\ntimeFormat : 'H:i:s',\n\n\nresources :[\n    'moment-with-locales.min.js',\n]\n\n\nselectProps : {\n        active : ['day','month','year'],    // select active in dateType select\n        startYear : (new Date().getFullYear()) -3,\n        endYear : (new Date().getFullYear()) +3,\n    },\n\n\n\n\nMetodi\n\n\n\n\n_setDateControls : function () - \n\n\n_changeDate : function () - \n\n\nsetValue : function (value) \n\n\ngetValue : function () \n\n\nclear : function ()\n\n\ngetDisplayFormat : function()\n\n\ngetFormat : function () \n\n\n\n\nRenderDateSelectEdit\n\n\nEstende DateSelectCommon e si preoccupa della gestione della data in modalit\u00e0 edit.\n\n\nEsempio\n\n\nmarcatori:\n\n\n\n\ndata-render_element\n : container di tutto il render\n\n\ndata-render_control\n : input per la form che conterr\u00e0 il valore da spedire\n\n\ndata-render_day_container\n\n\ndata-render_day\n : select associata al giorno\n\n\ndata-render_month_container\n\n\ndata-render_month\n : select associata al mese\n\n\ndata-render_year_container\n\n\ndata-render_year\n : select associata all'anno\n\n\n\n\ntemplate\n\n\ndiv data-render_element  class=\ninput-group\n\n    \ninput data-render_control=\n type=\nhidden\n /\n\n    \ndiv class=\ninput-group-btn\n data-render_day_container\n\n        \nselect class=\nform-control\n data-render_day\n\n\n        \n/select\n\n    \n/div\n\n    \ndiv class=\ninput-group-btn\n data-render_month_container\n\n        \nselect class=\nform-control\n data-render_month\n\n\n        \n/select\n\n    \n/div\n\n    \ndiv class=\ninput-group-btn\n data-render_year_container\n\n        \nselect class=\nform-control\n data-render_year\n\n\n        \n/select\n\n    \n/div\n\n\n/div\n\n\n\n\n\nRenderDateSelectSearch\n\n\nEstende \nRenderDateSelectEdit\n ridefinendo al render dove aggiunge il controllo per l'operatore di ricerca\ne cambia i nomi per la convenzione con view search\n\n\nEsempio\n\n\nRenderDateSelectView\n\n\nEstende \nDateSelectCommon\n  \n\n\nEsempio\n\n\nmarcatori\n\n\n\n\ndata-render_element: container dove verr\u00e0 visualizzata la data\n\n\n\n\ntemplate \n\n\nspan data-render_element\n/span\n\n\n\n\n\nMetodi\n\n\n\n\ngetValue\n\n\nsetValue\n\n\n\n\nRenderDatePicker\n\n\nQuesto render \u00e8 per l'inserimento o la visualizzazione di una data. Questo oggetto \nutilizza il picker bootstrap per l'inserimento di una data.\n\n\nresources : {\n    edit :  [\n        'bootstrap-daterangepicker/daterangepicker.css',\n        'bootstrap-daterangepicker/moment.js',\n        'bootstrap-daterangepicker/daterangepicker.js',\n    ],\n    search : [\n        'bootstrap-daterangepicker/daterangepicker.css',\n        'bootstrap-daterangepicker/moment.js',\n        'bootstrap-daterangepicker/daterangepicker.js',\n    ],\n    view : []\n}\n\n\n\n\nRenderDatePickerEdit\n\n\nEsempio\n\n\ntemplate\n\n\ndiv data-render_element\n\n    \ninput data-render_control=\n type=\nhidden\n /\n\n    \ndiv class=\ninput-group\n\n        \ninput data-render_picker class=\nform-control text-right\n autocomplete=\noff\n /\n\n        \na data-clear class=\ninput-group-addon\n href=\njavascript:void(0)\nspan \ni class=\nfa fa-times\n/i\n/span\n/a\n\n    \n/div\n\n\n/div\n\n\n\n\n\nRenderDatePickerSearch\n\n\nEsempio\n\n\ntemplate\n\n\ndiv data-render_element\n\n    \ninput data-render_control=\n type=\nhidden\n /\n\n    \ninput data-control_operator type=\nhidden\n \n\n    \ndiv class=\ninput-group\n\n        \ninput data-render_picker class=\nform-control text-right\n autocomplete=\noff\n /\n\n        \na data-clear class=\ninput-group-addon\n href=\njavascript:void(0)\nspan \ni class=\nfa fa-times\n/i\n/span\n/a\n\n    \n/div\n\n\n/div\n\n\n\n\n\nRenderDatePickerView\n\n\nEsempio\n\n\ntemplate\n\n\nspan data-render_element\n/span\n\n\n\n\n\nRenderDateFormatted\n\n\nQuesto render \u00e8 per l'inserimento o la visualizzazione di una data. Questo oggetto \nutilizza il picker nativo del broswer associato al type=date, se supportato.\n\n\nRenderDateFormattedEdit\n\n\nEsempio\n\n\ntemplate\n\n\ndiv class=\nclearfix\n data-render_element\n\n    \ninput data-render_control=\n type=\nhidden\n /\n\n    \ndiv class=\ncol col-xs-6\n\n        \ninput data-date_formatted class=\nform-control\n type=\ndate\n /\n\n    \n/div\n\n    \ndiv class=\ncol col-xs-6\n\n        \ninput data-time_formatted class=\nform-control hide\n type=\ntime\n/\n\n    \n/div\n\n\n/div\n\n\n\n\n\nRenderDateFormattedSearch\n\n\nEsempio\n\n\ntemplate\n\n\ndiv class=\nclearfix\n data-render_element\n\n    \ninput data-render_control=\n type=\nhidden\n /\n\n    \ndiv class=\ncol col-xs-6\n\n        \ninput data-date_formatted class=\nform-control\n type=\ndate\n /\n\n    \n/div\n\n    \ndiv class=\ncol col-xs-6\n\n        \ninput data-time_formatted class=\nform-control hide\n type=\ntime\n/\n\n    \n/div\n\n\n/div\n\n\n\n\n\nRenderDateFormattedView\n\n\nEsempio\n\n\ntemplate\n\n\ndiv class=\nclearfix\n data-render_element\n\n    \ninput data-render_control=\n type=\nhidden\n /\n\n    \ndiv class=\ncol col-xs-6\n\n        \ninput data-date_formatted class=\nform-control\n type=\ndate\n /\n\n    \n/div\n\n    \ndiv class=\ncol col-xs-6\n\n        \ninput data-time_formatted class=\nform-control hide\n type=\ntime\n/\n\n    \n/div\n\n\n/div\n\n\n\n\n\nRenderBetweenDateSelect\n\n\nQuesto render serve per la gestione di un range di date.\n\n\nRenderBetweenDateSelectEdit\n\n\nEsempio\n\n\ntemplate\n\n\ndiv\n\n    \ndiv class=\ncol col-xs-6\n\n        \ndiv data-label=\napp.dal\n/div\n\n        \ndiv data-render_start\n/div\n\n    \n/div\n\n    \ndiv class=\ncol col-xs-6\n \n\n        \ndiv data-label=\napp.al\n/div\n\n        \ndiv data-render_end\n/div\n\n    \n/div\n\n\n/div\n\n\n\n\n\nRenderBetweenDateSelectSearch\n\n\nEsempio\n\n\ntemplate\n\n\ndiv\n\n    \ndiv class=\ncol col-xs-6\n\n        \ndiv data-label=\napp.dal\n/div\n\n        \ndiv data-render_start\n/div\n\n    \n/div\n\n    \ndiv class=\ncol col-xs-6\n \n\n        \ndiv data-label=\napp.al\n/div\n\n        \ndiv data-render_end\n/div\n\n    \n/div\n\n\n/div\n\n\n\n\n\nRenderBetweenDateSelectView\n\n\nEsempio\n\n\ntemplate\n\n\ndiv\n\n    \ndiv class=\ncol col-xs-6\n\n        \ndiv data-label=\napp.dal\n/div\n\n        \ndiv data-render_start\n/div\n\n    \n/div\n\n    \ndiv class=\ncol col-xs-6\n \n\n        \ndiv data-label=\napp.al\n/div\n\n        \ndiv data-render_end\n/div\n\n    \n/div\n\n\n/div\n\n\n\n\n\n\n\nRenderBetweenDatePicker\n\n\nQuesto render serve per la gestione di un range di date.\n\n\nRenderBetweenDatePickerEdit\n\n\nEsempio\n\n\ntemplate\n\n\ndiv\n\n    \ndiv class=\ncol col-xs-6\n\n        \ndiv data-label=\napp.dal\n/div\n\n        \ndiv data-render_start\n/div\n\n    \n/div\n\n    \ndiv class=\ncol col-xs-6\n \n\n        \ndiv data-label=\napp.al\n/div\n\n        \ndiv data-render_end\n/div\n\n    \n/div\n\n\n/div\n\n\n\n\n\nRenderBetweenDatePickerSearch\n\n\nEsempio\n\n\ntemplate\n\n\ndiv\n\n    \ndiv class=\ncol col-xs-6\n\n        \ndiv data-label=\napp.dal\n/div\n\n        \ndiv data-render_start\n/div\n\n    \n/div\n\n    \ndiv class=\ncol col-xs-6\n \n\n        \ndiv data-label=\napp.al\n/div\n\n        \ndiv data-render_end\n/div\n\n    \n/div\n\n\n/div\n\n\n\n\n\nRenderBetweenDatePickerView\n\n\nEsempio\n\n\ntemplate\n\n\ndiv\n\n    \ndiv class=\ncol col-xs-6\n\n        \ndiv data-label=\napp.dal\n/div\n\n        \ndiv data-render_start\n/div\n\n    \n/div\n\n    \ndiv class=\ncol col-xs-6\n \n\n        \ndiv data-label=\napp.al\n/div\n\n        \ndiv data-render_end\n/div\n\n    \n/div\n\n\n/div\n\n\n\n\n\n\n\nRenderBetweenDateFormatted\n\n\nQuesto render serve per la gestione di un range di date.\n\n\nRenderBetweenDateFormattedEdit\n\n\nEsempio\n\n\ntemplate\n\n\ndiv\n\n    \ndiv class=\ncol col-xs-6\n\n        \ndiv data-label=\napp.dal\n/div\n\n        \ndiv data-render_start\n/div\n\n    \n/div\n\n    \ndiv class=\ncol col-xs-6\n \n\n        \ndiv data-label=\napp.al\n/div\n\n        \ndiv data-render_end\n/div\n\n    \n/div\n\n\n/div\n\n\n\n\n\nRenderBetweenDateFormattedSearch\n\n\nEsempio\n\n\ntemplate\n\n\ndiv\n\n    \ndiv class=\ncol col-xs-6\n\n        \ndiv data-label=\napp.dal\n/div\n\n        \ndiv data-render_start\n/div\n\n    \n/div\n\n    \ndiv class=\ncol col-xs-6\n \n\n        \ndiv data-label=\napp.al\n/div\n\n        \ndiv data-render_end\n/div\n\n    \n/div\n\n\n/div\n\n\n\n\n\nRenderBetweenDateFormattedView\n\n\nEsempio\n\n\ntemplate\n\n\ndiv\n\n    \ndiv class=\ncol col-xs-6\n\n        \ndiv data-label=\napp.dal\n/div\n\n        \ndiv data-render_start\n/div\n\n    \n/div\n\n    \ndiv class=\ncol col-xs-6\n \n\n        \ndiv data-label=\napp.al\n/div\n\n        \ndiv data-render_end\n/div\n\n    \n/div\n\n\n/div\n\n\n\n\n\n\n\nRenderHasmany\n\n\nOggetto per la gestione delle relazioni esterne. Permette l'inserimento e visualizzazione\ndi relazioni esterne in un'unica form. Questo render definisce due template quello dell'hasmany\nche e' formato di tanti itemTemplate.\n\n\nRenderHasmanyEdit\n\n\nEsempio\n\n\ntemplate\n\n\ndiv class=\n data-render_element \n\n    \ndiv class=\ncol col-sm-12\n\n        \ndiv class=\npanel panel-warning\n\n            \ndiv class=\npanel-heading\n data-hasmany_title\n/div\n\n            \ndiv class=\npanel-body\n\n                \np data-hasmany_title_msg\n/p\n\n                \nul class=\nlist-unstyled sort_class hasmany-list\n data-render_list \n\n                    \n!--  -- contenitore hasmany -- --\n\n                \n/ul\n\n            \n/div\n\n            \ndiv class=\npanel-footer\n\n                \ndiv \n\n                    \ndiv data-render_limit class=\nhide\n\n                        \n!-- Limite massimo raggiunto --\n\n                    \n/div\n\n                    \nbutton data-button_add data-pk=\n type=\nbutton\n class=\nbtn btn-primary\n\n                        \nspan data-label=\napp.add\n/span\nnbsp;\n                        \nspan data-label=\nmodelMetadata.singular\n/span\nnbsp;\n                    \n/button\n\n                \n/div\n\n            \n/div\n\n        \n/div\n\n    \n/div\n\n\n/div\n\n\n\n\n\nitemTemplate\n\n\nli class=\ncol col-lg-6 col-md-6 col-sm-12 col-xs-12\n data-hasmany_item_structure\n\n    \ndiv class=\nclearfix\n \n\n        \ndiv class=\nclearfix\n \n\n            \nspan class=\npull-left button-move\n\n                \ni class=\nfa fa-arrows\n/i\n        \n            \n/span\n\n            \nspan class=\npull-right btn btn-xs btn-danger\n data-button_delete\n\n                \ni class=\nfa fa-close\n/i\n        \n            \n/span\n\n        \n/div\n\n        \ndiv class=\ncol col-sm-12\n data-hasmany_item\n \n        \n/div\n\n\n    \n/div\n\n    \nhr /\n\n\n/li\n\n\n\n\n\nmarcatori\n\n\npropriet\u00e0\n\n\n\n\nresources : ['jquery-sortable.js']\n\n\n_views : [],\n\n\njsonData : null,\n\n\nlimit : null,\n\n\nlimitMessage : null\n\n\nseparator : null,\n\n\nfields : [],\n\n\nmetadata : \n\n\n\n\n{\n    modelRelativeName : null,\n    relationName : null,\n}\n\n\n\n\nmetodi\n\n\n\n\nrenderNewItem(values),\n\n\ndeleteHasManyItem(viewIndex) \n\n\ngetJsonData(callback) \n\n\n_bindDeleteEvents()\n\n\n_checkLimit()\n\n\n\n\nRenderHasmanyView\n\n\nEsempio\n\n\ntemplate\n\n\ndiv data-render_element\n\n    \ndiv class=\nlist-unstyled\n data-render_list \n\n        \nul class=\nlist-unstyled\n data-field=\nitems\n data-self\n\n            \n!--  -- contenitore lista hasmany -- --\n\n        \n/ul\n\n    \n/div\n\n\n/div\n\n\n\n\n\nitemTemplate\n\n\nli\n\n    \nspan data-field=\nlabel\n \n/span\n\n\n/li\n\n\n\n\n\nmarcatori\n\n\n\n\nRenderHasmanyThrough\n\n\nOggetto per la gestione degli hasmany trought...\n\n\npropriet\u00e0\n\n\n\n\nselected : [],\n\n\nmodelName : \"none\",\n\n\nlast_searched_result : null,  // json risultato dell'ultima ricerca\n\n\nhasmany_container : '[data-hasmany_container]',\n\n\nselected_container : '[data-selected_container]',\n\n\ntitle_selector : '[data-render_title]',\n\n\nremoveActionOptions : null, // eventuali classi per il bottone\n\n\nmorph : null,\n\n\n//label_field : null,\n\n\nlabelFields : ['label'],  // campi che verranno visualizzati per gli elementi presenti\n\n\nhiddenFields : ['id','status'],\n\n\n\n\nlabelFieldsConfig : {}, // configurazioni speciali per i label fields default sono text\n\n\n\n\n\n\naddNew : false,\n\n\n\n\n\n\nsearchField : null,\n\n\n\n\nsearchDescription : null,\n\n\n\n\nsearchMethod : null,\n\n\n\n\n\n\nitemAddTemplate : null,\n\n\n\n\nitemViewTemplate : null,\n\n\n\n\nlistItemsTemplate : null,\n\n\n\n\n\n\nmetadata : {\n    autocompleteModel : null,\n  },\n\n\n\n\n\n\nmetodi\n\n\n\n\n_populateItem : function(values,container) {\n\n\n_populate : function (filter) {\n\n\n\n\nRenderHasmanyThroughEdit\n\n\nEsempio\n\n\npropriet\u00e0\n\n\n\n\nresources : [ 'jquery-sortable.js']\n\n\n_views : [],\n\n\n\n\nmetodi\n\n\n\n\nitemExist : function (values) {\n\n\naddItem : function (values) {\n\n\ndeleteItem : function (vkey) {\n\n\n\n\ntemplate\n\n\ndiv class=\n data-render_element \n\n    \ndiv class=\ncol col-sm-12\n \n\n        \ndiv class=\npanel panel-info\n\n           \ndiv class=\npanel-heading\n data-render_title\n\n\n           \n/div\n\n           \ndiv class=\npanel-body padding-3\n\n\n               \ndiv class=\ncol col-md-4 col-sm-12 padding-6 panel panel-default panel-body\n \n\n                   \nh5\nElementi selezionati\n/h5\n\n                   \nul class=\nlist-unstyled sort_class \n data-selected_container\n\n                   \n/ul\n\n\n               \n/div\n\n                  \ndiv class=\ncol col-md-8 col-sm-12 padding-15\n data-template=\nsearched\n\n\n\n\n                  \n/div\n\n           \n/div\n\n        \n/div\n\n    \n/div\n\n\n/div\n\n\n\n\n\nitemTemplate\n\n\ntemplate utilizzato per la visualizzazione degli elementi ricercati\n\n\nli data-item class=\ncol col-md-6 col-sm-12 col-xs-12\n\n   \ndiv class=\nfullwidth\n\n    \nspan style=\npointer:hand\n class=\nbtn btn-xs btn-primary\n data-add data-id data-label data-morph_type data-morph_id data-attrs=\n{'data-id':id,'data-label':label,'data-morph_type':morph_type,'data-morph_id':morph_id}\n\n        \ni class=\nfa fa-plus\n/i\n\n    \n/span\n\n   \nspan data-field='label'\n/span\n\n   \n/div\n\n\n/li\n\n\n\n\n\nsearchedTemplate\n\n\ntemplate utilizzato per la sezione di ricerca del render\n\n\ndiv class=\ninput-group margin-bottom-10\n\n    \nspan class=\ninput-group-addon \n style=\ncursor:pointer\n\n        \ni class=\nfa fa-search\n/i\n\n        \n!--\n        \nbutton class=\nbtn btn-default btn-sm\n type=button data-lang=\ngeneral-search\nGo\n/button\n--\n\n    \n/span\n\n    \ninput class=\nform-control \n  data-search type=\ntext\n value=\n data-placeholder=\nInserire parole da ricercare\n\n    \nspan data-button_add class=\ninput-group-addon \n\n        \ni  class=\nfa fa-plus\n/i\n\n    \n/span\n\n\n/div\n\n\n\ndiv class= style=\nposition:relative; overflow:hidden;\n\n    \nul class=\nlist-unstyled list-hover list-inline\n data-hasmany_container data-slimscroll-visible=\nfalse\n style=\noverflow: auto; width: auto; min-height: 60px;\n\n\n    \n/ul\n\n\n/div\n\n\n\n\n\nviewTemplate\n\n\ntemplate utilizzato per visualizzare la view interna\n\n\ndiv\n\n    \ndiv data-view_action\n/div\n\n    \ndiv data-hidden_fields\n/div\n\n    \ndiv class=\nclearfix\n \n\n        \ndiv class=\n data-view_elements\n/div\n\n\n    \n/div\n\n\n/div\n\n\n\n\n\naddedItemTemplate\n\n\ntemplate utilizzato per creare l'elemnto lista dove verr\u00e0 visualizzata la view interna\n\n\nli class=\npadding-bottom-6 border-bottom-1\n data-hasmany_through_item\n\n\n\n/li\n\n\n\n\n\nmarcatori\n\n\n\n\ndata-hasmany_through_item\n\n\n\n\nRenderHasmanyThroughView\n\n\nQuesto \u00e8 in modalit\u00e0 view con itemTemplate base, in caso di item piu' complessi ridefinire itemTemplate\naggiungendo l'attributo data-field=\"nome_campo\" nel item html che si voglia usare per visualizzarlo\n\n\nEsempio\n\n\ntemplate\n\n\ndiv data-render_element\n\n    \nul class=\nlist-unstyled\n data-render_list data-field=\nitems\n data-self\n\n        \n!--  -- contenitore lista hasmany data dal template  default_hasmany_view_items_tpl-- --\n\n    \n/ul\n\n\n/div\n\n\n\n\n\nitemTemplate\n\n\nli \n\n    \nspan data-field=\n__label__\n/span\n\n\n/li\n\n\n\n\n\nmarcatori\n\n\n\n\nRenderHasmanyUploadImage\n\n\nOggetto per la gestione di hasmany che prevedono un upload di una o pi\u00f9 immagini \n\n\npropriet\u00e0\n\n\n\n\nuploadConfView : 'ConfEdit',            // configurazione di default della upload view\n\n\nlimit : null,\n\n\nmodelName : null,\n\n\nuploadModelName : null,\n\n\nrouteName : 'uploadfile',\n\n\nvkey : null,\n\n\nlabelField : 'filename',\n\n\nuploadFields : ['ext','random','id','status','original_name','filename','mimetype','modelName','type'],\n\n\nfields : ['nome','descrizione'],\n\n\nfields_config : {\n\n\nnome : { type : 'input'},\n\n\ndescrizione : {type : 'textarea'},\n\n\n},\n\n\nmainformFields : ['nome','descrizione','original_name','filename','ext','random','id','status','mimetype'],\n\n\nicon_selector : \"[data-icon_img]\",\n\n\n\n\nmetodi\n\n\n\n\n_showItemUploadedPreview : function (container,values) {\n\n\n_bindActions : function () {    aggancia gli eventi sui pulsanti degli upload\n\n\n_checkLimit : function () {/**\n\n\ncontrolla se e' stato raggiunto il limite degli upload inseribili. In quel caso\n\n\nnasconde il bottone aggiungi\n   */\n\n\n\n\n\n\nrenderNewItem : function (values) {\n\n\ndeleteItem : function (index) {\n\n\n/**\n\n\nazione ok della popup che richiede l'upload dell'oggetto\n   */\n  ok : function(dialog) {\n\n\n\n\n\n\n/**\n\n\nazione cancel della popup\n   */\n  cancel : function () {\n\n\n\n\n\n\n_setUploadFieldsType : function () {\n\n\n_setFieldsType : function () {\n\n\n/**\n\n\nmetodo chiamato dopo che il file e' stato uploadato\n\n\n@param data: dati in json ritornati dal backend\n   */\n  afterUpload : function (data) {\n  },\u00f9\n\n\n\n\n\n\n\n\nRenderHasmanyUploadImageEdit\n\n\nEsempio\n\n\npropriet\u00e0\n\n\n\n\ntraits : ['TraitUpload'],\n\n\nresources : ['jquery.form.js','jquery-sortable.js'],\n\n\n\n\nmetodi\n\n\n\n\n/**\n\n\ncrea l'item html da aggiungere alla form principale della view\n   **/\n  _createItem : function (values,status) {\n\n\n\n\n\n\n\n\n\n\ndialogContentTemplate\n\n\n    \ndiv id=\nloader_foto\n/div\n\n    \nform enctype=\nmultipart/form-data\n method=\nPOST\n\n        action=\n encoding=\nmultipart/form-data\n\n        name=\nformupload\n\n        \ndiv data-custom_html\n\n\n        \n/div\n\n        \ntable class=\ntable\n\n            \ntr\n\n                \ntd\n\n                    \ndiv \n\n                        \nspan data-label=\napp.accepted-extensions\n/span\n:\n/div\n\n                        \ndiv data-label=\napp.extensions-foto\n/div\n\n                        \ndiv \nMax \nspan data-label=\napp.upload-max-filesize\n \n/span\n \n                    \n/div\n\n                \n/td\n\n                \ntd\n\n                    \ndiv class=\nbtn-group\n\n                        \ninput class=\nbtn btn-default\n type=\nfile\n name=\nfile\n\n                    \n/div\n\n                \n/td\n\n                \ntd\n\n                    \ndiv \n\n                        \ndiv data-preview data-field=\ndata\n/div\n\n                    \n/div\n\n                \n/td\n\n                \ntd\n\n\n                \n/td\n\n            \n/tr\n\n        \n/table\n\n        \ndiv data-view_container\n\n\n        \n/div\n\n    \n/form\n\n\n\n\n\ntemplate\n\n\ndiv class=\n data-render_element \n\n   \ndiv class=\ncol col-sm-12\n\n        \ndiv class=\npanel panel-info\n\n            \ndiv class=\npanel-heading\n data-upload_title data-label=\nmodelMetadata.singular\n\n                \nbr/\n\n                \nspan\nsmall data-foto-msg\n/small\n/span\n\n            \n/div\n\n            \ndiv class=\npanel-body\n\n                \nul class=\nlist-group sort_class list-inline\n data-render_list \n\n                \n!--  -- contenitore lista fotos -- --\n\n                \n/ul\n\n                \ndiv\n\n                    \ndiv data-render_limit data-lang=\ngeneral-max_limit_reached\n/div\n\n\n                \n/div\n\n            \n/div\n\n            \ndiv class=\npanel-footer\n\n                \ndiv\n\n                    \nbutton data-button_add data-pk=\n type=\nbutton\n class=\nbtn btn-primary\n\n                        \nspan data-label=\napp.add\n/span\n \nspan data-label=\nmodel.foto\n/span\n\n                    \n/button\n\n                \n/div\n\n            \n/div\n\n        \n/div\n\n   \n/div\n\n\n/div\n\n\n\n\n\nitemTemplate\n\n\nli class=\nlist-unstyled\n data-upload_item\n\n    \ndiv class=\ncol col-sm-12 thumbnail\n\n        \ndiv data-model_fields\n/div\n\n        \ndiv class=\nclearfix\n\n            \nsmall class=\npull-left\n data-field=\nlabel\n data-trim=\n12\n data-attrs=\n{title:label}\n/small\n\n            \nbutton class=\nbtn-danger btn-xs pull-right\n type=\nbutton\n data-button_delete data-pk=\n title=\nCancella Foto\ni class=\nfa fa-times-circle\n/i\n/button\n\n\n        \n/div\n\n        \ndiv data-preview data-field=\ndata\n/div\n\n    \n/div\n\n\n/li\n\n\n\n\n\npreviewItemTemplate\n\n\nimg data-icon class=\nbutton-move\n src=\n data-attrs=\n{src:(typeof urls !== 'undefined')?Server.getUrl(urls+'small'):Server.getUrl('/imagecache/small/'+filename)}\n\n\n\n\n\nmarcatori\n\n\nRenderHasmanyUploadImageView\n\n\nEsempio\n\n\ntemplate\n\n\ndiv data-render_element\n\n    \nul class=\nlist-unstyled\n data-render_list \n\n        \n!--  -- contenitore lista fotos -- --\n\n    \n/ul\n\n\n/div\n\n\n\n\n\nitemTemplate\n\n\nli\n\n    \nimg class=\nimg-circle img-list\n src=\n data-attrs=\n{src:Server.getUrl(urls+'icon')}\n /\n\n\n/li\n\n\n\n\n\nmarcatori\n\n\n\n\nRenderHasmanyUploadAttachment\n\n\nOggetto per la gestione di hasmany che prevedono un upload di allegati come pdf,csv,ecc.\n\n\npropriet\u00e0\n\n\n\n\nuploadConfView : 'ConfEdit',            // configurazione di default della upload view\n\n\n//langs : ['it'],\n\n\nlimit : null,\n\n\nmodelName : null,\n\n\nuploadModelName : null,\n\n\nrouteName : 'uploadfile',\n\n\niconSize : 'default',\n\n\nicons :\n\n\n\n\n {\n        default : {\n            \ndefault\n   : 'fa fa-2x fa-file-o',\n            \nxls\n       : 'fa fa-2x fa-file-excel-o',\n            \nzip\n       : 'fa fa-2x fa-file-archive-o',\n            \nmp3\n       : 'fa fa-2x fa-audio-o',\n            \njpg\n       : \nfa fa-2x fa-image-o\n,\n            \npdf\n       : \nfa fa-2x fa-file-pdf-o\n,\n            \ntxt\n       : \nfa fa-2x fa-file-text-o\n,\n        },\n        big : {\n            \ndefault\n   : 'fa fa-3x fa-file-o',\n            \nxls\n       : 'fa fa-3x fa-file-excel-o',\n            \nzip\n       : 'fa fa-3x fa-file-archive-o',\n            \nmp3\n       : 'fa fa-3x fa-audio-o',\n            \njpg\n       : \nfa fa-3x fa-image-o\n,\n            \npdf\n       : \nfa fa-3x fa-file-pdf-o\n,\n            \ntxt\n       : \nfa fa-3x fa-file-text-o\n,\n        },\n        small : {\n            \ndefault\n   : 'fa fa-file-o',\n            \nxls\n       : 'fa fa-file-excel-o',\n            \nzip\n       : 'fa fa-file-archive-o',\n            \nmp3\n       : 'fa fa-audio-o',\n            \njpg\n       : \nfa fa-image-o\n,\n            \npdf\n       : \nfa fa-file-pdf-o\n,\n            \ntxt\n       : \nfa fa-file-text-o\n,\n        }\n    }\n\n\n\n\n\n\nvkey : null,\n\n\nlabelField : 'filename',\n\n\nuploadFields : ['ext','random','id','status','original_name','filename','mimetype','modelName','type'],\n\n\nfields : ['nome','descrizione'],\n\n\nfields_config :\n\n\n\n\n{\n    nome : { type : 'input'},\n    descrizione : {type : 'textarea'},\n}\n\n\n\n\n\n\nmainformFields : ['nome','descrizione','original_name','filename','ext','random','id','status','mimetype'],\n\n\nicon_selector : \"[data-icon]\",\n\n\n\n\nmetodi\n\n\n\n\n_showItemUploadedPreview : function (container,values) {\n\n\n_bindActions : function () {\n\n\n_checkLimit : function () {\n\n\nrenderNewItem : function (values) {\n\n\ndeleteItem : function (index) {\n\n\nok : function(dialog) {\n\n\ncancel : function () {\n\n\n_setUploadFieldsType : function () {\n\n\n_setFieldsType : function () {\n\n\nafterUpload : function (data) {\n\n\n\n\nRenderHasmanyUploadAttachmentEdit\n\n\nEsempio\n\n\npropriet\u00e0\n\n\n\n\ntraits : ['TraitUpload'],\n\n\nresources : ['jquery.form.js','jquery-sortable.js'],\n\n\n\n\nmetodi\n\n\n\n\n_createItem : function (values,status)\n\n\n\n\ntemplate\n\n\ndiv class=\n data-render_element \n\n   \ndiv class=\ncol col-sm-12\n\n        \ndiv class=\npanel panel-info\n\n            \ndiv class=\npanel-heading\n data-upload_title\n\n                \nbr/\n\n                \nspan\nsmall data-foto-msg\n/small\n/span\n\n            \n/div\n\n            \ndiv class=\npanel-body\n\n                \nul class=\nlist-group sort_class list-inline\n data-render_list \n\n                \n!--  -- contenitore lista fotos -- --\n\n                \n/ul\n\n                \ndiv\n\n                    \ndiv data-render_limit data-lang=\ngeneral-max_limit_reached\n/div\n\n\n                \n/div\n\n            \n/div\n\n            \ndiv class=\npanel-footer\n\n                \ndiv\n\n                    \nbutton data-button_add data-pk=\n type=\nbutton\n class=\nbtn btn-primary\n\n                        \nspan data-label=\napp.add\n/span\n \nspan data-label=\nmodel.attachment\n/span\n\n                    \n/button\n\n                \n/div\n\n            \n/div\n\n        \n/div\n\n   \n/div\n\n\n/div\n\n\n\n\n\npreviewItemTemplate\n\n\nspan class=\nbutton-move\n\n    \ni data-icon\n/i\n\n\n/span\n\n\n\n\n\nitemTemplate\n\n\nli class=\nlist-unstyled\n data-upload_item\n\n    \ndiv class=\ncol col-sm-12 thumbnail\n\n        \ndiv data-model_fields\n/div\n\n        \ndiv class=\nclearfix\n\n            \nsmall class=\npull-left\n data-field=\nlabel\n data-trim=\n12\n data-attrs=\n{title:label}\n/small\n\n            \nbutton class=\nbtn-danger btn-xs pull-right\n type=\nbutton\n data-button_delete data-pk=\n title=\nCancella Foto\ni class=\nfa fa-times-circle\n/i\n/button\n\n\n        \n/div\n\n        \ndiv data-preview data-field=\ndata\n/div\n\n    \n/div\n\n\n/li\n\n\n\n\n\ndialogContentTemplate\n\n\n    \ndiv id=\nloader_foto\n/div\n\n    \nform enctype=\nmultipart/form-data\n method=\nPOST\n\n        action=\n encoding=\nmultipart/form-data\n\n        name=\nformupload\n\n        \ndiv data-custom_html\n\n\n        \n/div\n\n        \ntable class=\ntable\n\n            \ntr\n\n                \ntd\n\n                    \ndiv \n\n                        \nspan data-label=\napp.accepted-extensions\n/span\n:\n/div\n\n                        \ndiv data-label=\napp.extensions-attachment\n/div\n\n                        \ndiv \nMax \nspan data-label=\napp.upload-max-filesize\n \n/span\n \n                    \n/div\n\n                \n/td\n\n                \ntd\n\n                    \ndiv class=\nbtn-group\n\n                        \ninput class=\nbtn btn-default\n type=\nfile\n name=\nfile\n\n                    \n/div\n\n                \n/td\n\n                \ntd\n\n                    \ndiv \n\n                        \ndiv data-preview data-field=\ndata\n/div\n\n                    \n/div\n\n                \n/td\n\n                \ntd\n\n\n                \n/td\n\n            \n/tr\n\n        \n/table\n\n        \ndiv data-view_container\n\n\n        \n/div\n\n    \n/form\n\n\n\n\n\nmarcatori\n\n\nRenderHasmanyUploadAttachmentView\n\n\nEsempio\n\n\ntemplate\n\n\ndiv data-render_element\n\n    \nul class=\nlist-unstyled\n data-render_list \n\n        \n!--  -- contenitore lista fotos -- --\n\n    \n/ul\n\n\n/div\n\n\n\n\n\nitemTemplate\n\n\nli\n\n    \na class=\nsmall\n target=\n_blank\n href=\n#\n\n            data-href=\n'/downloadfile/'+id\n data-totranslate=\ntrue\n data-attrs=\n{'title':full_filename}\n data-append=\ntrue\n\n                \ni data-class=\nicon\n /\n\n    \n/a\n\n\n/li\n\n\n\n\n\nmarcatori\n\n\n\n\nRenderMap\n\n\nOggetto per la visualizzazione e la selezione di coordinate gps basato su googlemaps\n\n\npropriet\u00e0\n\n\n\n\n_lat : 0,\n\n\n_lng : 0,\n\n\n_hasDbValues : false,\n\n\naddress : null,\n\n\nlat_input_selector : '[data-lat_field]',\n\n\nlng_input_selector : '[data-lng_field]',\n\n\nlat_field_name : 'lat',\n\n\nlng_field_name : 'lng',\n\n\n//dialogId : '#map_dialog',\n\n\nidViewMap : null,\n\n\nmetadata : \n\n\n\n\n{\n      apiKey : null,\n      raggioArea : 5000,\n      showArea : false,\n  }\n\n\n\n\nmetodi\n\n\n\n\ngetIndirizzo : function () {\n\n\n_showDialog : function () {\n\n\nactivateMap : function(dialog,callback,options) {\n\n\n\n\n\n\nRenderMapEdit\n\n\nEsempio\n\n\nmetodi\n\n\n\n\nok : function() {\n\n\nsetValue : function(lat,lng)\n\n\n\n\n\n\ntemplate\n\n\ndiv data-control_container\n\n    \nbutton class=\nbtn btn-default\n type=\nbutton\n data-button_map data-label=\napp.modifymap\n/button\n\n    \ndiv class=\nclearfix\n\n\n        \nspan class=\npull-left\n \n\n            \nspan data-label=\napp.gpslat\n/span\n: \ninput  class=\nform-control\n data-lat_field\n/input\nnbsp;\nnbsp;\nnbsp;\nnbsp;\nnbsp;\nnbsp;\n        \n/span\n\n        \nspan class=\npull-left\n\n            \nspan data-label=\napp.gpslng\n/span\n: \ninput class=\nform-control\n class=\nbadge\n data-lng_field\n/input\n\n        \n/span\n\n    \n/div\n\n\n\n/div\n\n\n\n\n\ndialogContentTemplate\n\n\ndiv class=\nmodal-content\n\n                \ndiv class=\nmodal-header\n\n                    \nbutton type=\nbutton\n class=\nclose\n data-dismiss=\nmodal\n\n                            aria-hidden=\ntrue\ntimes;\n/button\n\n                    \nh4 class=\nmodal-title\nSeleziona coordinate\n/h4\n\n                \n/div\n\n                \ndiv class=\nmodal-body\n\n                    \ndiv class=\nrow\n\n                        \ndiv class=\ncol col-xs-6\n\n                            \ndiv class=\ninput-group\n\n                                \nspan class=\ninput-group-addon\n id=\nbasic-addon1\nIndirizzo:\n/span\n\n                                \ninput type=\ntext\n class=\nform-control\n name=\nindirizzo\n aria-describedby=\nbasic-addon1\n\n                                \nspan class=\ninput-group-addon\n id=\nbasic-addon2\na data-lnk_address href=\njavascript:void(0)\n  \ni class=\nfa fa-search\n/i\n Cerca indirizzo\n/a\n/span\n\n\n                            \n/div\n\n                        \n/div\n\n                        \ndiv class=\ncol col-xs-3\n\n                            \ndiv class=\ninput-group\n\n                                \nspan class=\ninput-group-addon\n id=\nbasic-addon1\nLat:\n/span\n\n                                \ninput type=\ntext\n class=\nform-control\n name=\nlat\n aria-describedby=\nbasic-addon1\n\n                            \n/div\n\n                        \n/div\n\n                        \ndiv class=\ncol col-xs-3\n\n                            \ndiv class=\ninput-group\n\n                                \nspan class=\ninput-group-addon\n id=\nbasic-addon1\nLng:\n/span\n\n                                \ninput type=\ntext\n class=\nform-control\n name=\nlng\n aria-describedby=\nbasic-addon1\n\n\n\n                            \n/div\n\n                        \n/div\n\n\n                        \n!-- \nspan\nLat:\n/span\n \ninput  type=\ntext\n name=\nlat\n , \nspan\nLng:\n/span\n \ninput type=\ntext\n name=\nlng\n  --\n\n\n\n                    \n/div\n\n                    \ndiv data-area_container class=\nrow hide\n\n                        \ndiv class=\ncol col-xs-12\n \n\n                            \ndiv class=\ninput-group\n\n                                \nspan class=\ninput-group-addon\n id=\nbasic-addon1\nCerchio di raggio in metri?\n/span\n\n                                \ninput class=\nform-control\n data-input_raggio type=\ntext\n value=\n1000\n\n                            \n/div\n\n                        \n/div\n\n\n\n                        \n!-- \nspan\nLat:\n/span\n \ninput  type=\ntext\n name=\nlat\n , \nspan\nLng:\n/span\n \ninput type=\ntext\n name=\nlng\n  --\n\n                    \n/div\n\n                    \ndiv id=\ngmap\n style=\nwidth:100%;height:400px\n/div\n\n                \n/div\n\n                \ndiv class=\nmodal-footer\n\n                    \nbutton data-button=\ncancel\n type=\nbutton\n class=\nbtn btn-primary\n\n                            data-dismiss=\nmodal\nAnnulla\n/button\n\n                    \nbutton data-button=\nok\n type=\nbutton\n class=\nbtn btn-primary\n\n                            data-dismiss=\nmodal\nOk\n/button\n\n\n                \n/div\n\n           \n/div\n\n\n\n\n\nmarcatori\n\n\nRenderMapSearch\n\n\nEsempio\n\n\ntemplate\n\n\ndiv data-control_container\n\n    \nbutton class=\nbtn btn-default\n type=\nbutton\n data-button_map data-label=\napp.modifymap\n/button\n\n    \ndiv class=\nclearfix\n\n        \ninput type=\nhidden\n name=\n data-control_operator\n\n        \nspan class=\npull-left\n \n\n            \nspan data-label=\napp.gpslat\n/span\n: \ninput  class=\nform-control\n data-lat_field\n/input\nnbsp;\nnbsp;\nnbsp;\nnbsp;\nnbsp;\nnbsp;\n        \n/span\n\n        \nspan class=\npull-left\n\n            \nspan data-label=\napp.gpslng\n/span\n: \ninput class=\nform-control\n class=\nbadge\n data-lng_field\n/input\n\n        \n/span\n\n    \n/div\n\n\n\n/div\n\n\n\n\n\nmarcatori\n\n\nRenderMapView\n\n\nEsempio\n\n\ntemplate\n\n\ndiv data-map_container style=\nwidth:100%;height:400px\n/div\n\n\n\n\n\nmarcatori\n\n\n\n\nRenderSwap\n\n\npropriet\u00e0\n\n\niconClass : {\n        0 : 'fa fa-circle text-danger',\n        1 : 'fa fa-circle text-success'\n    },\n    metadata : {\n        domainValues : {\n            0: 'disattivo',\n            1: 'attivo'\n        }\n    },\n\n\nmetodi\n\n\n\n\n_setHtmlData :function() {\n\n\n_swap : function () {\n\n\n_callback : function (json) {\n\n\n\n\nRenderSwapEdit\n\n\nEsempio\n\n\ntemplate\n\n\nbutton type=\nbutton\n class=\nbtn btn-default btn-xs\n data-render_element title=\n\n    \ni data-icon class=\n/i\n\n\n/button\n\n\n\n\n\nmarcatori\n\n\nRenderSwapSearch\n\n\nEsempio\n\n\ntemplate\n\n\n    \ninput data-render_control type=\nhidden\n class=\nform-control\n name=\n value=\n\n    \ninput data-control_operator type=\nhidden\n \n\n    \nbutton type=\nbutton\n class=\nbtn btn-default btn-xs\n data-render_element title=\n\n        \ni data-icon class=\n/i\n\n    \n/button\n\n\n\n\n\nmarcatori\n\n\nRenderSwapView\n\n\nEsempio\n\n\ntemplate\n\n\ni data-icon data-render_element class=\n/i\n\n\n\n\n\nmarcatori\n\n\n\n\nRenderTexthtml\n\n\nrappresentazione ed editing di testo html\n\n\nRenderTexthtmlEdit\n\n\neditor html summernote.\n\n\nEsempio\n\n\n\n\nheight : 200,\n      pluginOptions : {},\n      _pluginObject : null,\n\n\n\n\ntemplate\n\n\n    \ntextarea data-render_element data-render_control class=\nsummernote form-control\n data-summernote-lang=\nit-IT\n/textarea\n\n\n\n\n\n\nmarcatori\n\n\nRenderTexthtmlView\n\n\nEsempio\n\n\ntemplate\n\n\ndiv data-render_element data-render_control \n/div\n\n\n\n\n\nmarcatori\n\n\n\n\nRenderUploadImage\n\n\nRenderUploadImageEdit\n\n\nEsempio\n\n\ntemplate\n\n\n\n\n\n\n\nmarcatori\n\n\nRenderUploadImageView\n\n\nEsempio\n\n\ntemplate\n\n\n\n\n\n\n\nmarcatori\n\n\n\n\nRenderUploadAttachment\n\n\nRenderUploadAttachmentEdit\n\n\nEsempio\n\n\ntemplate\n\n\n\n\n\n\n\nmarcatori\n\n\nRenderUploadAttachmentView\n\n\nEsempio\n\n\ntemplate\n\n\n\n\n\n\n\nmarcatori", 
            "title": "Renders"
        }, 
        {
            "location": "/renders/#render", 
            "text": "La classe  Render  estende la classe  Component  e rappresenta la classe per la gestione di un \nsingolo dato. La classe render pu\u00f2 essere utilizzata in maniera diretta, ma il loro utilizzo reale \u00e8 \ncome componenti dei singoli dati di una view. Dentro la view un render pu\u00f2 essere usato in 3 modi differenti, \nin modalit\u00e0  edit, search, view .  La classe Render deve essere consideata come una specie di classe astratta edefinisce alcuni metodi di uso generale e \ni metodi che i veri oggetti Render devono ridefinire per funzionare. Quindi come la classe che \ndefinisce l'interfaccia dei vari oggetti Render concreti. Non dovrebbe mai essere istanziata.  il modo \u00e8 definito nelle costanti  Render.VIEW = 'view';\nRender.EDIT = 'edit';\nRender.SEARCH = 'search';", 
            "title": "Render"
        }, 
        {
            "location": "/renders/#proprieta", 
            "text": "key  : null - key dell'oggetto render (il campo del db o del field che vogliamo gestire)   className  : 'Render' - nome della Classe reale dell'oggetto    element_selector  : '[data-render_element]' - marcatore dell'elemento   control_selector  : '[data-render_control]' - marcatore del controllo html (input, select, ecc)  operator_selector  : '[data-control_operator]' - marcatore dell'input hidden dove \u00e8 memorizzato l'operatore in caso di modalit\u00e0 \nsearch   operator  : null - valore operatore in caso di modalit\u00e0 search    value  : null - valore oggetto   app  : null - identificatore dell'oggetto app della pagina viene assegnato a runtime dall'oggetto  App .  resources  : [] - vettore risorse da caricare prima di chiamare il finalize  metadata  : {} - array associativo metadati che descrivono il dato  htmlAttributes  : {}, attributi html per l'oggetto speciale identificato dal marcatore  control_selector", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/renders/#metodi", 
            "text": "init(key,attributes)  - ridefinizione del costruttore rispetto al Component.   @param key : nome del campo  @param attributes: attributi/function dell'oggetto che vogliamo ridefinire    _setHtmlAttributes(el)  - setta gli attributi presenti nella propriet\u00e0  htmlAttributes  all'elemento el  @param el : elemento jQuery a cui settare gli attributi    change()  : metodo chiamato al momento del change del render.  clear()  : medoto da chiamare per il clear del componente render.   setMetadata(metadata)  : setta la propriet\u00e0 metadata  @param metadata : valore associativo che descrivono il dato    Render.factory(key,options)  : metodo statico che permette di creare un Render  @param key \u00e8 il nome del campo da creare  @param options vettore associativo delle opzioni del render. La factory prende\noptions.type e options.mode per cercare il nome della classe da istanziare. Se non esistono,\n prende come type 'input' e come mode 'edit'.  @return object ritorna il render creato.", 
            "title": "Metodi"
        }, 
        {
            "location": "/renders/#esempio", 
            "text": "Facciamo una piccola premessa. Per evitare di dover scrivere tutto il nome della classe Render \u00e8 stata adottata la \nsequente politica:   Tutti gli oggetti Render devono avere il nome che inizia per  Render  ogni Render pu\u00f2 avere 3 classi, una per la gestione dell'oggetto render in modalit\u00e0 view una per la gestione in \nmodalit\u00e0 search e una in modalit\u00e0 edit. Supponiamo di aver pensato il nostro render e di chiamarlo  input . allora dovremmo\ncreare 3 classi:   RenderInputView : oggetto che gestir\u00e0 la visualizzazione di input in modalit\u00e0 view.  RenderInputEdit : oggetto che gestir\u00e0 la visualizzazione di input in modalit\u00e0 edit.  RenderInputSearch : oggetto che gestir\u00e0 la visualizzazione di input in modalit\u00e0 search     Ecco il codice da scrivere  var r = Render.factory('fieldName', {\n    type : 'input',\n    mode : 'edit'\n})\n// la factory cercher\u00e0 la definizione della classe 'RenderInputEdit' che rappresenta\n// l'oggetto che gestir\u00e0 il Render Input in modalit\u00e0 edit.", 
            "title": "esempio"
        }, 
        {
            "location": "/renders/#render-implementati", 
            "text": "La libreria mette a disposizione dei renders di default per gli usi pi\u00f9 comuni, in modo da avere gi\u00e0 una base abbastanza\ncompleta per iniziare a creare le nostre applicazioni. Questi renders possono essere ridefiniti e creati di nuovi.\nQuesto ci permette di cambiare, nella nostra applicazione, aspetto e/o funzionalit\u00e0.   Alcuni  mode  per alcuni render non hanno senso, in questo caso non definire la classe per quel  mode , questo generer\u00e0 un errore\nche far\u00e0 capire dell'utilizzo sbagliato del componente Render. [todo: fare esempio]  In tutti i render che verranno mostrati sotto mostreremo:   il contenuto del metodo template.  i marcatori utilizzati per la gestione corretta del suo comportamento.", 
            "title": "Render Implementati"
        }, 
        {
            "location": "/renders/#renderinput", 
            "text": "Componente per la gestione degli input standard html.", 
            "title": "RenderInput"
        }, 
        {
            "location": "/renders/#renderinputedit", 
            "text": "Esempio  {{{render_input_edit}}}", 
            "title": "RenderInputEdit"
        }, 
        {
            "location": "/renders/#template", 
            "text": "input data-render_control type= text  class= form-control  data-placeholder=    marcatori  data-render_control : necessario, indica il controllo che ricever\u00e0 il dato  data-placeholder  : opzionale, eventuale placeholder da utilizzare, verr\u00e0 fatta la translate sul valore", 
            "title": "template"
        }, 
        {
            "location": "/renders/#renderinputsearch", 
            "text": "Esempio", 
            "title": "RenderInputSearch"
        }, 
        {
            "location": "/renders/#template_1", 
            "text": "input data-render_control type= text  class= form-control  placeholder=  input data-control_operator type= hidden", 
            "title": "template"
        }, 
        {
            "location": "/renders/#renderinputview", 
            "text": "In modalit\u00e0 view, pu\u00f2 essere solo uno span. Potevo anche non definirlo, perche' non ha senso un Input in modalit\u00e0 view, \nIo ho scelto di visualizzarlo in uno span, qualcuno potrebbe decidere di farlo visualizzare come un input in modalit\u00e0\nreadonly. A voi la scelta.  Esempio", 
            "title": "RenderInputView"
        }, 
        {
            "location": "/renders/#template_2", 
            "text": "span data-render_control /span", 
            "title": "template"
        }, 
        {
            "location": "/renders/#renderhidden", 
            "text": "Componente per la gestione degli input nascosti.", 
            "title": "RenderHidden"
        }, 
        {
            "location": "/renders/#renderhiddenedit", 
            "text": "Esempio", 
            "title": "RenderHiddenEdit"
        }, 
        {
            "location": "/renders/#template_3", 
            "text": "input data-render_control type= hidden    marcatori  data-render_control : necessario, indica il controllo che ricever\u00e0 il dato", 
            "title": "template"
        }, 
        {
            "location": "/renders/#renderpassword", 
            "text": "Componente per la gestione degli input password.", 
            "title": "RenderPassword"
        }, 
        {
            "location": "/renders/#renderpasswordedit", 
            "text": "Esempio", 
            "title": "RenderPasswordEdit"
        }, 
        {
            "location": "/renders/#template_4", 
            "text": "input data-render_control type= text  class= form-control  data-placeholder=    marcatori  data-render_control : necessario, indica il controllo che ricever\u00e0 il dato  data-placeholder  : opzionale, eventuale placeholder da utilizzare, verr\u00e0 fatta la translate sul valore", 
            "title": "template"
        }, 
        {
            "location": "/renders/#rendertext", 
            "text": "Render text \u00e8 nato per rappresentare la visualizzazione di un testo. La stessa classe \u00e8 stata ridefinita\nper tutti i 3 modi.  Esempio", 
            "title": "RenderText"
        }, 
        {
            "location": "/renders/#template_5", 
            "text": "span data-render_control /span", 
            "title": "template"
        }, 
        {
            "location": "/renders/#rendertextarea", 
            "text": "", 
            "title": "RenderTextarea"
        }, 
        {
            "location": "/renders/#rendertextareaedit", 
            "text": "Esempio", 
            "title": "RenderTextareaEdit"
        }, 
        {
            "location": "/renders/#template_6", 
            "text": "textarea data-render_element data-render_control class= form-control  name=  value= /textarea", 
            "title": "template"
        }, 
        {
            "location": "/renders/#rendertextareasearch", 
            "text": "Esempio  textarea data-render_element data-render_control class= form-control  name=  value= /textarea \n             input data-control_operator type= hidden", 
            "title": "RenderTextareaSearch"
        }, 
        {
            "location": "/renders/#rendertextareaview", 
            "text": "Esempio  span data-render_control /span", 
            "title": "RenderTextareaView"
        }, 
        {
            "location": "/renders/#renderselect", 
            "text": "Oggetto per la selezione di un valore utilizzando le select", 
            "title": "RenderSelect"
        }, 
        {
            "location": "/renders/#renderselectedit", 
            "text": "Esempio", 
            "title": "RenderSelectEdit"
        }, 
        {
            "location": "/renders/#template_7", 
            "text": "select data-render_control class= form-control   /select", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#renderselectsearch", 
            "text": "Esempio", 
            "title": "RenderSelectSearch"
        }, 
        {
            "location": "/renders/#template_8", 
            "text": "select data-render_control class= form-control   /select  input data-control_operator type= hidden", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_1", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#renderselectview", 
            "text": "Esempio", 
            "title": "RenderSelectView"
        }, 
        {
            "location": "/renders/#template_9", 
            "text": "select data-render_control class= form-control   /select", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_2", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#renderinputhelped", 
            "text": "Questo Render permette di aggiungere ad un input una serie di valori predefiniti che aiutano l'utilizzatore", 
            "title": "RenderInputHelped"
        }, 
        {
            "location": "/renders/#proprieta_1", 
            "text": "customValue : true, indica se pu\u00f2 essere inserito un valore fuori dal range dei valori predefiniti  metadata : sono i valori predefiniti vettore associativo valore : 'Testo da visualizzare'   {\n    domainValues : {}\n}  //@TODO esempio", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/renders/#renderinputhelpededit", 
            "text": "Esempio", 
            "title": "RenderInputHelpedEdit"
        }, 
        {
            "location": "/renders/#template_10", 
            "text": "div data-render_element \n     input  data-render_control class= form-control  type= text  name=  value= \n     div data-option_values \n         div class= btn-group btn-group-xs  role= group  aria-label= ...  data-field= data  data-self \n             button type= button  class= btn btn-default  data-html= label  data-attrs= {'data-value':value} /button \n         /div \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_3", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#renderinputhelpedsearch", 
            "text": "Esempio", 
            "title": "RenderInputHelpedSearch"
        }, 
        {
            "location": "/renders/#template_11", 
            "text": "div data-render_element \n     input  data-control_operator class= form-control  type= hidden  name=  value= \n     input  data-render_control class= form-control  type= text  name=  value= \n     div data-option_values \n         div class= btn-group btn-group-xs  role= group  aria-label= ...  data-field= data  data-self \n             button type= button  class= btn btn-default  data-html= label  data-attrs= {'data-value':value} /button \n         /div \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_4", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#renderimage", 
            "text": "Oggetto per la renderizzazione di un'immagine proveniente. Esiste solo in modalit\u00e0 view.", 
            "title": "RenderImage"
        }, 
        {
            "location": "/renders/#renderimageview", 
            "text": "Esempio", 
            "title": "RenderImageView"
        }, 
        {
            "location": "/renders/#template_12", 
            "text": "img data-render_control", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_5", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#renderradio", 
            "text": "caption_selector : '[data-render_caption]' - marcatore", 
            "title": "RenderRadio"
        }, 
        {
            "location": "/renders/#renderradioedit", 
            "text": "Esempio", 
            "title": "RenderRadioEdit"
        }, 
        {
            "location": "/renders/#template_13", 
            "text": "label data-render_element class= radio-inline \n   input data-render_control  type= radio  value=   span data-render_caption /span  /label  input data-render_exists type= hidden", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_6", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#renderradiosearch", 
            "text": "Esempio", 
            "title": "RenderRadioSearch"
        }, 
        {
            "location": "/renders/#template_14", 
            "text": "label data-render_element class= radio-inline \n   input data-render_control  type= radio  value=   span data-render_caption /span  /label  input data-control_operator type= hidden", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_7", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#renderradioview", 
            "text": "Esempio", 
            "title": "RenderRadioView"
        }, 
        {
            "location": "/renders/#template_15", 
            "text": "div data-render_element class= checkbox-inline \n     i data-class= icon_class   /i   span data-field= text   /span  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_8", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#rendercheckbox", 
            "text": "caption_selector : '[data-render_caption]' - marcatore", 
            "title": "RenderCheckbox"
        }, 
        {
            "location": "/renders/#rendercheckboxedit", 
            "text": "Esempio", 
            "title": "RenderCheckboxEdit"
        }, 
        {
            "location": "/renders/#template_16", 
            "text": "label data-render_element class= checkbox-inline \n     input data-render_control type= checkbox  value=    span data-render_caption   /span  /label  input data-render_exists type= hidden", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_9", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#rendercheckboxsearch", 
            "text": "Esempio", 
            "title": "RenderCheckboxSearch"
        }, 
        {
            "location": "/renders/#template_17", 
            "text": "label data-render_element class= checkbox-inline \n     input data-render_control type= checkbox  value=    span data-render_caption   /span  /label  input data-control_operator type= hidden", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_10", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#rendercheckboxview", 
            "text": "Esempio", 
            "title": "RenderCheckboxView"
        }, 
        {
            "location": "/renders/#template_18", 
            "text": "div data-render_element class= checkbox-inline \n     i data-class= icon_class   /i   span data-field= text   /span  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_11", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#rendercaptcha", 
            "text": "Questo render incapsula il captca con il suo relativo reload. Esiste solo in modalit\u00e0 edit", 
            "title": "RenderCaptcha"
        }, 
        {
            "location": "/renders/#rendercaptchaedit", 
            "text": "Esempio", 
            "title": "RenderCaptchaEdit"
        }, 
        {
            "location": "/renders/#template_19", 
            "text": "div class= row \n     div class= col-sm-4  data-captcha_img   \n\n     /div \n     div class= col-sm-4 \n             input data-render_control=  class= form-control  type= text  name=  value= \n     /div \n     div class= col-sm-4 \n         button class= btn btn-sm btn-default  type= button  data-button_reload Reload /button \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_12", 
            "text": "captcha_img_selector : '[data-captcha_img]'", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#rendercustom", 
            "text": "Oggetto per chi vuole poter modificare l'html da renderizzare. Qui si pu\u00f2 inserire \ntutto quello che si vuole utilizzando che chiamate render e finalize. Le tre classi sono\nuguali.", 
            "title": "RenderCustom"
        }, 
        {
            "location": "/renders/#rendercustomedit", 
            "text": "Esempio", 
            "title": "RenderCustomEdit"
        }, 
        {
            "location": "/renders/#template_20", 
            "text": "div data-render_element data-render_control /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_13", 
            "text": "data-render_element  data-render_control", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#renderdecimal", 
            "text": "Oggetto per la gestione dei decimali con parte intera e decimale gestiti separatamente.", 
            "title": "RenderDecimal"
        }, 
        {
            "location": "/renders/#renderdecimaledit", 
            "text": "Esempio", 
            "title": "RenderDecimalEdit"
        }, 
        {
            "location": "/renders/#template_21", 
            "text": "div class= input-group  data-render_element \n     span class= input-group-addon hide symbol_left  data-render_symbol /span \n     input class= form-control text-right  type= text  data-render_control_int \n     span class= input-group-addon , /span \n     input class= form-control text-right  type= text  data-render_control_dec \n     input type= hidden  data-render_control= \n     span class= input-group-addon hide symbol_right  data-render_symbol /span  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_14", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#renderdecimalsearch", 
            "text": "Esempio", 
            "title": "RenderDecimalSearch"
        }, 
        {
            "location": "/renders/#template_22", 
            "text": "div class= input-group  data-render_element \n     span class= input-group-addon hide symbol_left  data-render_symbol /span \n     input class= form-control text-right  type= text  data-render_control_int \n     span class= input-group-addon , /span \n     input class= form-control text-right  type= text  data-render_control_dec \n     input type= hidden  data-render_control= \n     span class= input-group-addon hide symbol_right  data-render_symbol /span \n     input data-control_operator type= hidden    /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_15", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#renderdecimalview", 
            "text": "Esempio", 
            "title": "RenderDecimalView"
        }, 
        {
            "location": "/renders/#template_23", 
            "text": "div data-render_element class= text-right \n     span class= hide symbol_left  data-render_symbol /span \n     span class= text-right  data-render_control_int /span \n     span class= hide symbol_right text-left  data-render_symbol /span  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_16", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#renderautocomplete", 
            "text": "Questo render \u00e8 stato pensato per il popolamento di una chiave con riferimento ad una tabella\nesterna permettendo la ricerca e inserendo la chiave_id  selezionata nel input nascosto.\nEsiste solo in modalit\u00e0 edit che si chiama  RenderAutocompleteEdit", 
            "title": "RenderAutocomplete"
        }, 
        {
            "location": "/renders/#renderautocompleteedit", 
            "text": "Esempio", 
            "title": "RenderAutocompleteEdit"
        }, 
        {
            "location": "/renders/#template_24", 
            "text": "div class= input-group \n     span style= height:19px  class= input-group-addon  id= basic-addon1  data-render_autocomplete_view data-lang= autocomplete-nonselezionato /span \n     input data-render_control type= hidden  name=  value= \n     div data-render_element class= autosuggest  data-minLength= 1  data-queryURL= \n         input data-render_autocomplete_input type= text  name= src  placeholder=  class= form-control typeahead  / \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#proprieta_2", 
            "text": "routeName  : 'autocomplete' - nome della route da utilizzare per reperire i dati dal server  autocomplete_view_selector  : '[data-render_autocomplete_view]' - marcatore dove verr\u00e0 visualizzato\nle info della entry scelta   autocomplete_input_selector  : '[data-render_autocomplete_input]' - marcatore dove verr\u00e0 agganciato\nil plugins typehead di bootstrap.    fields  : [],                // campi su cui effettuare la ricerca, vengono messi come parametro field nella \nrichiesta al server   labelFields : [] , campi da utilizzare nella visualizzazione della selectbox e nel campo label dell'item scelto  metadata  :   {\n    modelData : null,           // dati del modello selezionato\n    autocompleteModel : null,   // nome modello da utilizzare nelle chiamate rest per la popolazione dei dati\n    method : null,              // eventuale parametro da mandare in get nella chiamata rest\n    separator : null,           // separatore da utillare nella visualizzazione dei campi in caso siano piu' di uno\n    n_items : null,             // numero di items da richiedere\n}   resources  : vettore delle risorse esterne che ha bisogno per funzionare. Questo render si appoggia a\ntypeahead bootstrap.   [\n        'typeahead/bootstrap3-typeahead.min.js',\n        'typeahead/typeahead.bundle.js',\n        'typeahead/typeaheadjs.css'\n]", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/renders/#metodi_1", 
            "text": "_getLabelValue()  :    ritorna il nome dell'inputview, tiene conto del fatto che si potrebbe trovare in un hasmany  e il nome potrebbe avere le []\n */     _getInputViewName  : function ()     _getFieldValue  : function()     _createUrl  : function ()     _renderSelectedValue  : function ()     getAutocompleteRow  : function (element)     ev_selected  : function (datum)     getValue  : function ()", 
            "title": "Metodi"
        }, 
        {
            "location": "/renders/#renderbelongsto", 
            "text": "Questo render \u00e8 solo per la visualizzazione di dati pi\u00f9 complessi che non sono formati da un solo\nvalore, in genere viene utilizzato per la rappresentazione di campi di una tabella\nesterna rispetto a campo corrente, istanza", 
            "title": "RenderBelongsto"
        }, 
        {
            "location": "/renders/#renderbelongstoview", 
            "text": "Esempio", 
            "title": "RenderBelongstoView"
        }, 
        {
            "location": "/renders/#marcatori_17", 
            "text": "data-render_element", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#template_25", 
            "text": "div data-render_element /div   itemTemplate : vuoto. Da definire solo se si vuole avere una visualizzazinoe particolare\ndei campi. Per esempio supponiamo che il nostro belongsto punti ad una tabella \nclienti con questi dati  {\n    nome : 'nome',\n    cognome : 'cognome',\n}  div \n     span data-field= cognome /span  altro campo  span data-field= nome /span  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#proprieta_3", 
            "text": "separator : null,  fields: [],   nullLabel : '',  getValue : function () {\n    var self = this;\n    return self.value;\n},    });", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/renders/#renderdateselect", 
            "text": "Questo render \u00e8 per l'inserimento o la visualizzazione di una data. Questo oggetto \nutilizza le selectbox html per l'inserimento di una data.\nE' fromato da una classe base  DateSelectCommon  che ha i metodi comuni alle 3 viste.", 
            "title": "RenderDateSelect"
        }, 
        {
            "location": "/renders/#proprieta_4", 
            "text": "year_selector    : '[data-render_year]',  month_selector    : '[data-render_month]',  day_selector    : '[data-render_day]',  picker_selector : '[data-render_picker]',  h24 : true,  time : false,  dateFormat : 'YYYY-MM-DD',  timeFormat : 'H:i:s',  resources :[\n    'moment-with-locales.min.js',\n]  selectProps : {\n        active : ['day','month','year'],    // select active in dateType select\n        startYear : (new Date().getFullYear()) -3,\n        endYear : (new Date().getFullYear()) +3,\n    },", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/renders/#metodi_2", 
            "text": "_setDateControls : function () -   _changeDate : function () -   setValue : function (value)   getValue : function ()   clear : function ()  getDisplayFormat : function()  getFormat : function ()", 
            "title": "Metodi"
        }, 
        {
            "location": "/renders/#renderdateselectedit", 
            "text": "Estende DateSelectCommon e si preoccupa della gestione della data in modalit\u00e0 edit.  Esempio", 
            "title": "RenderDateSelectEdit"
        }, 
        {
            "location": "/renders/#marcatori_18", 
            "text": "data-render_element  : container di tutto il render  data-render_control  : input per la form che conterr\u00e0 il valore da spedire  data-render_day_container  data-render_day  : select associata al giorno  data-render_month_container  data-render_month  : select associata al mese  data-render_year_container  data-render_year  : select associata all'anno", 
            "title": "marcatori:"
        }, 
        {
            "location": "/renders/#template_26", 
            "text": "div data-render_element  class= input-group \n     input data-render_control=  type= hidden  / \n     div class= input-group-btn  data-render_day_container \n         select class= form-control  data-render_day \n\n         /select \n     /div \n     div class= input-group-btn  data-render_month_container \n         select class= form-control  data-render_month \n\n         /select \n     /div \n     div class= input-group-btn  data-render_year_container \n         select class= form-control  data-render_year \n\n         /select \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#renderdateselectsearch", 
            "text": "Estende  RenderDateSelectEdit  ridefinendo al render dove aggiunge il controllo per l'operatore di ricerca\ne cambia i nomi per la convenzione con view search  Esempio", 
            "title": "RenderDateSelectSearch"
        }, 
        {
            "location": "/renders/#renderdateselectview", 
            "text": "Estende  DateSelectCommon     Esempio  marcatori   data-render_element: container dove verr\u00e0 visualizzata la data   template   span data-render_element /span", 
            "title": "RenderDateSelectView"
        }, 
        {
            "location": "/renders/#metodi_3", 
            "text": "getValue  setValue", 
            "title": "Metodi"
        }, 
        {
            "location": "/renders/#renderdatepicker", 
            "text": "Questo render \u00e8 per l'inserimento o la visualizzazione di una data. Questo oggetto \nutilizza il picker bootstrap per l'inserimento di una data.  resources : {\n    edit :  [\n        'bootstrap-daterangepicker/daterangepicker.css',\n        'bootstrap-daterangepicker/moment.js',\n        'bootstrap-daterangepicker/daterangepicker.js',\n    ],\n    search : [\n        'bootstrap-daterangepicker/daterangepicker.css',\n        'bootstrap-daterangepicker/moment.js',\n        'bootstrap-daterangepicker/daterangepicker.js',\n    ],\n    view : []\n}", 
            "title": "RenderDatePicker"
        }, 
        {
            "location": "/renders/#renderdatepickeredit", 
            "text": "Esempio", 
            "title": "RenderDatePickerEdit"
        }, 
        {
            "location": "/renders/#template_27", 
            "text": "div data-render_element \n     input data-render_control=  type= hidden  / \n     div class= input-group \n         input data-render_picker class= form-control text-right  autocomplete= off  / \n         a data-clear class= input-group-addon  href= javascript:void(0) span  i class= fa fa-times /i /span /a \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#renderdatepickersearch", 
            "text": "Esempio", 
            "title": "RenderDatePickerSearch"
        }, 
        {
            "location": "/renders/#template_28", 
            "text": "div data-render_element \n     input data-render_control=  type= hidden  / \n     input data-control_operator type= hidden   \n     div class= input-group \n         input data-render_picker class= form-control text-right  autocomplete= off  / \n         a data-clear class= input-group-addon  href= javascript:void(0) span  i class= fa fa-times /i /span /a \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#renderdatepickerview", 
            "text": "Esempio", 
            "title": "RenderDatePickerView"
        }, 
        {
            "location": "/renders/#template_29", 
            "text": "span data-render_element /span", 
            "title": "template"
        }, 
        {
            "location": "/renders/#renderdateformatted", 
            "text": "Questo render \u00e8 per l'inserimento o la visualizzazione di una data. Questo oggetto \nutilizza il picker nativo del broswer associato al type=date, se supportato.", 
            "title": "RenderDateFormatted"
        }, 
        {
            "location": "/renders/#renderdateformattededit", 
            "text": "Esempio", 
            "title": "RenderDateFormattedEdit"
        }, 
        {
            "location": "/renders/#template_30", 
            "text": "div class= clearfix  data-render_element \n     input data-render_control=  type= hidden  / \n     div class= col col-xs-6 \n         input data-date_formatted class= form-control  type= date  / \n     /div \n     div class= col col-xs-6 \n         input data-time_formatted class= form-control hide  type= time / \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#renderdateformattedsearch", 
            "text": "Esempio", 
            "title": "RenderDateFormattedSearch"
        }, 
        {
            "location": "/renders/#template_31", 
            "text": "div class= clearfix  data-render_element \n     input data-render_control=  type= hidden  / \n     div class= col col-xs-6 \n         input data-date_formatted class= form-control  type= date  / \n     /div \n     div class= col col-xs-6 \n         input data-time_formatted class= form-control hide  type= time / \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#renderdateformattedview", 
            "text": "Esempio", 
            "title": "RenderDateFormattedView"
        }, 
        {
            "location": "/renders/#template_32", 
            "text": "div class= clearfix  data-render_element \n     input data-render_control=  type= hidden  / \n     div class= col col-xs-6 \n         input data-date_formatted class= form-control  type= date  / \n     /div \n     div class= col col-xs-6 \n         input data-time_formatted class= form-control hide  type= time / \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#renderbetweendateselect", 
            "text": "Questo render serve per la gestione di un range di date.", 
            "title": "RenderBetweenDateSelect"
        }, 
        {
            "location": "/renders/#renderbetweendateselectedit", 
            "text": "Esempio", 
            "title": "RenderBetweenDateSelectEdit"
        }, 
        {
            "location": "/renders/#template_33", 
            "text": "div \n     div class= col col-xs-6 \n         div data-label= app.dal /div \n         div data-render_start /div \n     /div \n     div class= col col-xs-6   \n         div data-label= app.al /div \n         div data-render_end /div \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#renderbetweendateselectsearch", 
            "text": "Esempio", 
            "title": "RenderBetweenDateSelectSearch"
        }, 
        {
            "location": "/renders/#template_34", 
            "text": "div \n     div class= col col-xs-6 \n         div data-label= app.dal /div \n         div data-render_start /div \n     /div \n     div class= col col-xs-6   \n         div data-label= app.al /div \n         div data-render_end /div \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#renderbetweendateselectview", 
            "text": "Esempio", 
            "title": "RenderBetweenDateSelectView"
        }, 
        {
            "location": "/renders/#template_35", 
            "text": "div \n     div class= col col-xs-6 \n         div data-label= app.dal /div \n         div data-render_start /div \n     /div \n     div class= col col-xs-6   \n         div data-label= app.al /div \n         div data-render_end /div \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#renderbetweendatepicker", 
            "text": "Questo render serve per la gestione di un range di date.", 
            "title": "RenderBetweenDatePicker"
        }, 
        {
            "location": "/renders/#renderbetweendatepickeredit", 
            "text": "Esempio", 
            "title": "RenderBetweenDatePickerEdit"
        }, 
        {
            "location": "/renders/#template_36", 
            "text": "div \n     div class= col col-xs-6 \n         div data-label= app.dal /div \n         div data-render_start /div \n     /div \n     div class= col col-xs-6   \n         div data-label= app.al /div \n         div data-render_end /div \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#renderbetweendatepickersearch", 
            "text": "Esempio", 
            "title": "RenderBetweenDatePickerSearch"
        }, 
        {
            "location": "/renders/#template_37", 
            "text": "div \n     div class= col col-xs-6 \n         div data-label= app.dal /div \n         div data-render_start /div \n     /div \n     div class= col col-xs-6   \n         div data-label= app.al /div \n         div data-render_end /div \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#renderbetweendatepickerview", 
            "text": "Esempio", 
            "title": "RenderBetweenDatePickerView"
        }, 
        {
            "location": "/renders/#template_38", 
            "text": "div \n     div class= col col-xs-6 \n         div data-label= app.dal /div \n         div data-render_start /div \n     /div \n     div class= col col-xs-6   \n         div data-label= app.al /div \n         div data-render_end /div \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#renderbetweendateformatted", 
            "text": "Questo render serve per la gestione di un range di date.", 
            "title": "RenderBetweenDateFormatted"
        }, 
        {
            "location": "/renders/#renderbetweendateformattededit", 
            "text": "Esempio", 
            "title": "RenderBetweenDateFormattedEdit"
        }, 
        {
            "location": "/renders/#template_39", 
            "text": "div \n     div class= col col-xs-6 \n         div data-label= app.dal /div \n         div data-render_start /div \n     /div \n     div class= col col-xs-6   \n         div data-label= app.al /div \n         div data-render_end /div \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#renderbetweendateformattedsearch", 
            "text": "Esempio", 
            "title": "RenderBetweenDateFormattedSearch"
        }, 
        {
            "location": "/renders/#template_40", 
            "text": "div \n     div class= col col-xs-6 \n         div data-label= app.dal /div \n         div data-render_start /div \n     /div \n     div class= col col-xs-6   \n         div data-label= app.al /div \n         div data-render_end /div \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#renderbetweendateformattedview", 
            "text": "Esempio", 
            "title": "RenderBetweenDateFormattedView"
        }, 
        {
            "location": "/renders/#template_41", 
            "text": "div \n     div class= col col-xs-6 \n         div data-label= app.dal /div \n         div data-render_start /div \n     /div \n     div class= col col-xs-6   \n         div data-label= app.al /div \n         div data-render_end /div \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#renderhasmany", 
            "text": "Oggetto per la gestione delle relazioni esterne. Permette l'inserimento e visualizzazione\ndi relazioni esterne in un'unica form. Questo render definisce due template quello dell'hasmany\nche e' formato di tanti itemTemplate.", 
            "title": "RenderHasmany"
        }, 
        {
            "location": "/renders/#renderhasmanyedit", 
            "text": "Esempio", 
            "title": "RenderHasmanyEdit"
        }, 
        {
            "location": "/renders/#template_42", 
            "text": "div class=  data-render_element  \n     div class= col col-sm-12 \n         div class= panel panel-warning \n             div class= panel-heading  data-hasmany_title /div \n             div class= panel-body \n                 p data-hasmany_title_msg /p \n                 ul class= list-unstyled sort_class hasmany-list  data-render_list  \n                     !--  -- contenitore hasmany -- -- \n                 /ul \n             /div \n             div class= panel-footer \n                 div  \n                     div data-render_limit class= hide \n                         !-- Limite massimo raggiunto -- \n                     /div \n                     button data-button_add data-pk=  type= button  class= btn btn-primary \n                         span data-label= app.add /span nbsp;\n                         span data-label= modelMetadata.singular /span nbsp;\n                     /button \n                 /div \n             /div \n         /div \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#itemtemplate", 
            "text": "li class= col col-lg-6 col-md-6 col-sm-12 col-xs-12  data-hasmany_item_structure \n     div class= clearfix   \n         div class= clearfix   \n             span class= pull-left button-move \n                 i class= fa fa-arrows /i         \n             /span \n             span class= pull-right btn btn-xs btn-danger  data-button_delete \n                 i class= fa fa-close /i         \n             /span \n         /div \n         div class= col col-sm-12  data-hasmany_item  \n         /div \n\n     /div \n     hr /  /li", 
            "title": "itemTemplate"
        }, 
        {
            "location": "/renders/#marcatori_19", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#proprieta_5", 
            "text": "resources : ['jquery-sortable.js']  _views : [],  jsonData : null,  limit : null,  limitMessage : null  separator : null,  fields : [],  metadata :    {\n    modelRelativeName : null,\n    relationName : null,\n}", 
            "title": "propriet\u00e0"
        }, 
        {
            "location": "/renders/#metodi_4", 
            "text": "renderNewItem(values),  deleteHasManyItem(viewIndex)   getJsonData(callback)   _bindDeleteEvents()  _checkLimit()", 
            "title": "metodi"
        }, 
        {
            "location": "/renders/#renderhasmanyview", 
            "text": "Esempio", 
            "title": "RenderHasmanyView"
        }, 
        {
            "location": "/renders/#template_43", 
            "text": "div data-render_element \n     div class= list-unstyled  data-render_list  \n         ul class= list-unstyled  data-field= items  data-self \n             !--  -- contenitore lista hasmany -- -- \n         /ul \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#itemtemplate_1", 
            "text": "li \n     span data-field= label   /span  /li", 
            "title": "itemTemplate"
        }, 
        {
            "location": "/renders/#marcatori_20", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#renderhasmanythrough", 
            "text": "Oggetto per la gestione degli hasmany trought...", 
            "title": "RenderHasmanyThrough"
        }, 
        {
            "location": "/renders/#proprieta_6", 
            "text": "selected : [],  modelName : \"none\",  last_searched_result : null,  // json risultato dell'ultima ricerca  hasmany_container : '[data-hasmany_container]',  selected_container : '[data-selected_container]',  title_selector : '[data-render_title]',  removeActionOptions : null, // eventuali classi per il bottone  morph : null,  //label_field : null,  labelFields : ['label'],  // campi che verranno visualizzati per gli elementi presenti  hiddenFields : ['id','status'],   labelFieldsConfig : {}, // configurazioni speciali per i label fields default sono text    addNew : false,    searchField : null,   searchDescription : null,   searchMethod : null,    itemAddTemplate : null,   itemViewTemplate : null,   listItemsTemplate : null,    metadata : {\n    autocompleteModel : null,\n  },", 
            "title": "propriet\u00e0"
        }, 
        {
            "location": "/renders/#metodi_5", 
            "text": "_populateItem : function(values,container) {  _populate : function (filter) {", 
            "title": "metodi"
        }, 
        {
            "location": "/renders/#renderhasmanythroughedit", 
            "text": "Esempio", 
            "title": "RenderHasmanyThroughEdit"
        }, 
        {
            "location": "/renders/#proprieta_7", 
            "text": "resources : [ 'jquery-sortable.js']  _views : [],", 
            "title": "propriet\u00e0"
        }, 
        {
            "location": "/renders/#metodi_6", 
            "text": "itemExist : function (values) {  addItem : function (values) {  deleteItem : function (vkey) {", 
            "title": "metodi"
        }, 
        {
            "location": "/renders/#template_44", 
            "text": "div class=  data-render_element  \n     div class= col col-sm-12   \n         div class= panel panel-info \n            div class= panel-heading  data-render_title \n\n            /div \n            div class= panel-body padding-3 \n\n                div class= col col-md-4 col-sm-12 padding-6 panel panel-default panel-body   \n                    h5 Elementi selezionati /h5 \n                    ul class= list-unstyled sort_class   data-selected_container \n                    /ul \n\n                /div \n                   div class= col col-md-8 col-sm-12 padding-15  data-template= searched \n\n\n\n                   /div \n            /div \n         /div \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#itemtemplate_2", 
            "text": "template utilizzato per la visualizzazione degli elementi ricercati  li data-item class= col col-md-6 col-sm-12 col-xs-12 \n    div class= fullwidth \n     span style= pointer:hand  class= btn btn-xs btn-primary  data-add data-id data-label data-morph_type data-morph_id data-attrs= {'data-id':id,'data-label':label,'data-morph_type':morph_type,'data-morph_id':morph_id} \n         i class= fa fa-plus /i \n     /span \n    span data-field='label' /span \n    /div  /li", 
            "title": "itemTemplate"
        }, 
        {
            "location": "/renders/#searchedtemplate", 
            "text": "template utilizzato per la sezione di ricerca del render  div class= input-group margin-bottom-10 \n     span class= input-group-addon   style= cursor:pointer \n         i class= fa fa-search /i \n         !--\n         button class= btn btn-default btn-sm  type=button data-lang= general-search Go /button -- \n     /span \n     input class= form-control    data-search type= text  value=  data-placeholder= Inserire parole da ricercare \n     span data-button_add class= input-group-addon  \n         i  class= fa fa-plus /i \n     /span  /div  div class= style= position:relative; overflow:hidden; \n     ul class= list-unstyled list-hover list-inline  data-hasmany_container data-slimscroll-visible= false  style= overflow: auto; width: auto; min-height: 60px; \n\n     /ul  /div", 
            "title": "searchedTemplate"
        }, 
        {
            "location": "/renders/#viewtemplate", 
            "text": "template utilizzato per visualizzare la view interna  div \n     div data-view_action /div \n     div data-hidden_fields /div \n     div class= clearfix   \n         div class=  data-view_elements /div \n\n     /div  /div", 
            "title": "viewTemplate"
        }, 
        {
            "location": "/renders/#addeditemtemplate", 
            "text": "template utilizzato per creare l'elemnto lista dove verr\u00e0 visualizzata la view interna  li class= padding-bottom-6 border-bottom-1  data-hasmany_through_item  /li", 
            "title": "addedItemTemplate"
        }, 
        {
            "location": "/renders/#marcatori_21", 
            "text": "data-hasmany_through_item", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#renderhasmanythroughview", 
            "text": "Questo \u00e8 in modalit\u00e0 view con itemTemplate base, in caso di item piu' complessi ridefinire itemTemplate\naggiungendo l'attributo data-field=\"nome_campo\" nel item html che si voglia usare per visualizzarlo  Esempio", 
            "title": "RenderHasmanyThroughView"
        }, 
        {
            "location": "/renders/#template_45", 
            "text": "div data-render_element \n     ul class= list-unstyled  data-render_list data-field= items  data-self \n         !--  -- contenitore lista hasmany data dal template  default_hasmany_view_items_tpl-- -- \n     /ul  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#itemtemplate_3", 
            "text": "li  \n     span data-field= __label__ /span  /li", 
            "title": "itemTemplate"
        }, 
        {
            "location": "/renders/#marcatori_22", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#renderhasmanyuploadimage", 
            "text": "Oggetto per la gestione di hasmany che prevedono un upload di una o pi\u00f9 immagini", 
            "title": "RenderHasmanyUploadImage"
        }, 
        {
            "location": "/renders/#proprieta_8", 
            "text": "uploadConfView : 'ConfEdit',            // configurazione di default della upload view  limit : null,  modelName : null,  uploadModelName : null,  routeName : 'uploadfile',  vkey : null,  labelField : 'filename',  uploadFields : ['ext','random','id','status','original_name','filename','mimetype','modelName','type'],  fields : ['nome','descrizione'],  fields_config : {  nome : { type : 'input'},  descrizione : {type : 'textarea'},  },  mainformFields : ['nome','descrizione','original_name','filename','ext','random','id','status','mimetype'],  icon_selector : \"[data-icon_img]\",", 
            "title": "propriet\u00e0"
        }, 
        {
            "location": "/renders/#metodi_7", 
            "text": "_showItemUploadedPreview : function (container,values) {  _bindActions : function () {    aggancia gli eventi sui pulsanti degli upload  _checkLimit : function () {/**  controlla se e' stato raggiunto il limite degli upload inseribili. In quel caso  nasconde il bottone aggiungi\n   */    renderNewItem : function (values) {  deleteItem : function (index) {  /**  azione ok della popup che richiede l'upload dell'oggetto\n   */\n  ok : function(dialog) {    /**  azione cancel della popup\n   */\n  cancel : function () {    _setUploadFieldsType : function () {  _setFieldsType : function () {  /**  metodo chiamato dopo che il file e' stato uploadato  @param data: dati in json ritornati dal backend\n   */\n  afterUpload : function (data) {\n  },\u00f9", 
            "title": "metodi"
        }, 
        {
            "location": "/renders/#renderhasmanyuploadimageedit", 
            "text": "Esempio", 
            "title": "RenderHasmanyUploadImageEdit"
        }, 
        {
            "location": "/renders/#proprieta_9", 
            "text": "traits : ['TraitUpload'],  resources : ['jquery.form.js','jquery-sortable.js'],", 
            "title": "propriet\u00e0"
        }, 
        {
            "location": "/renders/#metodi_8", 
            "text": "/**  crea l'item html da aggiungere alla form principale della view\n   **/\n  _createItem : function (values,status) {", 
            "title": "metodi"
        }, 
        {
            "location": "/renders/#dialogcontenttemplate", 
            "text": "div id= loader_foto /div \n     form enctype= multipart/form-data  method= POST \n        action=  encoding= multipart/form-data \n        name= formupload \n         div data-custom_html \n\n         /div \n         table class= table \n             tr \n                 td \n                     div  \n                         span data-label= app.accepted-extensions /span : /div \n                         div data-label= app.extensions-foto /div \n                         div  Max  span data-label= app.upload-max-filesize   /span  \n                     /div \n                 /td \n                 td \n                     div class= btn-group \n                         input class= btn btn-default  type= file  name= file \n                     /div \n                 /td \n                 td \n                     div  \n                         div data-preview data-field= data /div \n                     /div \n                 /td \n                 td \n\n                 /td \n             /tr \n         /table \n         div data-view_container \n\n         /div \n     /form", 
            "title": "dialogContentTemplate"
        }, 
        {
            "location": "/renders/#template_46", 
            "text": "div class=  data-render_element  \n    div class= col col-sm-12 \n         div class= panel panel-info \n             div class= panel-heading  data-upload_title data-label= modelMetadata.singular \n                 br/ \n                 span small data-foto-msg /small /span \n             /div \n             div class= panel-body \n                 ul class= list-group sort_class list-inline  data-render_list  \n                 !--  -- contenitore lista fotos -- -- \n                 /ul \n                 div \n                     div data-render_limit data-lang= general-max_limit_reached /div \n\n                 /div \n             /div \n             div class= panel-footer \n                 div \n                     button data-button_add data-pk=  type= button  class= btn btn-primary \n                         span data-label= app.add /span   span data-label= model.foto /span \n                     /button \n                 /div \n             /div \n         /div \n    /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#itemtemplate_4", 
            "text": "li class= list-unstyled  data-upload_item \n     div class= col col-sm-12 thumbnail \n         div data-model_fields /div \n         div class= clearfix \n             small class= pull-left  data-field= label  data-trim= 12  data-attrs= {title:label} /small \n             button class= btn-danger btn-xs pull-right  type= button  data-button_delete data-pk=  title= Cancella Foto i class= fa fa-times-circle /i /button \n\n         /div \n         div data-preview data-field= data /div \n     /div  /li", 
            "title": "itemTemplate"
        }, 
        {
            "location": "/renders/#previewitemtemplate", 
            "text": "img data-icon class= button-move  src=  data-attrs= {src:(typeof urls !== 'undefined')?Server.getUrl(urls+'small'):Server.getUrl('/imagecache/small/'+filename)}", 
            "title": "previewItemTemplate"
        }, 
        {
            "location": "/renders/#marcatori_23", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#renderhasmanyuploadimageview", 
            "text": "Esempio", 
            "title": "RenderHasmanyUploadImageView"
        }, 
        {
            "location": "/renders/#template_47", 
            "text": "div data-render_element \n     ul class= list-unstyled  data-render_list  \n         !--  -- contenitore lista fotos -- -- \n     /ul  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#itemtemplate_5", 
            "text": "li \n     img class= img-circle img-list  src=  data-attrs= {src:Server.getUrl(urls+'icon')}  /  /li", 
            "title": "itemTemplate"
        }, 
        {
            "location": "/renders/#marcatori_24", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#renderhasmanyuploadattachment", 
            "text": "Oggetto per la gestione di hasmany che prevedono un upload di allegati come pdf,csv,ecc.", 
            "title": "RenderHasmanyUploadAttachment"
        }, 
        {
            "location": "/renders/#proprieta_10", 
            "text": "uploadConfView : 'ConfEdit',            // configurazione di default della upload view  //langs : ['it'],  limit : null,  modelName : null,  uploadModelName : null,  routeName : 'uploadfile',  iconSize : 'default',  icons :    {\n        default : {\n             default    : 'fa fa-2x fa-file-o',\n             xls        : 'fa fa-2x fa-file-excel-o',\n             zip        : 'fa fa-2x fa-file-archive-o',\n             mp3        : 'fa fa-2x fa-audio-o',\n             jpg        :  fa fa-2x fa-image-o ,\n             pdf        :  fa fa-2x fa-file-pdf-o ,\n             txt        :  fa fa-2x fa-file-text-o ,\n        },\n        big : {\n             default    : 'fa fa-3x fa-file-o',\n             xls        : 'fa fa-3x fa-file-excel-o',\n             zip        : 'fa fa-3x fa-file-archive-o',\n             mp3        : 'fa fa-3x fa-audio-o',\n             jpg        :  fa fa-3x fa-image-o ,\n             pdf        :  fa fa-3x fa-file-pdf-o ,\n             txt        :  fa fa-3x fa-file-text-o ,\n        },\n        small : {\n             default    : 'fa fa-file-o',\n             xls        : 'fa fa-file-excel-o',\n             zip        : 'fa fa-file-archive-o',\n             mp3        : 'fa fa-audio-o',\n             jpg        :  fa fa-image-o ,\n             pdf        :  fa fa-file-pdf-o ,\n             txt        :  fa fa-file-text-o ,\n        }\n    }   vkey : null,  labelField : 'filename',  uploadFields : ['ext','random','id','status','original_name','filename','mimetype','modelName','type'],  fields : ['nome','descrizione'],  fields_config :   {\n    nome : { type : 'input'},\n    descrizione : {type : 'textarea'},\n}   mainformFields : ['nome','descrizione','original_name','filename','ext','random','id','status','mimetype'],  icon_selector : \"[data-icon]\",", 
            "title": "propriet\u00e0"
        }, 
        {
            "location": "/renders/#metodi_9", 
            "text": "_showItemUploadedPreview : function (container,values) {  _bindActions : function () {  _checkLimit : function () {  renderNewItem : function (values) {  deleteItem : function (index) {  ok : function(dialog) {  cancel : function () {  _setUploadFieldsType : function () {  _setFieldsType : function () {  afterUpload : function (data) {", 
            "title": "metodi"
        }, 
        {
            "location": "/renders/#renderhasmanyuploadattachmentedit", 
            "text": "Esempio", 
            "title": "RenderHasmanyUploadAttachmentEdit"
        }, 
        {
            "location": "/renders/#proprieta_11", 
            "text": "traits : ['TraitUpload'],  resources : ['jquery.form.js','jquery-sortable.js'],", 
            "title": "propriet\u00e0"
        }, 
        {
            "location": "/renders/#metodi_10", 
            "text": "_createItem : function (values,status)", 
            "title": "metodi"
        }, 
        {
            "location": "/renders/#template_48", 
            "text": "div class=  data-render_element  \n    div class= col col-sm-12 \n         div class= panel panel-info \n             div class= panel-heading  data-upload_title \n                 br/ \n                 span small data-foto-msg /small /span \n             /div \n             div class= panel-body \n                 ul class= list-group sort_class list-inline  data-render_list  \n                 !--  -- contenitore lista fotos -- -- \n                 /ul \n                 div \n                     div data-render_limit data-lang= general-max_limit_reached /div \n\n                 /div \n             /div \n             div class= panel-footer \n                 div \n                     button data-button_add data-pk=  type= button  class= btn btn-primary \n                         span data-label= app.add /span   span data-label= model.attachment /span \n                     /button \n                 /div \n             /div \n         /div \n    /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#previewitemtemplate_1", 
            "text": "span class= button-move \n     i data-icon /i  /span", 
            "title": "previewItemTemplate"
        }, 
        {
            "location": "/renders/#itemtemplate_6", 
            "text": "li class= list-unstyled  data-upload_item \n     div class= col col-sm-12 thumbnail \n         div data-model_fields /div \n         div class= clearfix \n             small class= pull-left  data-field= label  data-trim= 12  data-attrs= {title:label} /small \n             button class= btn-danger btn-xs pull-right  type= button  data-button_delete data-pk=  title= Cancella Foto i class= fa fa-times-circle /i /button \n\n         /div \n         div data-preview data-field= data /div \n     /div  /li", 
            "title": "itemTemplate"
        }, 
        {
            "location": "/renders/#dialogcontenttemplate_1", 
            "text": "div id= loader_foto /div \n     form enctype= multipart/form-data  method= POST \n        action=  encoding= multipart/form-data \n        name= formupload \n         div data-custom_html \n\n         /div \n         table class= table \n             tr \n                 td \n                     div  \n                         span data-label= app.accepted-extensions /span : /div \n                         div data-label= app.extensions-attachment /div \n                         div  Max  span data-label= app.upload-max-filesize   /span  \n                     /div \n                 /td \n                 td \n                     div class= btn-group \n                         input class= btn btn-default  type= file  name= file \n                     /div \n                 /td \n                 td \n                     div  \n                         div data-preview data-field= data /div \n                     /div \n                 /td \n                 td \n\n                 /td \n             /tr \n         /table \n         div data-view_container \n\n         /div \n     /form", 
            "title": "dialogContentTemplate"
        }, 
        {
            "location": "/renders/#marcatori_25", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#renderhasmanyuploadattachmentview", 
            "text": "Esempio", 
            "title": "RenderHasmanyUploadAttachmentView"
        }, 
        {
            "location": "/renders/#template_49", 
            "text": "div data-render_element \n     ul class= list-unstyled  data-render_list  \n         !--  -- contenitore lista fotos -- -- \n     /ul  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#itemtemplate_7", 
            "text": "li \n     a class= small  target= _blank  href= # \n            data-href= '/downloadfile/'+id  data-totranslate= true  data-attrs= {'title':full_filename}  data-append= true \n                 i data-class= icon  / \n     /a  /li", 
            "title": "itemTemplate"
        }, 
        {
            "location": "/renders/#marcatori_26", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#rendermap", 
            "text": "Oggetto per la visualizzazione e la selezione di coordinate gps basato su googlemaps", 
            "title": "RenderMap"
        }, 
        {
            "location": "/renders/#proprieta_12", 
            "text": "_lat : 0,  _lng : 0,  _hasDbValues : false,  address : null,  lat_input_selector : '[data-lat_field]',  lng_input_selector : '[data-lng_field]',  lat_field_name : 'lat',  lng_field_name : 'lng',  //dialogId : '#map_dialog',  idViewMap : null,  metadata :    {\n      apiKey : null,\n      raggioArea : 5000,\n      showArea : false,\n  }", 
            "title": "propriet\u00e0"
        }, 
        {
            "location": "/renders/#metodi_11", 
            "text": "getIndirizzo : function () {  _showDialog : function () {  activateMap : function(dialog,callback,options) {", 
            "title": "metodi"
        }, 
        {
            "location": "/renders/#rendermapedit", 
            "text": "Esempio", 
            "title": "RenderMapEdit"
        }, 
        {
            "location": "/renders/#metodi_12", 
            "text": "ok : function() {  setValue : function(lat,lng)", 
            "title": "metodi"
        }, 
        {
            "location": "/renders/#template_50", 
            "text": "div data-control_container \n     button class= btn btn-default  type= button  data-button_map data-label= app.modifymap /button \n     div class= clearfix \n\n         span class= pull-left   \n             span data-label= app.gpslat /span :  input  class= form-control  data-lat_field /input nbsp; nbsp; nbsp; nbsp; nbsp; nbsp;\n         /span \n         span class= pull-left \n             span data-label= app.gpslng /span :  input class= form-control  class= badge  data-lng_field /input \n         /span \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#dialogcontenttemplate_2", 
            "text": "div class= modal-content \n                 div class= modal-header \n                     button type= button  class= close  data-dismiss= modal \n                            aria-hidden= true times; /button \n                     h4 class= modal-title Seleziona coordinate /h4 \n                 /div \n                 div class= modal-body \n                     div class= row \n                         div class= col col-xs-6 \n                             div class= input-group \n                                 span class= input-group-addon  id= basic-addon1 Indirizzo: /span \n                                 input type= text  class= form-control  name= indirizzo  aria-describedby= basic-addon1 \n                                 span class= input-group-addon  id= basic-addon2 a data-lnk_address href= javascript:void(0)    i class= fa fa-search /i  Cerca indirizzo /a /span \n\n                             /div \n                         /div \n                         div class= col col-xs-3 \n                             div class= input-group \n                                 span class= input-group-addon  id= basic-addon1 Lat: /span \n                                 input type= text  class= form-control  name= lat  aria-describedby= basic-addon1 \n                             /div \n                         /div \n                         div class= col col-xs-3 \n                             div class= input-group \n                                 span class= input-group-addon  id= basic-addon1 Lng: /span \n                                 input type= text  class= form-control  name= lng  aria-describedby= basic-addon1 \n\n\n                             /div \n                         /div \n\n                         !--  span Lat: /span   input  type= text  name= lat  ,  span Lng: /span   input type= text  name= lng   -- \n\n\n                     /div \n                     div data-area_container class= row hide \n                         div class= col col-xs-12   \n                             div class= input-group \n                                 span class= input-group-addon  id= basic-addon1 Cerchio di raggio in metri? /span \n                                 input class= form-control  data-input_raggio type= text  value= 1000 \n                             /div \n                         /div \n\n\n                         !--  span Lat: /span   input  type= text  name= lat  ,  span Lng: /span   input type= text  name= lng   -- \n                     /div \n                     div id= gmap  style= width:100%;height:400px /div \n                 /div \n                 div class= modal-footer \n                     button data-button= cancel  type= button  class= btn btn-primary \n                            data-dismiss= modal Annulla /button \n                     button data-button= ok  type= button  class= btn btn-primary \n                            data-dismiss= modal Ok /button \n\n                 /div \n            /div", 
            "title": "dialogContentTemplate"
        }, 
        {
            "location": "/renders/#marcatori_27", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#rendermapsearch", 
            "text": "Esempio", 
            "title": "RenderMapSearch"
        }, 
        {
            "location": "/renders/#template_51", 
            "text": "div data-control_container \n     button class= btn btn-default  type= button  data-button_map data-label= app.modifymap /button \n     div class= clearfix \n         input type= hidden  name=  data-control_operator \n         span class= pull-left   \n             span data-label= app.gpslat /span :  input  class= form-control  data-lat_field /input nbsp; nbsp; nbsp; nbsp; nbsp; nbsp;\n         /span \n         span class= pull-left \n             span data-label= app.gpslng /span :  input class= form-control  class= badge  data-lng_field /input \n         /span \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_28", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#rendermapview", 
            "text": "Esempio", 
            "title": "RenderMapView"
        }, 
        {
            "location": "/renders/#template_52", 
            "text": "div data-map_container style= width:100%;height:400px /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_29", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#renderswap", 
            "text": "", 
            "title": "RenderSwap"
        }, 
        {
            "location": "/renders/#proprieta_13", 
            "text": "iconClass : {\n        0 : 'fa fa-circle text-danger',\n        1 : 'fa fa-circle text-success'\n    },\n    metadata : {\n        domainValues : {\n            0: 'disattivo',\n            1: 'attivo'\n        }\n    },", 
            "title": "propriet\u00e0"
        }, 
        {
            "location": "/renders/#metodi_13", 
            "text": "_setHtmlData :function() {  _swap : function () {  _callback : function (json) {", 
            "title": "metodi"
        }, 
        {
            "location": "/renders/#renderswapedit", 
            "text": "Esempio", 
            "title": "RenderSwapEdit"
        }, 
        {
            "location": "/renders/#template_53", 
            "text": "button type= button  class= btn btn-default btn-xs  data-render_element title= \n     i data-icon class= /i  /button", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_30", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#renderswapsearch", 
            "text": "Esempio", 
            "title": "RenderSwapSearch"
        }, 
        {
            "location": "/renders/#template_54", 
            "text": "input data-render_control type= hidden  class= form-control  name=  value= \n     input data-control_operator type= hidden   \n     button type= button  class= btn btn-default btn-xs  data-render_element title= \n         i data-icon class= /i \n     /button", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_31", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#renderswapview", 
            "text": "Esempio", 
            "title": "RenderSwapView"
        }, 
        {
            "location": "/renders/#template_55", 
            "text": "i data-icon data-render_element class= /i", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_32", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#rendertexthtml", 
            "text": "rappresentazione ed editing di testo html", 
            "title": "RenderTexthtml"
        }, 
        {
            "location": "/renders/#rendertexthtmledit", 
            "text": "editor html summernote.  Esempio   height : 200,\n      pluginOptions : {},\n      _pluginObject : null,", 
            "title": "RenderTexthtmlEdit"
        }, 
        {
            "location": "/renders/#template_56", 
            "text": "textarea data-render_element data-render_control class= summernote form-control  data-summernote-lang= it-IT /textarea", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_33", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#rendertexthtmlview", 
            "text": "Esempio", 
            "title": "RenderTexthtmlView"
        }, 
        {
            "location": "/renders/#template_57", 
            "text": "div data-render_element data-render_control  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_34", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#renderuploadimage", 
            "text": "", 
            "title": "RenderUploadImage"
        }, 
        {
            "location": "/renders/#renderuploadimageedit", 
            "text": "Esempio", 
            "title": "RenderUploadImageEdit"
        }, 
        {
            "location": "/renders/#template_58", 
            "text": "", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_35", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#renderuploadimageview", 
            "text": "Esempio", 
            "title": "RenderUploadImageView"
        }, 
        {
            "location": "/renders/#template_59", 
            "text": "", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_36", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#renderuploadattachment", 
            "text": "", 
            "title": "RenderUploadAttachment"
        }, 
        {
            "location": "/renders/#renderuploadattachmentedit", 
            "text": "Esempio", 
            "title": "RenderUploadAttachmentEdit"
        }, 
        {
            "location": "/renders/#template_60", 
            "text": "", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_37", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/renders/#renderuploadattachmentview", 
            "text": "Esempio", 
            "title": "RenderUploadAttachmentView"
        }, 
        {
            "location": "/renders/#template_61", 
            "text": "", 
            "title": "template"
        }, 
        {
            "location": "/renders/#marcatori_38", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/views/", 
            "text": "View\n\n\nLa \nView\n estende la classe \nComponent\n rappesenta il contenitore di dati html associate ad un \nmodello di dati. Questi dati possono essere passati manualmente o \nattraverso un server, utilizzando le route che usano le convenzioni REST.\nQuesto modello viene utilizzato per discriminare la route per il recupero dei dati.\nDa essa sono derivate le classi:\n\n\n\n\nRecordView\n per la gestione di dati provenienti da record di un modello\n\n\nCollectionView\n per la gestione di una collezione di record di un modello\n\n\n\n\nLa view accetta come parametro una configurazione. \n\n\nNella configurazione vengono definiti:\n\n\n\n\ni campi da visualizzare, quali Render utilizzare per ogni dato\n\n\nle azioni disponibili che si possono effettuare. In caso di view che gestisce una \n  collezione di records esistono due tipi di azioni\n\n\nRecordAction\n definite sul singolo record\n\n\nCollectionAction\n che agisce sulla collezione dei dati\n\n\n\n\nRappresenta la classe Principale\n\n\nPropriet\u00e0\n\n\n\n\n\n\nmodelName\n \ndefault null\n rappresenta il nome del modello dei dati gestito\n\n\n\n\n\n\ndummyModel\n \ndefault 'dummy'\n  Questo nome \u00e8 del modello dummy per view che contiene dati calcolati manualmente senza comunicazione con \nil server attraverso la route\n\n\n\n\n\n\nrenderObjs\n \ndefault []\n Array degli oggetti \nRender\n presenti nella view\n\n\n\n\n\n\ndata\n \ndefault {}\n Array associativo contente i dati della view\n\n\n\n\n\n\ntype\n \ndefault null\n Tipo di view, \n\n\n\n\n\n\njQe\n \ndefault null\n Oggetto jQuery che punta al container della view\n\n\n\n\n\n\ndefaultRenderType\n \ndefault null\n\n\n\n\n\n\nconnectedObjs\n       : {},\n\n\n\n\nkeyId\n               : null,     // identificativo univoco della view creata e assegnata dall'oggetto App   \n\n\napp\n                : null,      // oggetto app proprietario della view\n\n\nviewTypeToRenderType\n :          // mapping delle viste con i tipi default dei render\n\n\n\n\n{\n    'list'      : BaseElement.VIEW,\n    'edit'      : BaseElement.EDIT,\n    'search'    : BaseElement.SEARCH,\n    'view'      : BaseElement.VIEW,\n    'calendar'  : BaseElement.VIEW,\n    'csv'       : BaseElement.EDIT\n}\n\n\n\n\n\n\n\n\nresources\n : [] - vettore delle risorse esterne da caricare prima di visualizzare la view\n\n\n\n\n\n\nroute\n : null - oggetto route associata view\n\n\n\n\n\n\nrouteName\n : null - nome della classe Route da agganciare ( vedere Route.factory per la convenzione sui nomi) \n\n\n\n\n\n\nactions\n : [] - vettore nome azioni da istanziare nella view\n\n\n\n\n\n\nMetodi\n\n\n\n\n\n\ndraw(callback)\n metodo per la renderizzazione della view. callback e' la chiamata che\nviene effettuata alla fine se passata. La sequenza delle chiamate attraverso le callback:\nSe all'interno di questi metodi non viene chiamata la callback viene interrotto il flusso di chiamate.\nUtilizzare questa tecnica per interrompere la visualizzazione o il comportamento della view.\n\n\n\n\nbeforeLoadData(callback)\n\n\nloadData(callback)\n\n\nafterLoadData(callback)\n\n\n_prepareContainer()\n\n\nbeforeRender(callback)\n\n\nrender(callback)\n\n\nafterRender(callback)\n\n\nbeforeFinalize(callback)\n\n\n_loadExternalResources(callback)\n\n\nfinalize(callback)\n\n\nafterFinalize(callback)\n\n\n\n\n\n\n\n\nbeforeLoadData(callback)\n - metodo viene chiamato prima che la view carichi i dati\n\n\n\n\nloadData(callback)\n - metodo chiamato per il caricamento dei dati attraverso la route\n\n\nafterLoadData(callback)\n - metodo chiamato dopo che i dati sono stati caricati\n\n\n_prepareContainer()\n - metodo dove viene iniettato l'html presente nel template\n\n\nbeforeRender(callback)\n - metodo chiamato prima di chiamare utilizzabile per eventuali manipolazioni\n\n\nrender(callback)\n - questo metodo \u00e8 utilizzato per disegnare la struttura html\n\n\nafterRender(callback)\n - chiamato dopo il render\n\n\nbeforeFinalize(callback)\n\n\n_loadExternalResources(callback)\n - chiamata per il caricamento delle risorse esterne\n\n\nfinalize(callback)\n - metodo per la creazione e il disegno dei renders della view\n\n\nafterFinalize(callback)\n - metodo per agganciare eventuali eventi personali e modifiche custom\n\n\ndelete()\n - metodo chiamato prima di cancellare la view per dare la possibilit\u00e0 alla view di \ncancellare eventuali oggetti creati \n\n\nsetRoute(route)\n - metodo per settare l'oggetto route interno alla view\n\n\ngetRoute()\n - ritorna la route istanziata della view\n\n\nsetId(id)\n - setta l'identificativo della view\n\n\nsetData(data)\n - setta i dati della dall'esterno\n\n\ngetFormData(data)\n - ritorna i dati di una form html in un vettore associativo se esiste\n\n\ngetItemTemplate(key)\n - Istanzia e ritorna il template associato all'oggetto Render associato alla\nkey\n\n\n@param key : nome del campo di cui si vuole il template\n\n\n\n\n\n\n_getRenderMode(key)\n - (privata) restituisce la modalita' in cui verra' disegnato l'oggetto render \nin base alla configurazione dell'oggetto nell fields_config della view\n\n\nkey : nome del campo\n\n\n\n\n\n\n_getRenderType(key)\n - (privata) ritorna il type del render in base al type definito nella fields_config della view\no alla configurazione di default\n\n\nkey : nome del campo\n\n\n\n\n\n\n_getDefaultRenderConfig(key)\n - ritorna la configurazione di default dell'oggetto render\n\n\nkey : chiave dell'oggetto render\n\n\n\n\n\n\n_getRenderConfig(key)\n - ritorna la configurazione finale dell'oggetto render, eseguendo\nil merge tra la configuazione di default e quella passata alla view.\n\n\n\n\nRecordView\n\n\nLa \nRecordView\n estende \nView\n \u00e8 pensata per tutte le viste che gestiscono un solo record del modello \ndi dati.\n\n\nPropriet\u00e0\n\n\n\n\n_pkName : 'id' - nome della chiave univoca del modello dati\n\n\n_pkValue : null - valore della chiave univoca del modello dati\n\n\n_actions : [] - vettore con tutte le azioni istanziati nella vista\n\n\nactions : [] - vettore nomi delle azioni da istanziare nella vista\n\n\ntype : 'record' - tipo della vista in questo caso record\n\n\ndefaultItemTemplate : 'left' - Oggetto template di default che conterr\u00e0 gli oggetti Renders\n\n\ndata : vettore associativo dei dati dalla forma\n\n\n\n\ndata : {\n    value : {},     //vettore associativo key =\n value dei modello dati\n    metadata : {},  //vettore associativo key =\n {} metadati che descrivono key\n    validationRules : {}, // vettore associativo key =\n {} regole di validazione lato javascript da applicare alla key    \n}\n\n\n\n\nMetodi\n\n\n\n\ngetRenderValue(fieldName)\n : \n\n\ngetRender : function(fieldName)\n\n\nresetForm()\n : function () - esegue il clear di tutti i render della view\n\n\n_callAction\n : function (actionData) - (privata)\n\n\n_setActions\n : function () - (privata) instanzia tutte le azioni definite per riga e globali partendo\n                                             * dalla configurazione iniziale definita nella config\n                                             * far partire l'ascolto per tutti gli eventi che riguardano le proprie\n                                             * azioni\n\n\n_createAction(key)\n  \n\n\n_setKeys\n: setta le keys attive per la view\n\n\n_renderHidden(key)\n : renderizza i render di tipo hidden perche' sono speciali\n\n\n_renderObjectElement(key)\n : renderizza l'oggetto render associato alla key che non sia hidden\n\n\n_getGroup(key)\n: ritorna il gruppo associato al campo nel caso di view con template strutturato a gruppi\n\n\n_renderElement(key)\n : chiama _renderHidden o _renderObjectElement in base al type\n\n\n_createRender(container,key)\n : crea l'oggetto render e gli associa il container dove\nverr\u00e0 disegnato\n\n\n_renderActions()\n : renderizza le azioni istanziate nella view\n\n\n_getFieldName(key)\n : ritorna il fieldName costruito a partire dalla key a seconda del \ntipo di view che stiamo realizzando. Ci permette di mettere dei prefissi o suffissi a tutte le key\ndel modello dei dati dovuti ad esigenze dell'html tipo view annidate per creare delle form complese.\n\n\n\n\nCollectionView\n\n\nLa \nCollectionView\n estend la \nView\n \u00e8 pensata per tutte le viste che gestiscono una lista record del modello \ndi dati.\n\n\nPropriet\u00e0\n\n\n\n\n_recordActions\n : [] - vettore azioni della vista per ogni singolo record,\n\n\n_globalActions\n : [] - vettore azioni sull'intera vista\n\n\n_paginatorActions\n : [] - vettore azioni per la paginazione\n\n\nactionsLayout\n : 'left' - tipo di layout per le azioni sui record, left o right\n\n\ntype\n : 'list' - tipo di view, in questo caso list\n\n\ndefaultItemTemplate\n : 'no' - classe del template da istanziare per ogni render\n\n\norderClass\n - le classi da aggiungere all'header del campo ordinato.\n\n\n\n\norderClass : {\n  'asc': ['sorting_asc'],\n  'desc' : ['sorting_desc']\n}\n\n\n\n\n\n\ndata - dati del modello dati da visualizzare, vettore associativo della forma:\n\n\n\n\ndata : {\n    value : [],\n    metadata : {},\n    pagination : {},\n    resultParams : {},\n    summary : {},\n    validationRules : {},\n    backParams : {},\n    has_errors : false,\n    list_header : ''\n}\n\n\n\n\nMetodi\n\n\n\n\nsetOrder(field)\n - permette di ordinare una view rispetto ad un campo\n\n\n_setKeys()\n - (privata) setta i render da renderizzare nella vista\n\n\n_renderHeaderValues(jQrow)\n - (privata) setta l'intestazione delle colonne della vista\n\n\n_renderHeaderActions(jQrow)\n - (privata) renderizza l'header della colonna action\n\n\n_renderHeader()\n - (privata) - renderizza l'header\n\n\n_renderFooter()\n - (privata) - renderizza il footer\n\n\n_attachEvents(index)\n - \n\n\n_attachDetailEvents()\n -\n\n\ngetChecked()\n - ritorna il vettore di tutte le pk delle rows selezionate.\n\n\n_renderGlobalActions()\n - renderizzare le azioni globali alla vista\n\n\n_renderInfoHeader()\n - renderizza un eventuale header di info della lista. L'html viene preso da\ndata.list_header\n\n\nrender(callback)\n - renderizza la view\n\n\n_renderRow(index)\n - (privata) renderizza la singola riga\n\n\nfinalize(callback)\n - finalizza la view e aggancia gli eventi\n\n\n_setActions()\n - (privata) instanzia tutte le azioni definite per riga e globali partendo\ndalla configurazione iniziale definita nella config. Far partire l'ascolto per tutti gli eventi \nche riguardano le proprie azioni\n\n\n_setVisibleKeys()\n \n\n\n_renderZeroResult()\n  \n\n\n_renderPagination()\n \n\n\n_createRender(r,key,container)\n \n\n\n_createGrid()\n \n\n\n_createAction(row,key)\n - crea un azione se row e' null setta come modelData \ndell'azione tutti i dati altrimenti il dati della row indicata.\n\n\n@param row : row a cui si riferisce null in caso di azione globale\n\n\n@param key : nome dell'azione\n\n\n@returns {*} : ritorna l'azione creata\n\n\n\n\n\n\n_renderSingleActions()\n  \n\n\n_hasNeedSelectionAction()\n - controlla che la lista abbia almeno un'azione che ha bisogno di selezionare elementi\n\n\n_hasRecordActions()\n  - controlla se la view abbia almeno una azione che lavora sul singolo record della lista\n\n\n\n\nViews Implementate\n\n\nNella libreria sono state implementate delle views di uso comune\n\n\nViewList\n\n\nE' una collection view che renderizza i risultati su un template tabellare,\nviene popolata attraverso la \nRouteList\n che prevede come parametro il modelName, questa view \u00e8 composta dal\ntemplate principale piu' altri template delle varie sezioni di una lista. Questo permette di poter configurare\nle singole parti in modo pi\u00f9 puntuale. \n\n\nEsempio\n\n\nEsempio con dati custom\n\n\nmarcatori\n\n\ntemplate\n\n\n    \ndiv class=\npanel panel-default panel-body model-list\n\n        \ndiv data-list_header\n/div\n\n        \ndiv data-hidden_fields\n/div\n\n        \ndiv class=\nclearfix\n\n            \ndiv class=\ncol col-md-5 col-xs-12 hidden-xs list-actions\n data-view_collection_actions\n/div\n\n            \ndiv class=\ncol col-md-7 col-xs-12 list-pagination\n data-view_pagination\n/div\n\n        \n/div\n\n        \nhr/\n\n        \ndiv class=\ntable-responsive\n\n\n            \ntable class=\ntable table-striped table-condensed table-hover table-bordered table-vertical-middle nomargin\n\n                \nthead\n\n                    \ntr data-view_row_headers\n\n\n                    \n/tr\n\n                \n/thead\n\n                \ntbody\n\n                    \ntr data-view_row_elements\n\n\n                    \n/tr\n\n                \n/tbody\n\n                \ntfoot\n\n                    \ntr data-view_row_footer\ntd\n/td\n/tr\n\n                \n/tfoot\n\n            \n/table\n\n        \n/div\n\n        \nhr/\n\n        \ndiv class=\nclearfix\n\n            \ndiv class=\ncol col-md-5 col-xs-12 list-actions\n data-view_collection_actions\n/div\n\n            \ndiv class=\ncol col-md-7 col-xs-12 list-pagination\n data-view_pagination\n/div\n\n        \n/div\n\n    \n/div\n\n\n\n\n\nrecordActionTemplate\n\n\n    \ndiv class=\nbtn-group\n role=\ngroup\n/div\n\n\n\n\n\nheaderTemplate\n\n\n    \nth\n\n        \nspan data-element\n/span\n\n    \n/th\n\n\n\n\n\norderTemplate\n\n\nth class=\nsorting\n\n    \na href=\njavascript:void(0)\n data-action=\nactionOrder\n data-pk=\n\n        \nspan data-element\n/span\n\n    \n/a\n\n\n/th\n\n\n\n\n\ncellTemplate\n\n\n    \ntd \n\n\n    \n/td\n\n\n\n\n\ncheckAllTemplate\n\n\n    \ninput type=\ncheckbox\n data-button=\ncheckAll\n title=\nSeleziona tutti\n\n\n\n\n\ncheckTemplate\n\n\n    \nspan class=\npull-left\n \ninput data-pk=\n type=\ncheckbox\n name=\ncheck_row\nnbsp;\n/span\n\n\n\n\n\npaginatorTemplate\n\n\nul class=\nlist-inline hidden-md hidden-sm hidden-xs\n\n    \nli data-action_first_page\na data-first_page href=\njavascript:void(0)\nlaquo;\n/a\n/li\n\n    \nli data-action_prev_page\na data-prev_page href=\njavascript:void(0)\nlt;\n/a\n/li\n\n    \nli\n\n    \nspan style=\npadding:2px\n \n\n        \nspan data-keytranslate=\ngeneral-pagination_total\n \nTot\n/span\n\n        \nb\nspan data-field=\ntotal\n/span\n/b\n,\n    \nnbsp;\nnbsp;\n        \nspan data-action_per_page\n/span\n\n        \n!--\nselect data-action_per_page data-field=\nper_page\n data-source=\npagination_steps\n self style=\nheight:24px\n class=\npagination-input\n data-action=\nactionPerPage\n--\n\n\n!----\n\n        \n!--\n/select\n--\n\n        \nspan data-keytranslate=\ngeneral-pagination_per_page\n \nPer pagina\n/span\n\n    \n/span\n\n    \n/li\n\n    \nli\na class=\ndisabled\n href=\njavascript:void(0)\n data-page_info=\n \nspan data-field=\ncurrent_page\n/span\n / \nspan data-field=\nlast_page\n/span\n \n/a\n/li\n\n    \nli data-action_next_page \na data-next_page href=\njavascript:void(0)\ngt;\n/a\n/li\n\n    \nli data-action_last_page\na data-last_page href=\njavascript:void(0)\nraquo;\n/a\n/li\n\n\n\n/ul\n\n\nul class=\npagination pagination-sm hidden-lg hidden-xl\n\n    \nli data-action_first_page\na data-action=\nActionFirstPage\n href=\njavascript:void(0)\nlaquo;\n/a\n/li\n\n    \nli data-action_prev_page\na data-action=\nActionPrevPage\n href=\njavascript:void(0)\nlt;\n/a\n/li\n\n    \nli\na class=\ndisabled\n href=\njavascript:void(0)\n data-page_info=\n  \nspan data-field=\ncurrent_page\n/span\n / \nspan data-field=\nlast_page\n/span\n (\nspan data-field=\ntotal\n/span\n)\n/a\n/li\n\n    \nli data-action_next_page\na data-action=\nActionNextPage\n href=\njavascript:void(0)\ngt;\n/a\n/li\n\n    \nli data-action_last_page\na data-action=\nActionLastPage\n href=\njavascript:void(0)\nraquo;\n/a\n/li\n\n\n\n/ul\n\n\n\n\n\nViewInsert\n\n\nE' una view per la creazione di un nuovo record. Utilizza la route RouteInsert per il \ncaricamento dei dati e la RouteSave per il salvataggio\n\n\nEsempio\n\n\ntemplate\n\n\ndiv class=\nwell\n data-edit-main\n\n    \ndiv data-alert class=\nalert alert-success hide\n/div\n\n    \nform name=\ndata_form\n class=\nmodel-edit\n\n        \ndiv data-hidden_fields\n/div\n\n        \ndiv data-view_elements\n\n\n        \n/div\n\n        \ndiv data-view_action \n\n            \ndiv data-field=\ndata\n data-self\n\n\n            \n/div\n\n        \n/div\n\n    \n/form\n\n\n/div\n\n\n\n\n\nViewEdit\n\n\nE' una view per la modifica di un record. Utilizza la route RouteEdit per il caricamento\ne la RouteUpdate per il salvataggio\n\n\nEsempio\n\n\ntemplate\n\n\ndiv class=\nwell\n data-edit-main\n\n    \ndiv data-alert class=\nalert alert-success hide\n/div\n\n    \nform name=\ndata_form\n class=\nmodel-edit\n\n        \ndiv data-hidden_fields\n/div\n\n        \ndiv data-view_elements\n\n\n        \n/div\n\n        \ndiv data-view_action \n\n            \ndiv data-field=\ndata\n data-self\n\n\n            \n/div\n\n        \n/div\n\n    \n/form\n\n\n/div\n\n\n\n\n\nViewSearch\n\n\nE' una view per effettuare una ricerca.\n\n\nEsempio\n\n\ntemplate\n\n\ndiv class=\nwell search-well\n\n    \nform name=\ndata_form\n class=\nmodel-search\n\n        \ndiv data-hidden_fields\n/div\n\n        \ndiv class=\nsearch-row\n data-view_elements\n\n        \n/div\n\n\n        \ndiv class=\nclearfix\n/div\n\n        \nhr class=\n/\n\n\n        \ndiv data-view_action\n\n            \ndiv data-field=\ndata\n data-self\n\n            \n/div\n\n        \n/div\n\n    \n/form\n\n\n/div\n\n\n\n\n\nViewView\n\n\nE' una view per visualizzare i risultati in modalit\u00e0 lettura.\n\n\nEsempio\n\n\ntemplate\n\n\ndiv class=\nwell model-view\n\n    \ndiv data-hidden_fields\n/div\n\n    \ndiv data-view_elements\n\n    \n/div\n\n    \ndiv data-view_action \n\n        \ndiv data-field=\ndata\n data-self\n\n\n        \n/div\n\n    \n/div\n\n\n/div", 
            "title": "Views"
        }, 
        {
            "location": "/views/#view", 
            "text": "La  View  estende la classe  Component  rappesenta il contenitore di dati html associate ad un \nmodello di dati. Questi dati possono essere passati manualmente o \nattraverso un server, utilizzando le route che usano le convenzioni REST.\nQuesto modello viene utilizzato per discriminare la route per il recupero dei dati.\nDa essa sono derivate le classi:   RecordView  per la gestione di dati provenienti da record di un modello  CollectionView  per la gestione di una collezione di record di un modello   La view accetta come parametro una configurazione.   Nella configurazione vengono definiti:   i campi da visualizzare, quali Render utilizzare per ogni dato  le azioni disponibili che si possono effettuare. In caso di view che gestisce una \n  collezione di records esistono due tipi di azioni  RecordAction  definite sul singolo record  CollectionAction  che agisce sulla collezione dei dati   Rappresenta la classe Principale", 
            "title": "View"
        }, 
        {
            "location": "/views/#proprieta", 
            "text": "modelName   default null  rappresenta il nome del modello dei dati gestito    dummyModel   default 'dummy'   Questo nome \u00e8 del modello dummy per view che contiene dati calcolati manualmente senza comunicazione con \nil server attraverso la route    renderObjs   default []  Array degli oggetti  Render  presenti nella view    data   default {}  Array associativo contente i dati della view    type   default null  Tipo di view,     jQe   default null  Oggetto jQuery che punta al container della view    defaultRenderType   default null    connectedObjs        : {},   keyId                : null,     // identificativo univoco della view creata e assegnata dall'oggetto App     app                 : null,      // oggetto app proprietario della view  viewTypeToRenderType  :          // mapping delle viste con i tipi default dei render   {\n    'list'      : BaseElement.VIEW,\n    'edit'      : BaseElement.EDIT,\n    'search'    : BaseElement.SEARCH,\n    'view'      : BaseElement.VIEW,\n    'calendar'  : BaseElement.VIEW,\n    'csv'       : BaseElement.EDIT\n}    resources  : [] - vettore delle risorse esterne da caricare prima di visualizzare la view    route  : null - oggetto route associata view    routeName  : null - nome della classe Route da agganciare ( vedere Route.factory per la convenzione sui nomi)     actions  : [] - vettore nome azioni da istanziare nella view", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/views/#metodi", 
            "text": "draw(callback)  metodo per la renderizzazione della view. callback e' la chiamata che\nviene effettuata alla fine se passata. La sequenza delle chiamate attraverso le callback:\nSe all'interno di questi metodi non viene chiamata la callback viene interrotto il flusso di chiamate.\nUtilizzare questa tecnica per interrompere la visualizzazione o il comportamento della view.   beforeLoadData(callback)  loadData(callback)  afterLoadData(callback)  _prepareContainer()  beforeRender(callback)  render(callback)  afterRender(callback)  beforeFinalize(callback)  _loadExternalResources(callback)  finalize(callback)  afterFinalize(callback)     beforeLoadData(callback)  - metodo viene chiamato prima che la view carichi i dati   loadData(callback)  - metodo chiamato per il caricamento dei dati attraverso la route  afterLoadData(callback)  - metodo chiamato dopo che i dati sono stati caricati  _prepareContainer()  - metodo dove viene iniettato l'html presente nel template  beforeRender(callback)  - metodo chiamato prima di chiamare utilizzabile per eventuali manipolazioni  render(callback)  - questo metodo \u00e8 utilizzato per disegnare la struttura html  afterRender(callback)  - chiamato dopo il render  beforeFinalize(callback)  _loadExternalResources(callback)  - chiamata per il caricamento delle risorse esterne  finalize(callback)  - metodo per la creazione e il disegno dei renders della view  afterFinalize(callback)  - metodo per agganciare eventuali eventi personali e modifiche custom  delete()  - metodo chiamato prima di cancellare la view per dare la possibilit\u00e0 alla view di \ncancellare eventuali oggetti creati   setRoute(route)  - metodo per settare l'oggetto route interno alla view  getRoute()  - ritorna la route istanziata della view  setId(id)  - setta l'identificativo della view  setData(data)  - setta i dati della dall'esterno  getFormData(data)  - ritorna i dati di una form html in un vettore associativo se esiste  getItemTemplate(key)  - Istanzia e ritorna il template associato all'oggetto Render associato alla\nkey  @param key : nome del campo di cui si vuole il template    _getRenderMode(key)  - (privata) restituisce la modalita' in cui verra' disegnato l'oggetto render \nin base alla configurazione dell'oggetto nell fields_config della view  key : nome del campo    _getRenderType(key)  - (privata) ritorna il type del render in base al type definito nella fields_config della view\no alla configurazione di default  key : nome del campo    _getDefaultRenderConfig(key)  - ritorna la configurazione di default dell'oggetto render  key : chiave dell'oggetto render    _getRenderConfig(key)  - ritorna la configurazione finale dell'oggetto render, eseguendo\nil merge tra la configuazione di default e quella passata alla view.", 
            "title": "Metodi"
        }, 
        {
            "location": "/views/#recordview", 
            "text": "La  RecordView  estende  View  \u00e8 pensata per tutte le viste che gestiscono un solo record del modello \ndi dati.", 
            "title": "RecordView"
        }, 
        {
            "location": "/views/#proprieta_1", 
            "text": "_pkName : 'id' - nome della chiave univoca del modello dati  _pkValue : null - valore della chiave univoca del modello dati  _actions : [] - vettore con tutte le azioni istanziati nella vista  actions : [] - vettore nomi delle azioni da istanziare nella vista  type : 'record' - tipo della vista in questo caso record  defaultItemTemplate : 'left' - Oggetto template di default che conterr\u00e0 gli oggetti Renders  data : vettore associativo dei dati dalla forma   data : {\n    value : {},     //vettore associativo key =  value dei modello dati\n    metadata : {},  //vettore associativo key =  {} metadati che descrivono key\n    validationRules : {}, // vettore associativo key =  {} regole di validazione lato javascript da applicare alla key    \n}", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/views/#metodi_1", 
            "text": "getRenderValue(fieldName)  :   getRender : function(fieldName)  resetForm()  : function () - esegue il clear di tutti i render della view  _callAction  : function (actionData) - (privata)  _setActions  : function () - (privata) instanzia tutte le azioni definite per riga e globali partendo\n                                             * dalla configurazione iniziale definita nella config\n                                             * far partire l'ascolto per tutti gli eventi che riguardano le proprie\n                                             * azioni  _createAction(key)     _setKeys : setta le keys attive per la view  _renderHidden(key)  : renderizza i render di tipo hidden perche' sono speciali  _renderObjectElement(key)  : renderizza l'oggetto render associato alla key che non sia hidden  _getGroup(key) : ritorna il gruppo associato al campo nel caso di view con template strutturato a gruppi  _renderElement(key)  : chiama _renderHidden o _renderObjectElement in base al type  _createRender(container,key)  : crea l'oggetto render e gli associa il container dove\nverr\u00e0 disegnato  _renderActions()  : renderizza le azioni istanziate nella view  _getFieldName(key)  : ritorna il fieldName costruito a partire dalla key a seconda del \ntipo di view che stiamo realizzando. Ci permette di mettere dei prefissi o suffissi a tutte le key\ndel modello dei dati dovuti ad esigenze dell'html tipo view annidate per creare delle form complese.", 
            "title": "Metodi"
        }, 
        {
            "location": "/views/#collectionview", 
            "text": "La  CollectionView  estend la  View  \u00e8 pensata per tutte le viste che gestiscono una lista record del modello \ndi dati.", 
            "title": "CollectionView"
        }, 
        {
            "location": "/views/#proprieta_2", 
            "text": "_recordActions  : [] - vettore azioni della vista per ogni singolo record,  _globalActions  : [] - vettore azioni sull'intera vista  _paginatorActions  : [] - vettore azioni per la paginazione  actionsLayout  : 'left' - tipo di layout per le azioni sui record, left o right  type  : 'list' - tipo di view, in questo caso list  defaultItemTemplate  : 'no' - classe del template da istanziare per ogni render  orderClass  - le classi da aggiungere all'header del campo ordinato.   orderClass : {\n  'asc': ['sorting_asc'],\n  'desc' : ['sorting_desc']\n}   data - dati del modello dati da visualizzare, vettore associativo della forma:   data : {\n    value : [],\n    metadata : {},\n    pagination : {},\n    resultParams : {},\n    summary : {},\n    validationRules : {},\n    backParams : {},\n    has_errors : false,\n    list_header : ''\n}", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/views/#metodi_2", 
            "text": "setOrder(field)  - permette di ordinare una view rispetto ad un campo  _setKeys()  - (privata) setta i render da renderizzare nella vista  _renderHeaderValues(jQrow)  - (privata) setta l'intestazione delle colonne della vista  _renderHeaderActions(jQrow)  - (privata) renderizza l'header della colonna action  _renderHeader()  - (privata) - renderizza l'header  _renderFooter()  - (privata) - renderizza il footer  _attachEvents(index)  -   _attachDetailEvents()  -  getChecked()  - ritorna il vettore di tutte le pk delle rows selezionate.  _renderGlobalActions()  - renderizzare le azioni globali alla vista  _renderInfoHeader()  - renderizza un eventuale header di info della lista. L'html viene preso da\ndata.list_header  render(callback)  - renderizza la view  _renderRow(index)  - (privata) renderizza la singola riga  finalize(callback)  - finalizza la view e aggancia gli eventi  _setActions()  - (privata) instanzia tutte le azioni definite per riga e globali partendo\ndalla configurazione iniziale definita nella config. Far partire l'ascolto per tutti gli eventi \nche riguardano le proprie azioni  _setVisibleKeys()    _renderZeroResult()     _renderPagination()    _createRender(r,key,container)    _createGrid()    _createAction(row,key)  - crea un azione se row e' null setta come modelData \ndell'azione tutti i dati altrimenti il dati della row indicata.  @param row : row a cui si riferisce null in caso di azione globale  @param key : nome dell'azione  @returns {*} : ritorna l'azione creata    _renderSingleActions()     _hasNeedSelectionAction()  - controlla che la lista abbia almeno un'azione che ha bisogno di selezionare elementi  _hasRecordActions()   - controlla se la view abbia almeno una azione che lavora sul singolo record della lista", 
            "title": "Metodi"
        }, 
        {
            "location": "/views/#views-implementate", 
            "text": "Nella libreria sono state implementate delle views di uso comune", 
            "title": "Views Implementate"
        }, 
        {
            "location": "/views/#viewlist", 
            "text": "E' una collection view che renderizza i risultati su un template tabellare,\nviene popolata attraverso la  RouteList  che prevede come parametro il modelName, questa view \u00e8 composta dal\ntemplate principale piu' altri template delle varie sezioni di una lista. Questo permette di poter configurare\nle singole parti in modo pi\u00f9 puntuale.   Esempio  Esempio con dati custom", 
            "title": "ViewList"
        }, 
        {
            "location": "/views/#marcatori", 
            "text": "", 
            "title": "marcatori"
        }, 
        {
            "location": "/views/#template", 
            "text": "div class= panel panel-default panel-body model-list \n         div data-list_header /div \n         div data-hidden_fields /div \n         div class= clearfix \n             div class= col col-md-5 col-xs-12 hidden-xs list-actions  data-view_collection_actions /div \n             div class= col col-md-7 col-xs-12 list-pagination  data-view_pagination /div \n         /div \n         hr/ \n         div class= table-responsive \n\n             table class= table table-striped table-condensed table-hover table-bordered table-vertical-middle nomargin \n                 thead \n                     tr data-view_row_headers \n\n                     /tr \n                 /thead \n                 tbody \n                     tr data-view_row_elements \n\n                     /tr \n                 /tbody \n                 tfoot \n                     tr data-view_row_footer td /td /tr \n                 /tfoot \n             /table \n         /div \n         hr/ \n         div class= clearfix \n             div class= col col-md-5 col-xs-12 list-actions  data-view_collection_actions /div \n             div class= col col-md-7 col-xs-12 list-pagination  data-view_pagination /div \n         /div \n     /div", 
            "title": "template"
        }, 
        {
            "location": "/views/#recordactiontemplate", 
            "text": "div class= btn-group  role= group /div", 
            "title": "recordActionTemplate"
        }, 
        {
            "location": "/views/#headertemplate", 
            "text": "th \n         span data-element /span \n     /th", 
            "title": "headerTemplate"
        }, 
        {
            "location": "/views/#ordertemplate", 
            "text": "th class= sorting \n     a href= javascript:void(0)  data-action= actionOrder  data-pk= \n         span data-element /span \n     /a  /th", 
            "title": "orderTemplate"
        }, 
        {
            "location": "/views/#celltemplate", 
            "text": "td  \n\n     /td", 
            "title": "cellTemplate"
        }, 
        {
            "location": "/views/#checkalltemplate", 
            "text": "input type= checkbox  data-button= checkAll  title= Seleziona tutti", 
            "title": "checkAllTemplate"
        }, 
        {
            "location": "/views/#checktemplate", 
            "text": "span class= pull-left   input data-pk=  type= checkbox  name= check_row nbsp; /span", 
            "title": "checkTemplate"
        }, 
        {
            "location": "/views/#paginatortemplate", 
            "text": "ul class= list-inline hidden-md hidden-sm hidden-xs \n     li data-action_first_page a data-first_page href= javascript:void(0) laquo; /a /li \n     li data-action_prev_page a data-prev_page href= javascript:void(0) lt; /a /li \n     li \n     span style= padding:2px   \n         span data-keytranslate= general-pagination_total   Tot /span \n         b span data-field= total /span /b ,\n     nbsp; nbsp;\n         span data-action_per_page /span \n         !-- select data-action_per_page data-field= per_page  data-source= pagination_steps  self style= height:24px  class= pagination-input  data-action= actionPerPage --  !---- \n         !-- /select -- \n         span data-keytranslate= general-pagination_per_page   Per pagina /span \n     /span \n     /li \n     li a class= disabled  href= javascript:void(0)  data-page_info=   span data-field= current_page /span  /  span data-field= last_page /span   /a /li \n     li data-action_next_page  a data-next_page href= javascript:void(0) gt; /a /li \n     li data-action_last_page a data-last_page href= javascript:void(0) raquo; /a /li  /ul  ul class= pagination pagination-sm hidden-lg hidden-xl \n     li data-action_first_page a data-action= ActionFirstPage  href= javascript:void(0) laquo; /a /li \n     li data-action_prev_page a data-action= ActionPrevPage  href= javascript:void(0) lt; /a /li \n     li a class= disabled  href= javascript:void(0)  data-page_info=    span data-field= current_page /span  /  span data-field= last_page /span  ( span data-field= total /span ) /a /li \n     li data-action_next_page a data-action= ActionNextPage  href= javascript:void(0) gt; /a /li \n     li data-action_last_page a data-action= ActionLastPage  href= javascript:void(0) raquo; /a /li  /ul", 
            "title": "paginatorTemplate"
        }, 
        {
            "location": "/views/#viewinsert", 
            "text": "E' una view per la creazione di un nuovo record. Utilizza la route RouteInsert per il \ncaricamento dei dati e la RouteSave per il salvataggio  Esempio", 
            "title": "ViewInsert"
        }, 
        {
            "location": "/views/#template_1", 
            "text": "div class= well  data-edit-main \n     div data-alert class= alert alert-success hide /div \n     form name= data_form  class= model-edit \n         div data-hidden_fields /div \n         div data-view_elements \n\n         /div \n         div data-view_action  \n             div data-field= data  data-self \n\n             /div \n         /div \n     /form  /div", 
            "title": "template"
        }, 
        {
            "location": "/views/#viewedit", 
            "text": "E' una view per la modifica di un record. Utilizza la route RouteEdit per il caricamento\ne la RouteUpdate per il salvataggio  Esempio", 
            "title": "ViewEdit"
        }, 
        {
            "location": "/views/#template_2", 
            "text": "div class= well  data-edit-main \n     div data-alert class= alert alert-success hide /div \n     form name= data_form  class= model-edit \n         div data-hidden_fields /div \n         div data-view_elements \n\n         /div \n         div data-view_action  \n             div data-field= data  data-self \n\n             /div \n         /div \n     /form  /div", 
            "title": "template"
        }, 
        {
            "location": "/views/#viewsearch", 
            "text": "E' una view per effettuare una ricerca.  Esempio", 
            "title": "ViewSearch"
        }, 
        {
            "location": "/views/#template_3", 
            "text": "div class= well search-well \n     form name= data_form  class= model-search \n         div data-hidden_fields /div \n         div class= search-row  data-view_elements \n         /div \n\n         div class= clearfix /div \n         hr class= / \n\n         div data-view_action \n             div data-field= data  data-self \n             /div \n         /div \n     /form  /div", 
            "title": "template"
        }, 
        {
            "location": "/views/#viewview", 
            "text": "E' una view per visualizzare i risultati in modalit\u00e0 lettura.  Esempio", 
            "title": "ViewView"
        }, 
        {
            "location": "/views/#template_4", 
            "text": "div class= well model-view \n     div data-hidden_fields /div \n     div data-view_elements \n     /div \n     div data-view_action  \n         div data-field= data  data-self \n\n         /div \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/dashboards/", 
            "text": "Le dashboards sono composizioni di views. In questo componente si inserisce tutta la logica \ndi interazioni tra le views che contiene e le loro dipendendenze.\n\n\nDashboard\n\n\nDashboard\n \u00e8 la classe principale da cui ereditano tutte le dashboard che andremo\na creare. Estende la class \nComponent\n\n\nPropriet\u00e0\n\n\n\n\ncontainer\n       : null - rappresenta il container di destinazione dove disegnare le views\n\n\nclassName\n       : 'Dashboard' - serve per poter definire a runtime la classe in cui ci si trova\n\n\nmodelName\n       : null - il modello dei dati che vogliamo gestire,\n\n\nviewKeys\n        : [] - array delle key associate ad ogni view\n\n\nlabelContext\n    : null - contesto nel reperimento delle traduzioni delle label\n\n\n\n\nDashboards implementate.\n\n\nLa libreria mette a disposizione alcune dashboard di uso comune, possono essere \nridefinite per le proprie esigenze oppure se ne possono creare delle nuove.\n\n\nDashboardList\n\n\nLa DashboardList \u00e8 formata da una \nViewSearch\n collegata ad una \nViewList\n contornata\nda semplice html. In questo modo si \u00e8 creata una dashboard che permette la lista\ne la ricerca degli elementi della lista e paginazione. \n\n\nEsempio\n\n\nPropriet\u00e0\n\n\n\n\nsearchKey\n : chiave che identifica la view che gestisce la search\n\n\nlistKey\n : chiave che identifica la view che gestisce la lista\n\n\n\n\nmarcatori\n\n\n\n\ndata-view_search\n : contentitore dove verr\u00e0 disegnata la view associata alla search\n\n\ndata-view_list\n: contenitore dove verr\u00e0 disegnata la view associata alla lista\n\n\n\n\ntemplate\n\n\ndiv id=\ntabContent\n\n    \ndiv class=\ncollapse in\n data-collapse_list\n\n        \nheader id=\npage-header\n\n            \ndiv class=\npanel panel-default\n\n                \ndiv class=\npanel-heading\n\n                      \nspan class=\ntitle elipsis\n \n                        \nstrong data-label=\nmodelMetadata.singular\n/strong\n\n                      \n/span\n\n                \n/div\n\n            \n/div\n\n        \n/header\n\n\n        \ndiv class=\npadding-15\n\n            \ndiv data-view_search\n/div\n\n            \ndiv data-view_list\n/div\n\n        \n/div\n\n    \n/div\n\n\n/div\n\n\n\n\n\nPer instanziare una DashboardList basta scrivere il seguente codice:\n\n\nvar dash = new DashboardList({\n    modelName : 'test',\n    container : '#test_container1',\n});\ndash.draw();\n\n\n\n\n\n\nmodelName\n rappresenta il modello dei dati che vogliamo gestire nella view che viene utlizzato\ndalle routes delle due view per reperire i dati con cui popolare le viste.\n\n\ncontainer\n rappresenta il selettore html dove renderizzare i dati.\n\n\n\n\nDashboardEdit\n\n\nLa DashboardEdit \u00e8 formata da un solo componente, una ViewEdit all'interno contornata\nda semplice html. \n\n\nEsempio\n\n\nPropriet\u00e0\n\n\n- editKey : chiave che identifica la view che gestisce l'edit\n\n\n\nmarcatori\n\n\n\n\ndata-view_edit : contentitore dove verr\u00e0 disegnata la view associata all'edit\n\n\n\n\ntemplate\n\n\ndiv\n\n    \ndiv class=\npanel panel-default\n\n        \ndiv class=\npanel-heading\n\n              \nspan class=\ntitle elipsis\n \n                \nstrong data-label=\nmodelMetadata.singular\n/strong\n\n              \n/span\n\n        \n/div\n\n    \n/div\n\n    \ndiv data-view_edit \n\n\n    \n/div\n\n\n/div\n\n\n\n\n\nPer instanziarla basta scrivere il seguente codice:\n\n\nvar dash = new DashboardEdit({\n    modelName : 'test',\n    pk : 1,\n    container : '#test_container1',\n});\ndash.draw();\n\n\n\n\n\n\nmodelName\n rappresenta il modello dei dati che vogliamo gestire nella view che viene utlizzato\ndalla route della view per reperire i dati con cui popolare la vista.\n\n\ncontainer\n rappresenta il selettore html dove renderizzare i dati.\n\n\npk\n : chiave del record da caricare\n\n\n\n\nDashboardInsert\n\n\nLa DashboardInsert \u00e8 formata da un solo componente, una ViewInsert all'interno contornata\nda semplice html. \n\n\nEsempio\n\n\n\n\nPropriet\u00e0\n\n\ninsertKey : chiave che identifica la view che gestisce l'insert\n\n\n\n\n\n\n\n\nmarcatori\n\n\n\n\ndata-view_insert : contentitore dove verr\u00e0 disegnata la view associata all'insert\n\n\n\n\ntemplate\n\n\ndiv\n\n    \ndiv class=\npanel panel-default\n\n        \ndiv class=\npanel-heading\n\n              \nspan class=\ntitle elipsis\n \n                \nstrong data-label=\nmodelMetadata.singular\n/strong\n\n              \n/span\n\n        \n/div\n\n    \n/div\n           \n    \ndiv data-view_insert\n\n\n    \n/div\n\n\n/div\n\n\n\n\n\nPer instanziarla basta scrivere il seguente codice:\n\n\nvar dash = new DashboardInsert({\n    modelName : 'test',\n    container : '#test_container1',\n});\ndash.draw();\n\n\n\n\n\n\nmodelName\n rappresenta il modello dei dati che vogliamo gestire nella view che viene utlizzato\ndalla route della view per reperire i dati con cui popolare la vista.\n\n\ncontainer\n rappresenta il selettore html dove renderizzare i dati.\n\n\n\n\nDashboardTab\n\n\nLa DashboardTab \u00e8 formata da 5 viste che interagiscono tra di loro:\n\n\n\n\nuna \nViewSearch\n che permette di ricercare gli elementi della \nViewList\n. \n\n\nuna \nViewList\n: Visualizza i risultati e contiene delle azioni cliccabili su ogni \nrecord. Le azioni sono delete,edit,view,create.\n\n\nuna \nViewEdit\n: Viene mostrata quando viene premuto il tasto modifica nella ViewList\ne permette la modifica del record\n\n\nuna \nViewInsert\n: Viene mostrata quando viene premuto il tasto nuovo e permette la\ncreazione di un nuovo record\n\n\nuna \nViewView\n:Viene mostrata in una modal quando viene cliccato l'azione vista.\n\n\n\n\nEsempio\n\n\nPropriet\u00e0\n\n\n- insertKey : chiave che identifica la view che gestisce l'insert\n- editKey : chiave che identifica la view che gestisce l'edit\n- searchKey : chiave che identifica la view che gestisce la search\n- listKey : chiave che identifica la view che gestisce la lista\n\n\n\nMetodi\n\n\n- showEdit : metodo per la visualizzazione di edit\n- showInsert : \n- showList\n- showDialog\n\n\n\nmarcatori\n\n\n\n\ndata-view_search\n : contentitore dove verr\u00e0 disegnata la view associata alla search\n\n\ndata-view_list\n : contentitore dove verr\u00e0 disegnata la view associata alla lista\n\n\ndata-view_insert\n : contentitore dove verr\u00e0 disegnata la view associata all'insert\n\n\ndata-view_edit\n : contentitore dove verr\u00e0 disegnata la view associata all'edit\n\n\ndata-view_view\n : contentitore dove verr\u00e0 disegnata la view associata alla vista\n\n\n\n\ntemplate\n\n\ndiv class=\ntab-content\n \n    \nheader\n\n        \ndiv class=\npanel panel-default\n\n            \ndiv class=\npanel-heading\n\n                  \nspan class=\ntitle elipsis\n\n                        \nstrong data-label=\nmodelMetadata.singular\n/strong\n\n                  \n/span\n\n            \n/div\n\n        \n/div\n\n    \n/header\n\n    \ndiv class=\ncollapse in\n data-collapse_list\n\n        \ndiv class=\npadding-15\n\n            \ndiv data-view_search\n\n            \n/div\n\n            \ndiv data-view_list\n\n            \n/div\n\n        \n/div\n\n    \n/div\n\n\n    \ndiv class=\ncollapse\n data-collapse_edit\n\n        \ndiv class=\npadding-15\n\n            \ndiv data-view_edit\n/div\n\n            \ndiv data-view_insert\n/div\n\n        \n/div\n\n    \n/div\n\n\n    \ndiv data-view_dialog class=\nmodal fade\n\n        \ndiv class=\nmodal-dialog\n\n            \ndiv class=\nmodal-content\n\n                \ndiv class=\nmodal-header\n\n                    \nbutton type=\nbutton\n class=\nclose\n data-dismiss=\nmodal\n\n                            aria-hidden=\ntrue\ntimes;\n/button\n\n                    \nh4 class=\nmodal-title\n data-label=\nmodelMetadata.singular\n \n/h4\n\n                \n/div\n \n                \ndiv class=\nmodal-body\n\n                    \ndiv data-view_view\n/div\n\n                \n/div\n\n                \ndiv class=\nmodal-footer\n\n                    \nbutton data-button=\ncancel\n type=\nbutton\n class=\nbtn btn-primary \n\n                          data-dismiss=\nmodal\nAnnulla\n                    \n/button\n\n                    \nbutton data-button=\nok\n type=\nbutton\n class=\nbtn btn-primary\n\n                            data-dismiss=\nmodal\nOk\n                    \n/button\n\n                \n/div\n\n            \n/div\n\n            \n!-- /.modal-content --\n\n        \n/div\n\n        \n!-- /.modal-dialog --\n\n    \n/div\n\n\n/div\n\n\n\n\n\nDashboard2Col\n\n\nLa Dashboard2Col \u00e8 come la DashboardTab ma organizzata su 2 colonne. La ViewView\nnon viene mostrata in modal\nAnche questa dashboar contiene 5 viste :\n\n\n\n\nuna \nViewSearch\n che permette di ricercare gli elementi della \nViewList\n. \n\n\nuna \nViewList\n: Visualizza i risultati e contiene delle azioni cliccabili su ogni \nrecord. Le azioni sono delete,edit,view,create.\n\n\nuna \nViewEdit\n: Viene mostrata quando viene premuto il tasto modifica nella ViewList\ne permette la modifica del record\n\n\nuna \nViewInsert\n: Viene mostrata quando viene premuto il tasto nuovo e permette la\ncreazione di un nuovo record\n\n\nuna \nViewView\n:Viene mostrata quando viene cliccato l'azione vista.\n\n\n\n\nEsempio\n\n\nPropriet\u00e0\n\n\n- insertKey : chiave che identifica la view che gestisce l'insert\n- editKey : chiave che identifica la view che gestisce l'edit\n- searchKey : chiave che identifica la view che gestisce la search\n- listKey : chiave che identifica la view che gestisce la lista\n\n\n\nMetodi\n\n\n- showEdit : metodo per la visualizzazione di edit\n- showInsert : \n- showList\n- showDialog\n\n\n\nmarcatori\n\n\n\n\ndata-view_search\n : contentitore dove verr\u00e0 disegnata la view associata alla search\n\n\ndata-view_list\n : contentitore dove verr\u00e0 disegnata la view associata alla lista\n\n\ndata-view_insert\n : contentitore dove verr\u00e0 disegnata la view associata all'insert\n\n\ndata-view_edit\n : contentitore dove verr\u00e0 disegnata la view associata all'edit\n\n\ndata-view_view\n : contentitore dove verr\u00e0 disegnata la view associata alla vista\n\n\n\n\ntemplate\n\n\ndiv class=\ntab-content\n \n    \nheader \n\n        \ndiv class=\npanel panel-default\n\n            \ndiv class=\npanel-heading\n\n                  \nspan class=\ntitle elipsis\n\n                        \nstrong data-label=\nmodelMetada.singular\n/strong\n\n                  \n/span\n\n            \n/div\n\n        \n/div\n\n    \n/header\n\n    \ndiv\n\n        \ndiv class=\ncol col-xs-6\n\n            \ndiv data-view_search \n/div\n\n            \ndiv data-view_list\n/div\n\n        \n/div\n\n        \ndiv class=\ncol col-xs-6\n\n            \ndiv data-view_container=\nedit\n\n                \nh4 data-edit_title\n/h4\n\n                \ndiv data-view_edit\n\n\n                \n/div\n\n            \n/div\n\n            \ndiv data-view_container=\ninsert\n\n                \nh4 data-insert_title\n/h4\n\n                \ndiv data-view_insert \n/div\n\n            \n/div\n\n            \ndiv data-view_container=\nview\n\n                \nh4 data-view_title\n/h4\n\n                \ndiv data-view_view\n/div\n\n            \n/div\n\n        \n/div\n\n    \n/div\n\n\n/div", 
            "title": "Dashboards"
        }, 
        {
            "location": "/dashboards/#dashboard", 
            "text": "Dashboard  \u00e8 la classe principale da cui ereditano tutte le dashboard che andremo\na creare. Estende la class  Component", 
            "title": "Dashboard"
        }, 
        {
            "location": "/dashboards/#proprieta", 
            "text": "container        : null - rappresenta il container di destinazione dove disegnare le views  className        : 'Dashboard' - serve per poter definire a runtime la classe in cui ci si trova  modelName        : null - il modello dei dati che vogliamo gestire,  viewKeys         : [] - array delle key associate ad ogni view  labelContext     : null - contesto nel reperimento delle traduzioni delle label", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/dashboards/#dashboards-implementate", 
            "text": "La libreria mette a disposizione alcune dashboard di uso comune, possono essere \nridefinite per le proprie esigenze oppure se ne possono creare delle nuove.", 
            "title": "Dashboards implementate."
        }, 
        {
            "location": "/dashboards/#dashboardlist", 
            "text": "La DashboardList \u00e8 formata da una  ViewSearch  collegata ad una  ViewList  contornata\nda semplice html. In questo modo si \u00e8 creata una dashboard che permette la lista\ne la ricerca degli elementi della lista e paginazione.   Esempio", 
            "title": "DashboardList"
        }, 
        {
            "location": "/dashboards/#proprieta_1", 
            "text": "searchKey  : chiave che identifica la view che gestisce la search  listKey  : chiave che identifica la view che gestisce la lista", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/dashboards/#marcatori", 
            "text": "data-view_search  : contentitore dove verr\u00e0 disegnata la view associata alla search  data-view_list : contenitore dove verr\u00e0 disegnata la view associata alla lista", 
            "title": "marcatori"
        }, 
        {
            "location": "/dashboards/#template", 
            "text": "div id= tabContent \n     div class= collapse in  data-collapse_list \n         header id= page-header \n             div class= panel panel-default \n                 div class= panel-heading \n                       span class= title elipsis  \n                         strong data-label= modelMetadata.singular /strong \n                       /span \n                 /div \n             /div \n         /header \n\n         div class= padding-15 \n             div data-view_search /div \n             div data-view_list /div \n         /div \n     /div  /div   Per instanziare una DashboardList basta scrivere il seguente codice:  var dash = new DashboardList({\n    modelName : 'test',\n    container : '#test_container1',\n});\ndash.draw();   modelName  rappresenta il modello dei dati che vogliamo gestire nella view che viene utlizzato\ndalle routes delle due view per reperire i dati con cui popolare le viste.  container  rappresenta il selettore html dove renderizzare i dati.", 
            "title": "template"
        }, 
        {
            "location": "/dashboards/#dashboardedit", 
            "text": "La DashboardEdit \u00e8 formata da un solo componente, una ViewEdit all'interno contornata\nda semplice html.   Esempio", 
            "title": "DashboardEdit"
        }, 
        {
            "location": "/dashboards/#proprieta_2", 
            "text": "- editKey : chiave che identifica la view che gestisce l'edit", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/dashboards/#marcatori_1", 
            "text": "data-view_edit : contentitore dove verr\u00e0 disegnata la view associata all'edit", 
            "title": "marcatori"
        }, 
        {
            "location": "/dashboards/#template_1", 
            "text": "div \n     div class= panel panel-default \n         div class= panel-heading \n               span class= title elipsis  \n                 strong data-label= modelMetadata.singular /strong \n               /span \n         /div \n     /div \n     div data-view_edit  \n\n     /div  /div   Per instanziarla basta scrivere il seguente codice:  var dash = new DashboardEdit({\n    modelName : 'test',\n    pk : 1,\n    container : '#test_container1',\n});\ndash.draw();   modelName  rappresenta il modello dei dati che vogliamo gestire nella view che viene utlizzato\ndalla route della view per reperire i dati con cui popolare la vista.  container  rappresenta il selettore html dove renderizzare i dati.  pk  : chiave del record da caricare", 
            "title": "template"
        }, 
        {
            "location": "/dashboards/#dashboardinsert", 
            "text": "La DashboardInsert \u00e8 formata da un solo componente, una ViewInsert all'interno contornata\nda semplice html.   Esempio   Propriet\u00e0  insertKey : chiave che identifica la view che gestisce l'insert", 
            "title": "DashboardInsert"
        }, 
        {
            "location": "/dashboards/#marcatori_2", 
            "text": "data-view_insert : contentitore dove verr\u00e0 disegnata la view associata all'insert", 
            "title": "marcatori"
        }, 
        {
            "location": "/dashboards/#template_2", 
            "text": "div \n     div class= panel panel-default \n         div class= panel-heading \n               span class= title elipsis  \n                 strong data-label= modelMetadata.singular /strong \n               /span \n         /div \n     /div            \n     div data-view_insert \n\n     /div  /div   Per instanziarla basta scrivere il seguente codice:  var dash = new DashboardInsert({\n    modelName : 'test',\n    container : '#test_container1',\n});\ndash.draw();   modelName  rappresenta il modello dei dati che vogliamo gestire nella view che viene utlizzato\ndalla route della view per reperire i dati con cui popolare la vista.  container  rappresenta il selettore html dove renderizzare i dati.", 
            "title": "template"
        }, 
        {
            "location": "/dashboards/#dashboardtab", 
            "text": "La DashboardTab \u00e8 formata da 5 viste che interagiscono tra di loro:   una  ViewSearch  che permette di ricercare gli elementi della  ViewList .   una  ViewList : Visualizza i risultati e contiene delle azioni cliccabili su ogni \nrecord. Le azioni sono delete,edit,view,create.  una  ViewEdit : Viene mostrata quando viene premuto il tasto modifica nella ViewList\ne permette la modifica del record  una  ViewInsert : Viene mostrata quando viene premuto il tasto nuovo e permette la\ncreazione di un nuovo record  una  ViewView :Viene mostrata in una modal quando viene cliccato l'azione vista.   Esempio", 
            "title": "DashboardTab"
        }, 
        {
            "location": "/dashboards/#proprieta_3", 
            "text": "- insertKey : chiave che identifica la view che gestisce l'insert\n- editKey : chiave che identifica la view che gestisce l'edit\n- searchKey : chiave che identifica la view che gestisce la search\n- listKey : chiave che identifica la view che gestisce la lista", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/dashboards/#metodi", 
            "text": "- showEdit : metodo per la visualizzazione di edit\n- showInsert : \n- showList\n- showDialog", 
            "title": "Metodi"
        }, 
        {
            "location": "/dashboards/#marcatori_3", 
            "text": "data-view_search  : contentitore dove verr\u00e0 disegnata la view associata alla search  data-view_list  : contentitore dove verr\u00e0 disegnata la view associata alla lista  data-view_insert  : contentitore dove verr\u00e0 disegnata la view associata all'insert  data-view_edit  : contentitore dove verr\u00e0 disegnata la view associata all'edit  data-view_view  : contentitore dove verr\u00e0 disegnata la view associata alla vista", 
            "title": "marcatori"
        }, 
        {
            "location": "/dashboards/#template_3", 
            "text": "div class= tab-content  \n     header \n         div class= panel panel-default \n             div class= panel-heading \n                   span class= title elipsis \n                         strong data-label= modelMetadata.singular /strong \n                   /span \n             /div \n         /div \n     /header \n     div class= collapse in  data-collapse_list \n         div class= padding-15 \n             div data-view_search \n             /div \n             div data-view_list \n             /div \n         /div \n     /div \n\n     div class= collapse  data-collapse_edit \n         div class= padding-15 \n             div data-view_edit /div \n             div data-view_insert /div \n         /div \n     /div \n\n     div data-view_dialog class= modal fade \n         div class= modal-dialog \n             div class= modal-content \n                 div class= modal-header \n                     button type= button  class= close  data-dismiss= modal \n                            aria-hidden= true times; /button \n                     h4 class= modal-title  data-label= modelMetadata.singular   /h4 \n                 /div  \n                 div class= modal-body \n                     div data-view_view /div \n                 /div \n                 div class= modal-footer \n                     button data-button= cancel  type= button  class= btn btn-primary  \n                          data-dismiss= modal Annulla\n                     /button \n                     button data-button= ok  type= button  class= btn btn-primary \n                            data-dismiss= modal Ok\n                     /button \n                 /div \n             /div \n             !-- /.modal-content -- \n         /div \n         !-- /.modal-dialog -- \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/dashboards/#dashboard2col", 
            "text": "La Dashboard2Col \u00e8 come la DashboardTab ma organizzata su 2 colonne. La ViewView\nnon viene mostrata in modal\nAnche questa dashboar contiene 5 viste :   una  ViewSearch  che permette di ricercare gli elementi della  ViewList .   una  ViewList : Visualizza i risultati e contiene delle azioni cliccabili su ogni \nrecord. Le azioni sono delete,edit,view,create.  una  ViewEdit : Viene mostrata quando viene premuto il tasto modifica nella ViewList\ne permette la modifica del record  una  ViewInsert : Viene mostrata quando viene premuto il tasto nuovo e permette la\ncreazione di un nuovo record  una  ViewView :Viene mostrata quando viene cliccato l'azione vista.   Esempio", 
            "title": "Dashboard2Col"
        }, 
        {
            "location": "/dashboards/#proprieta_4", 
            "text": "- insertKey : chiave che identifica la view che gestisce l'insert\n- editKey : chiave che identifica la view che gestisce l'edit\n- searchKey : chiave che identifica la view che gestisce la search\n- listKey : chiave che identifica la view che gestisce la lista", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/dashboards/#metodi_1", 
            "text": "- showEdit : metodo per la visualizzazione di edit\n- showInsert : \n- showList\n- showDialog", 
            "title": "Metodi"
        }, 
        {
            "location": "/dashboards/#marcatori_4", 
            "text": "data-view_search  : contentitore dove verr\u00e0 disegnata la view associata alla search  data-view_list  : contentitore dove verr\u00e0 disegnata la view associata alla lista  data-view_insert  : contentitore dove verr\u00e0 disegnata la view associata all'insert  data-view_edit  : contentitore dove verr\u00e0 disegnata la view associata all'edit  data-view_view  : contentitore dove verr\u00e0 disegnata la view associata alla vista", 
            "title": "marcatori"
        }, 
        {
            "location": "/dashboards/#template_4", 
            "text": "div class= tab-content  \n     header  \n         div class= panel panel-default \n             div class= panel-heading \n                   span class= title elipsis \n                         strong data-label= modelMetada.singular /strong \n                   /span \n             /div \n         /div \n     /header \n     div \n         div class= col col-xs-6 \n             div data-view_search  /div \n             div data-view_list /div \n         /div \n         div class= col col-xs-6 \n             div data-view_container= edit \n                 h4 data-edit_title /h4 \n                 div data-view_edit \n\n                 /div \n             /div \n             div data-view_container= insert \n                 h4 data-insert_title /h4 \n                 div data-view_insert  /div \n             /div \n             div data-view_container= view \n                 h4 data-view_title /h4 \n                 div data-view_view /div \n             /div \n         /div \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/templates/", 
            "text": "Template\n\n\nClasse che estende \nComponent\n e incapsula il template per la visualizzazione di un render,\nall'interno di una vista. Questo ci permette di avere strutture per ogni singolo render all'interno\ndi una vista. In questo modo possiamo coprire tutte le esigenze di layout della nostra applicazione.\n\n\nMetodi\n\n\n\n\nhtml()\n : ritorna l'html del template \n\n\n\n\nTemplate.factory\n: metodo statico per creare un template a partire nome\ne attrs secondo la convenzione sui nomi \n\n\nTemplate.getRenderContainer\n : ritorna l'elemento dom destinato\na contenere il render\n\n\nTemplate Implementati\n\n\nLa libreria mette a disposizione dei template standard usati dalle view di default. Questi possono \nessere sovrascritti o inventati di nuovi\n\n\nTemplateLeft\n\n\nUtilizzato soprattuto dalle views edit,insert,view\n\n\nMetodi\n\n\n\n\ntemplate()\n\n\n\n\ndiv class=\nview-field clearfix\n\n    \ndiv class=\ncol col-sm-12 view-msg\n data-label=\nmsg\n\n\n    \n/div\n\n    \ndiv class=\ncol col-sm-4\n\n        \ndiv class=\ncol col-sm-10\n\n\n            \nlabel data-html_label data-label=\nlabel\n/label\n\n\n        \n/div\n\n    \n/div\n\n\n\n    \ndiv class=\ncol col-sm-8\n data-render\n\n\n    \n/div\n\n    \ndiv class=\ncol col-sm-12\n\n        \nsmall data-label=\naddedLabel\n class=\nview-addedLabel\n/small\n\n    \n/div\n\n    \ndiv class=\ncol col-sm-12 view-field-error text-danger\n data-label=\nerror\n\n\n    \n/div\n\n\n/div\n\n\n\n\n\nTemplateTop\n\n\nUtilizzato soprattutto dalle views edit,insert,view per i controlli\nche hanno bisogno di spazio\n\n\nMetodi\n\n\ntemplate\n\n\ndiv class=\nview-field clearfix\n\n    \ndiv class=\ncol col-sm-12\n\n        \nlabel data-label=\nlabel\n\n\n        \n/label\n\n    \n/div\n\n    \ndiv class=\ncol col-sm-12 view-msg\n data-label=\nmsg\n\n\n    \n/div\n\n    \ndiv class=\ncol col-sm-12\n data-render\n\n\n    \n/div\n\n    \ndiv class=\ncol col-sm-12 view-field-error\n data-label=\nerror\n\n\n    \n/div\n\n\n/div\n\n\n\n\n\nTemplateNo\n\n\nnessun template solo un div  utilizzato soprattutto dalla viewlist\n\n\nMetodi \n\n\n\n\ntemplate() \n\n\n\n\ndiv class=\ncol col-xs-12\n data-render\n\n\n/div\n\n\n\n\n\nTemplateSimple\n\n\nnessun template solo un div utilizzato soprattutto dalla viewlist\nMetodi \n\n\n\n\ntemplate() \n\n\n\n\ndiv data-render\n\n\n/div", 
            "title": "Templates"
        }, 
        {
            "location": "/templates/#template", 
            "text": "Classe che estende  Component  e incapsula il template per la visualizzazione di un render,\nall'interno di una vista. Questo ci permette di avere strutture per ogni singolo render all'interno\ndi una vista. In questo modo possiamo coprire tutte le esigenze di layout della nostra applicazione.", 
            "title": "Template"
        }, 
        {
            "location": "/templates/#metodi", 
            "text": "html()  : ritorna l'html del template    Template.factory : metodo statico per creare un template a partire nome\ne attrs secondo la convenzione sui nomi   Template.getRenderContainer  : ritorna l'elemento dom destinato\na contenere il render", 
            "title": "Metodi"
        }, 
        {
            "location": "/templates/#template-implementati", 
            "text": "La libreria mette a disposizione dei template standard usati dalle view di default. Questi possono \nessere sovrascritti o inventati di nuovi", 
            "title": "Template Implementati"
        }, 
        {
            "location": "/templates/#templateleft", 
            "text": "Utilizzato soprattuto dalle views edit,insert,view", 
            "title": "TemplateLeft"
        }, 
        {
            "location": "/templates/#metodi_1", 
            "text": "template()   div class= view-field clearfix \n     div class= col col-sm-12 view-msg  data-label= msg \n\n     /div \n     div class= col col-sm-4 \n         div class= col col-sm-10 \n\n             label data-html_label data-label= label /label \n\n         /div \n     /div \n\n\n     div class= col col-sm-8  data-render \n\n     /div \n     div class= col col-sm-12 \n         small data-label= addedLabel  class= view-addedLabel /small \n     /div \n     div class= col col-sm-12 view-field-error text-danger  data-label= error \n\n     /div  /div", 
            "title": "Metodi"
        }, 
        {
            "location": "/templates/#templatetop", 
            "text": "Utilizzato soprattutto dalle views edit,insert,view per i controlli\nche hanno bisogno di spazio", 
            "title": "TemplateTop"
        }, 
        {
            "location": "/templates/#metodi_2", 
            "text": "", 
            "title": "Metodi"
        }, 
        {
            "location": "/templates/#template_1", 
            "text": "div class= view-field clearfix \n     div class= col col-sm-12 \n         label data-label= label \n\n         /label \n     /div \n     div class= col col-sm-12 view-msg  data-label= msg \n\n     /div \n     div class= col col-sm-12  data-render \n\n     /div \n     div class= col col-sm-12 view-field-error  data-label= error \n\n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/templates/#templateno", 
            "text": "nessun template solo un div  utilizzato soprattutto dalla viewlist  Metodi    template()    div class= col col-xs-12  data-render  /div", 
            "title": "TemplateNo"
        }, 
        {
            "location": "/templates/#templatesimple", 
            "text": "nessun template solo un div utilizzato soprattutto dalla viewlist\nMetodi    template()    div data-render  /div", 
            "title": "TemplateSimple"
        }, 
        {
            "location": "/actions/", 
            "text": "Actions\n\n\nAction\n\n\nClasse principale delle azioni. Estende la classe principale \nComponent\n Le azioni rappresentano l'aggancio per le interazioni con \nl'utente sulle views, dashboard oppure semplici bottoni html. Da questa classe\nsono state definite altri due azioni generali la \nRecordAction\n e la \nCollectionAction\n che\nfondamentalmente dividono il comportamento in azioni che agiscono sul singolo record\ne azioni che agiscono su una collezione di record.\n\n\nPropriet\u00e0\n\n\n\n\ncontainer\n : default null\n\n\nhtmlEvent\n : default 'onclick'      evento html associato che fa scattare l'azione\n\n\ntype\n : default null pu\u00f2 essere record o collection\n\n\ncontrolType\n : default 'button',\n\n\ntext\n : '',\n\n\nicon\n : '',\n\n\ncssClass\n : '',\n\n\ntarget\n : '',\n\n\nhref\n : '',\n\n\nparams\n : [],\n\n\nenabled\n : true,\n\n\nvisible\n : true,\n\n\ntitle\n : '',\n\n\n_htmlProperties\n : ['text','icon','cssClass','target','href','params','title','enabled','visible','onclick','onchange'],\n\n\n\n\nMetodi\n\n\n\n\nexecute\n : metodo chiamato quando l'azione viene cliccata\n\n\ntemplate\n : metodo che restituisce i template di tipo button o link \n\n\nbuttonTemplate\n : template con type button\n\n\nlinkTemplate\n : template con type link\n\n\ncallback\n : se definita viene chiamata al termi dell'execute\n\n\n_getData\n : ritorna i valori di instanza di tutti gli attributi html dell'azione\n\n\n\n\nRecordAction\n\n\nLe recordAction sono quelle utilizzate nelle liste per ogni record\n\n\nPropriet\u00e0\n\n\n\n\nclassName\n : 'RecordAction',\n\n\ntype\n : 'record',\n\n\n\n\ncssClass\n : 'btn btn-default btn-xs btn-group',\n\n\n\n\n\n\nbuttonTemplate\n : function ()\n\n\n\n\n\n\nbutton data-action type=\nbutton\n data-visible=visible data-class=\ncssClass\n  data-attrs=\n{'title':title,'data-params':params,'target':target}\n data-addclass=\nenabled?'':'disabled'\n\n    \ni data-remove=\n!icon\n data-class=\nicon\n/i\n\n    \nspan data-field=\ntext\n/span\n\n\n/button\n \n\n\n\n\n\n\nlinkTemplate\n : function () \n\n\n\n\na data-href=\nhref\n data-visible=\nvisible\n data-class=\ncssClass\n  data-attrs=\n{'title':title,'data-params':params,'target':target}\n target=\n_blank\n data-addclass=\nenabled?'':'disabled'\n\n    \ni data-remove=\n!icon\n data-class=\nicon\n/i\n\n    \nspan data-field=\ntext\n/span\n\n\n/a\n   \n\n\n\n\nCollectionAction\n\n\nDiscriminano le azioni sulla vista globale, per esempio una view a lista ci sono le record actions che lavorano\nsul singolo record, mentre le collection action agisco sul modello. Oltre a questa differenza vengono \nrenderizzate anche in un posto diverso.\n\n\nPropriet\u00e0\n\n\n\n\nclassName\n : 'CollectionAction'\n\n\ntype\n : 'collection'\n\n\nbuttonTemplate\n : \n\n\n\n\nbutton data-action type=\nbutton\n data-visible=visible data-attrs=\n{'title':title,'data-params':params,'target':target}\n data-class=\ncssClass\n data-addclass=\nenabled?'':'disabled'\n\n    \ni data-remove=\n!icon\n data-class=\nicon\n/i\n\n    \nspan data-field=\ntext\n/span\n\n\n/button\n \n\n\n\n\n\n\nlinkTemplate\n : \n\n\n\n\na data-href=\nhref\n data-visible=\nvisible\n data-class=\ncssClass\n  data-attrs=\n{'title':title,'data-params':params,'target':target}\n target=\n_blank\n data-addclass=\nenabled?'':'disabled'\n\n    \ni data-remove=\n!icon\n data-class=\nicon\n/i\n\n    \nspan data-field=\ntext\n/span\n\n\n/a\n  \n\n\n\n\nAction Implementate\n\n\nLa libreria, come per tutti gli altri componenti, mette a disposizione delle azioni gi\u00e0 predefinite, \nutilizzabili immediamente. Queste azioni rappresentano le azioni pi\u00f9 comuni in una libreria crud. Ovviamente\npossono essere estese o definite delle nuove.\n\n\nActionEdit:\n\n\nEstende \nRecordAction\n. Azione pensata per l'utilizzo dentro una view list e rappresent l'edit di un record \nall'interno della lista. \n\n\nPropriet\u00e0\n\n\n\n\nclassName\n : 'ActionEdit'\n\n\ntitle\n : 'Modifica',\n\n\nicon\n : 'fa fa-edit',\n\n\nmultiText\n : 'Modifica', // questo testo viene utilizzato quando l'azione si trova all'interno di un gruppo\ndi azioni.\n\n\nrouteName\n : 'page_edit'\n\n\n\n\nMetodi\n\n\n\n\nexecute\n - utilizza la route per una pagina in edit per richiamare la pagina nuova\n\n\n\n\nActionInsert\n\n\nEstende \nCollectionAction\n. Azione pensata per l'utilizzo dentro una view list  per l'inserimento di un record all'interno della lista.\n\n\nPropriet\u00e0\n\n\n\n\nclassName\n : 'ActionInsert',\n\n\ntitle\n : 'Inserisci',\n\n\nicon\n : 'fa fa-plus text-success',\n\n\ncssClass\n : 'btn btn-default btn-xs text-success',\n\n\ntext\n : 'Nuovo',\n\n\nmultiText\n : 'Nuovo',\n\n\nrouteName\n : 'page_insert',\n\n\n\n\nMetodi\n\n\n\n\nexecute\n - utilizza al route per una pagina in insert per richiamare la pagina nuova\n\n\n\n\nActionSave\n\n\nEstende \nRecordAction\n. Azione pensata per l'utilizzo dentro una view edit per salvare le modifiche\n\n\n\n\nclassName\n : 'ActionSave',\n\n\ntitle\n : 'Salva',\n\n\ntext\n : 'Salva',\n\n\n\n\nmultiText\n : 'Salva',\n\n\n\n\n\n\nexecute\n - utilizza le route update o save a seconda se il modello dati \u00e8 in modifica o insert\n\n\n\n\n\n\nActionBack\n\n\nEstende \nRecordAction\n. Azione pensata per l'utilizzo dentro una view edit ritorna alla pagina di provienienza\n\n\n\n\nclassName\n : 'ActionBack',\n\n\ntitle\n : 'Indietro',\n\n\n\n\ntext\n : 'Torna indietro',\n\n\n\n\n\n\nexecute\n esegue sostanzialmente un history.back();\n\n\n\n\n\n\nActionView\n\n\nEstende \nRecordAction\n. Azione pensata per l'utilizzo dentro una view list  per la visualizzazione di un record all'interno della lista.\n\n\nPropriet\u00e0\n\n\n\n\nclassName\n : 'ActionView',\n\n\ntitle\n :'Visualizza',\n\n\nicon\n:  'fa fa-list-alt',\n\n\nmultiText\n : 'Visualizza',\n\n\nrouteName\n : 'page_view',\n\n\n\n\nMetodi\n\n\n\n\nexecute\n - utilizza al route per una pagina in view per richiamare la pagina nuova\n\n\n\n\nActionDelete\n\n\nEstende \nRecordAction\n. Azione pensata per l'utilizzo dentro una view list  per la cancellazione di un record all'interno della lista.\n\n\nPropriet\u00e0\n\n\n\n\nclassName\n : 'ActionDelete',\n\n\ntitle\n : 'Cancella',\n\n\nicon\n:  'fa fa-remove text-danger',\n\n\nmultiText\n : 'Cancella',\n\n\n\n\nMetodi\n\n\n\n\nexecute\n - utilizza al route delete per eseguire la richiesta di cancellazione. Prima chiede conferma\n\n\ncallback\n - metodo richiamata alla fine della execute\n\n\n\n\nActionMultiDelete\n\n\nEstende \nCollectionAction\n. Azione pensata per l'utilizzo dentro una view list  per la cancellazione di tutti i record selezionati nella lista.\n\n\nPropriet\u00e0\n\n\n\n\nclassName\n : 'ActionMultiDelete',\n\n\ntitle\n : 'Cancella selezionati',\n\n\nicon\n:  'fa fa-trash text-danger',\n\n\ncssClass\n : 'btn btn-default btn-xs text-danger',\n\n\ntext\n : 'Selezionati',\n\n\nneedSelection\n : true,\n\n\nmultiText\n : 'Cancella Selezionati',\n\n\n\n\nMetodi\n\n\n\n\nexecute\n - utilizza al route delete per eseguire la richiesta di cancellazione. Prima chiede conferma\n\n\ncallback\n - metodo richiamata alla fine della execute\n\n\n\n\nActionSearch\n\n\nEstende \nCollectionAction\n. Azione pensata per l'utilizzo dentro una view search  per la ricerca dei record con i filtri della view.\n\n\nPropriet\u00e0\n\n\n\n\nclassName\n : 'ActionSearch',\n\n\ntitle\n : 'Ricerca',\n\n\nicon\n:  'fa fa-search',\n\n\ncssClass\n : 'btn btn-xs btn-default text-info',\n\n\ntext\n : 'Cerca',\n\n\n\n\nMetodi\n\n\n\n\nexecute\n - richiama la pagina con i parametri in get presenti nella form della vista\n\n\n\n\nActionReset\n\n\nEstende \nCollectionAction\n. Azione pensata per l'utilizzo dentro una view search il reset dei parametri di \nricerca impostati\n\n\nPropriet\u00e0\n\n\n\n\nclassName\n : 'ActionReset',\n\n\ntitle\n : 'Annulla filtri ricerca',\n\n\ncssClass\n : 'btn btn-xs btn-default',\n\n\ntext\n : 'Annulla filtri',\n\n\n\n\nMetodi\n\n\n\n\nexecute\n - richiama il metodo clear su tutti i renders della view e richiama la callback\n\n\ncallback\n - metodo chiamato dopo il reset dei controlli\n\n\n\n\nActionNextPage\n\n\nnextpage del navigatore di una lista\n\n\nPropriet\u00e0  \n\n- \nicon\n : 'fa fa-angle-right',\n- \ncssClass\n : 'btn btn-default btn-xs',\n\n\nMetodi\n\n\n\n\nexecute\n : incrementa di uno il parametro page della route associata alla lista\n\n\n\n\nActionPrevPage\n\n\nPagina precendente di una view\n\n\nPropriet\u00e0\n\n\n\n\nicon\n : 'fa fa-angle-left',\n\n\n\n\ncssClass\n : 'btn btn-default btn-xs'\n\n\n\n\n\n\nexecute\n : Decrementa di uno il parametro page della route associata alla lista\n\n\n\n\n\n\nActionFirstPage\n\n\n\n\nicon\n : 'fa fa fa-angle-double-left',\n\n\ncssClass\n : 'btn btn-default btn-xs',\n\n\nexecute\n : Setta il parametro page a uno della route associata alla lista\n\n\n\n\nActionLastPage\n\n\n\n\nicon\n : 'fa fa fa-angle-double-right',\n\n\ncssClass\n : 'btn btn-default btn-xs',\n\n\nexecute\n : Setta il parametro page all'ultima pagina della route associata alla lista\n\n\n\n\nActionPerPage\n\n\n\n\nicon\n : 'fa fa fa-angle-double-right',\n\n\nhtmlEvent\n : 'onchange',\n\n\ncssClass\n : 'btn btn-default btn-xs',\n\n\n\n\nexecute\n : setta il parametro page e paginateNumber della route associata alla lista\n\n\n\n\n\n\n_getData\n : setta i valori della select prendendoli da data.pagination.pagination_steps\n\n\n\n\n\n\nbuttonTemplate\n : \n\n\n\n\n\n\nselect data-field=\npagination.per_page\n data-source=\npagination.pagination_steps\n \n        data-sourceorder=\npagination.pagination_order\n\n        data-attrs=`+ special_attrs + `  class=\npagination-input\n\n\n\n/select", 
            "title": "Actions"
        }, 
        {
            "location": "/actions/#actions", 
            "text": "", 
            "title": "Actions"
        }, 
        {
            "location": "/actions/#action", 
            "text": "Classe principale delle azioni. Estende la classe principale  Component  Le azioni rappresentano l'aggancio per le interazioni con \nl'utente sulle views, dashboard oppure semplici bottoni html. Da questa classe\nsono state definite altri due azioni generali la  RecordAction  e la  CollectionAction  che\nfondamentalmente dividono il comportamento in azioni che agiscono sul singolo record\ne azioni che agiscono su una collezione di record.", 
            "title": "Action"
        }, 
        {
            "location": "/actions/#proprieta", 
            "text": "container  : default null  htmlEvent  : default 'onclick'      evento html associato che fa scattare l'azione  type  : default null pu\u00f2 essere record o collection  controlType  : default 'button',  text  : '',  icon  : '',  cssClass  : '',  target  : '',  href  : '',  params  : [],  enabled  : true,  visible  : true,  title  : '',  _htmlProperties  : ['text','icon','cssClass','target','href','params','title','enabled','visible','onclick','onchange'],", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/actions/#metodi", 
            "text": "execute  : metodo chiamato quando l'azione viene cliccata  template  : metodo che restituisce i template di tipo button o link   buttonTemplate  : template con type button  linkTemplate  : template con type link  callback  : se definita viene chiamata al termi dell'execute  _getData  : ritorna i valori di instanza di tutti gli attributi html dell'azione", 
            "title": "Metodi"
        }, 
        {
            "location": "/actions/#recordaction", 
            "text": "Le recordAction sono quelle utilizzate nelle liste per ogni record", 
            "title": "RecordAction"
        }, 
        {
            "location": "/actions/#proprieta_1", 
            "text": "className  : 'RecordAction',  type  : 'record',   cssClass  : 'btn btn-default btn-xs btn-group',    buttonTemplate  : function ()    button data-action type= button  data-visible=visible data-class= cssClass   data-attrs= {'title':title,'data-params':params,'target':target}  data-addclass= enabled?'':'disabled' \n     i data-remove= !icon  data-class= icon /i \n     span data-field= text /span  /button     linkTemplate  : function ()    a data-href= href  data-visible= visible  data-class= cssClass   data-attrs= {'title':title,'data-params':params,'target':target}  target= _blank  data-addclass= enabled?'':'disabled' \n     i data-remove= !icon  data-class= icon /i \n     span data-field= text /span  /a", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/actions/#collectionaction", 
            "text": "Discriminano le azioni sulla vista globale, per esempio una view a lista ci sono le record actions che lavorano\nsul singolo record, mentre le collection action agisco sul modello. Oltre a questa differenza vengono \nrenderizzate anche in un posto diverso.", 
            "title": "CollectionAction"
        }, 
        {
            "location": "/actions/#proprieta_2", 
            "text": "className  : 'CollectionAction'  type  : 'collection'  buttonTemplate  :    button data-action type= button  data-visible=visible data-attrs= {'title':title,'data-params':params,'target':target}  data-class= cssClass  data-addclass= enabled?'':'disabled' \n     i data-remove= !icon  data-class= icon /i \n     span data-field= text /span  /button     linkTemplate  :    a data-href= href  data-visible= visible  data-class= cssClass   data-attrs= {'title':title,'data-params':params,'target':target}  target= _blank  data-addclass= enabled?'':'disabled' \n     i data-remove= !icon  data-class= icon /i \n     span data-field= text /span  /a", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/actions/#action-implementate", 
            "text": "La libreria, come per tutti gli altri componenti, mette a disposizione delle azioni gi\u00e0 predefinite, \nutilizzabili immediamente. Queste azioni rappresentano le azioni pi\u00f9 comuni in una libreria crud. Ovviamente\npossono essere estese o definite delle nuove.", 
            "title": "Action Implementate"
        }, 
        {
            "location": "/actions/#actionedit", 
            "text": "Estende  RecordAction . Azione pensata per l'utilizzo dentro una view list e rappresent l'edit di un record \nall'interno della lista.", 
            "title": "ActionEdit:"
        }, 
        {
            "location": "/actions/#proprieta_3", 
            "text": "className  : 'ActionEdit'  title  : 'Modifica',  icon  : 'fa fa-edit',  multiText  : 'Modifica', // questo testo viene utilizzato quando l'azione si trova all'interno di un gruppo\ndi azioni.  routeName  : 'page_edit'", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/actions/#metodi_1", 
            "text": "execute  - utilizza la route per una pagina in edit per richiamare la pagina nuova", 
            "title": "Metodi"
        }, 
        {
            "location": "/actions/#actioninsert", 
            "text": "Estende  CollectionAction . Azione pensata per l'utilizzo dentro una view list  per l'inserimento di un record all'interno della lista.", 
            "title": "ActionInsert"
        }, 
        {
            "location": "/actions/#proprieta_4", 
            "text": "className  : 'ActionInsert',  title  : 'Inserisci',  icon  : 'fa fa-plus text-success',  cssClass  : 'btn btn-default btn-xs text-success',  text  : 'Nuovo',  multiText  : 'Nuovo',  routeName  : 'page_insert',", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/actions/#metodi_2", 
            "text": "execute  - utilizza al route per una pagina in insert per richiamare la pagina nuova", 
            "title": "Metodi"
        }, 
        {
            "location": "/actions/#actionsave", 
            "text": "Estende  RecordAction . Azione pensata per l'utilizzo dentro una view edit per salvare le modifiche   className  : 'ActionSave',  title  : 'Salva',  text  : 'Salva',   multiText  : 'Salva',    execute  - utilizza le route update o save a seconda se il modello dati \u00e8 in modifica o insert", 
            "title": "ActionSave"
        }, 
        {
            "location": "/actions/#actionback", 
            "text": "Estende  RecordAction . Azione pensata per l'utilizzo dentro una view edit ritorna alla pagina di provienienza   className  : 'ActionBack',  title  : 'Indietro',   text  : 'Torna indietro',    execute  esegue sostanzialmente un history.back();", 
            "title": "ActionBack"
        }, 
        {
            "location": "/actions/#actionview", 
            "text": "Estende  RecordAction . Azione pensata per l'utilizzo dentro una view list  per la visualizzazione di un record all'interno della lista.", 
            "title": "ActionView"
        }, 
        {
            "location": "/actions/#proprieta_5", 
            "text": "className  : 'ActionView',  title  :'Visualizza',  icon :  'fa fa-list-alt',  multiText  : 'Visualizza',  routeName  : 'page_view',", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/actions/#metodi_3", 
            "text": "execute  - utilizza al route per una pagina in view per richiamare la pagina nuova", 
            "title": "Metodi"
        }, 
        {
            "location": "/actions/#actiondelete", 
            "text": "Estende  RecordAction . Azione pensata per l'utilizzo dentro una view list  per la cancellazione di un record all'interno della lista.", 
            "title": "ActionDelete"
        }, 
        {
            "location": "/actions/#proprieta_6", 
            "text": "className  : 'ActionDelete',  title  : 'Cancella',  icon :  'fa fa-remove text-danger',  multiText  : 'Cancella',", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/actions/#metodi_4", 
            "text": "execute  - utilizza al route delete per eseguire la richiesta di cancellazione. Prima chiede conferma  callback  - metodo richiamata alla fine della execute", 
            "title": "Metodi"
        }, 
        {
            "location": "/actions/#actionmultidelete", 
            "text": "Estende  CollectionAction . Azione pensata per l'utilizzo dentro una view list  per la cancellazione di tutti i record selezionati nella lista.", 
            "title": "ActionMultiDelete"
        }, 
        {
            "location": "/actions/#proprieta_7", 
            "text": "className  : 'ActionMultiDelete',  title  : 'Cancella selezionati',  icon :  'fa fa-trash text-danger',  cssClass  : 'btn btn-default btn-xs text-danger',  text  : 'Selezionati',  needSelection  : true,  multiText  : 'Cancella Selezionati',", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/actions/#metodi_5", 
            "text": "execute  - utilizza al route delete per eseguire la richiesta di cancellazione. Prima chiede conferma  callback  - metodo richiamata alla fine della execute", 
            "title": "Metodi"
        }, 
        {
            "location": "/actions/#actionsearch", 
            "text": "Estende  CollectionAction . Azione pensata per l'utilizzo dentro una view search  per la ricerca dei record con i filtri della view.", 
            "title": "ActionSearch"
        }, 
        {
            "location": "/actions/#proprieta_8", 
            "text": "className  : 'ActionSearch',  title  : 'Ricerca',  icon :  'fa fa-search',  cssClass  : 'btn btn-xs btn-default text-info',  text  : 'Cerca',", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/actions/#metodi_6", 
            "text": "execute  - richiama la pagina con i parametri in get presenti nella form della vista", 
            "title": "Metodi"
        }, 
        {
            "location": "/actions/#actionreset", 
            "text": "Estende  CollectionAction . Azione pensata per l'utilizzo dentro una view search il reset dei parametri di \nricerca impostati", 
            "title": "ActionReset"
        }, 
        {
            "location": "/actions/#proprieta_9", 
            "text": "className  : 'ActionReset',  title  : 'Annulla filtri ricerca',  cssClass  : 'btn btn-xs btn-default',  text  : 'Annulla filtri',", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/actions/#metodi_7", 
            "text": "execute  - richiama il metodo clear su tutti i renders della view e richiama la callback  callback  - metodo chiamato dopo il reset dei controlli", 
            "title": "Metodi"
        }, 
        {
            "location": "/actions/#actionnextpage", 
            "text": "nextpage del navigatore di una lista  Propriet\u00e0   \n-  icon  : 'fa fa-angle-right',\n-  cssClass  : 'btn btn-default btn-xs',", 
            "title": "ActionNextPage"
        }, 
        {
            "location": "/actions/#metodi_8", 
            "text": "execute  : incrementa di uno il parametro page della route associata alla lista", 
            "title": "Metodi"
        }, 
        {
            "location": "/actions/#actionprevpage", 
            "text": "Pagina precendente di una view", 
            "title": "ActionPrevPage"
        }, 
        {
            "location": "/actions/#proprieta_10", 
            "text": "icon  : 'fa fa-angle-left',   cssClass  : 'btn btn-default btn-xs'    execute  : Decrementa di uno il parametro page della route associata alla lista", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/actions/#actionfirstpage", 
            "text": "icon  : 'fa fa fa-angle-double-left',  cssClass  : 'btn btn-default btn-xs',  execute  : Setta il parametro page a uno della route associata alla lista", 
            "title": "ActionFirstPage"
        }, 
        {
            "location": "/actions/#actionlastpage", 
            "text": "icon  : 'fa fa fa-angle-double-right',  cssClass  : 'btn btn-default btn-xs',  execute  : Setta il parametro page all'ultima pagina della route associata alla lista", 
            "title": "ActionLastPage"
        }, 
        {
            "location": "/actions/#actionperpage", 
            "text": "icon  : 'fa fa fa-angle-double-right',  htmlEvent  : 'onchange',  cssClass  : 'btn btn-default btn-xs',   execute  : setta il parametro page e paginateNumber della route associata alla lista    _getData  : setta i valori della select prendendoli da data.pagination.pagination_steps    buttonTemplate  :     select data-field= pagination.per_page  data-source= pagination.pagination_steps  \n        data-sourceorder= pagination.pagination_order \n        data-attrs=`+ special_attrs + `  class= pagination-input  /select", 
            "title": "ActionPerPage"
        }, 
        {
            "location": "/confs/", 
            "text": "Confs\n\n\nLe Confs sono nate per creare configurazioni iniziali per le views di uso generale.\nQuesto permette di avere, con pochissimo codice, la configurazione di default \ndella view e modificare solo le propriet\u00e0 nella singola istanza. \n\n\nConf\n\n\nLa Classe Conf \u00e8 stata realizzata per permettere le estensioni e il merge di configurazioni\nper ottenere la configurazione finale da passare alla view.\nE' stato implementato un metodo statico\n\n\nConf.extend(dest,source) : Prese due configurazioni source e dest, la source verr\u00e0 mergiata con dest\n sovrascrivendo le proprieta e restituita un unica conf.\n- param @source : configurazione sorgente\n- param @dest : configurazine destinazione che verranno copiate le propriet\u00e0 di source\n- return object nuova configurazione\n\n\nConfigurazioni definite di default\n\n\nNella libreria ci sono gi\u00e0 delle configurazioni di uso comune per ogni oggetto vista \nimplementato di default.\n\n\nCollectionConf\n\n\nConfigurazione base per le views di tipo collection\n\n\nvar CollectionConf = {\n    routeName : null,\n    viewClass : null,\n    actions : [],\n    custom_actions : {},\n    fields : [],\n    fields_config: {},\n    pagination : true,\n    detail_fields: {},\n}\n\n\n\n\nRecordConf\n\n\nConfigurazione base per le view di tipo record\n\n\nvar RecordConf = {\n    routeName : null,\n    viewClass : null,\n    actions : [],\n    custom_actions : {},\n    fields : [],\n    fields_config: {},\n    dependencies : {},\n    fields_template: 'left',  // pu\u00f2 essere stringa o array associativo {field : struttura} per definizioni di struttura per ogni campo\n}\n\n\n\n\nConfList\n\n\nRappresenta la configurazione base utilizzare nella creazione di una view di lista di oggetti.\n\n\nvar ConfList = Conf.extend(CollectionConf,{\n    routeName : 'list',\n    viewClass : 'ViewList',\n    actions : ['ActionDelete','ActionMultiDelete','ActionEdit','ActionView','ActionInsert'],\n    detail_fields : {},\n    fields_config: {\n        id :            {type:'hidden'},\n        created_at:     {type:'hidden'},\n        updated_at:     {type:'hidden'},\n        deleted_at:     {type:'hidden'},\n        created_by:     {type:'hidden'},\n        updated_by:     {type:'hidden'},\n        descrizione :   {type:'hidden'},\n        activated:      {type: 'swap','mode': 'edit'},\n        verified:       {type: 'swap','mode': 'edit'},\n        fotos:          {type: 'hasmany_upload_image',limit:1},\n        attachments:    {type: 'hasmany_upload_attachment',limit:1},\n        data:           {type: 'date_picker'}\n    }\n});\n\n\n\n\nConfEdit\n\n\nRappresenta la configurazione per l'editing di un record. \n\n\nvar ConfEdit = Conf.extend(RecordConf, {\n    routeName : 'edit',\n    viewClass : 'ViewEdit',\n    actions : ['ActionSave','ActionBack'],\n    custom_actions : {},\n    fields: [],\n    fields_config: {\n        id: {type:'hidden'},\n        created_at: {type:'hidden'},\n        updated_at: {type:'hidden'},\n        deleted_at: {type:'hidden'},\n        created_by: {type:'hidden'},\n        updated_by: {type:'hidden'},\n        activated:  {type: 'radio'},\n        descrizione: {type: 'texthtml'},\n        body: {type: 'texthtml'},\n        note: {type: 'texthtml'},\n        fotos: {type: 'hasmany_upload_image',templateName:'no'},\n        attachments: {type: 'hasmany_upload_attachment',templateName:'no'},\n        data: {type: 'date_picker'},\n        status: {type:'hidden'},\n        token: {type:'hidden'},\n        captcha: {type: 'captcha'},\n    },\n    dependencies : {}\n});\n\n\n\n\nConfInsert\n\n\nRappresenta la configurazione per una vista per inserire un record.\n\n\nvar ConfInsert = Conf.extend(ConfEdit,{\n    routeName : 'insert',\n    viewClass : 'ViewInsert',\n});\n\n\n\n\nConfSearch\n\n\nRappresenta la configurazione di una vista per la ricerca.\n\n\nvar ConfSearch = Conf.extend(RecordConf ,{\n    routeName : 'search',\n    viewClass : 'ViewSearch',\n    actions : ['ActionSearch','ActionReset'],\n});\n\n\n\n\nConfView\n\n\nConfigurazione per la vista in modalit\u00e0 view di un record\n\n\nvar ConfView = Conf.extend(RecordConf ,{\n    routeName : 'view',\n    viewClass : 'ViewView',\n    fields_config: {\n        attivo: {type: 'swap'},\n        fotos : {type: 'hasmany_upload_image'},\n        attachments: {type: 'hasmany_upload_attachment'},\n        id: {type:'hidden'},\n        created_at: {type:'hidden'},\n        updated_at: {type:'hidden'},\n        deleted_at: {type:'hidden'},\n        created_by: {type:'hidden'},\n        updated_by: {type:'hidden'}\n    }\n});\n\n\n\n\nConfCalendar\n\n\nConfigurazione per la vista a calendario di una lista di record.\n\n\nvar ConfCalendar =  Conf.extend(CollectionConf ,{\n    routeName : 'calendar',\n    viewClass : 'ViewCalendar',\n    data_inizio : 'data',   // nome campo da utlizzare per prendere la data dell'evento\n    data_fine : null,       // eventuale campo che segna la data di fine  dell'evento\n    title : null,           // nome campo da utilizzare per la visualizzazione dell'evento\n    calendar_options : {}   // opzioni da passare al plugin fullCalendar\n});", 
            "title": "Confs"
        }, 
        {
            "location": "/confs/#confs", 
            "text": "Le Confs sono nate per creare configurazioni iniziali per le views di uso generale.\nQuesto permette di avere, con pochissimo codice, la configurazione di default \ndella view e modificare solo le propriet\u00e0 nella singola istanza.", 
            "title": "Confs"
        }, 
        {
            "location": "/confs/#conf", 
            "text": "La Classe Conf \u00e8 stata realizzata per permettere le estensioni e il merge di configurazioni\nper ottenere la configurazione finale da passare alla view.\nE' stato implementato un metodo statico  Conf.extend(dest,source) : Prese due configurazioni source e dest, la source verr\u00e0 mergiata con dest\n sovrascrivendo le proprieta e restituita un unica conf.\n- param @source : configurazione sorgente\n- param @dest : configurazine destinazione che verranno copiate le propriet\u00e0 di source\n- return object nuova configurazione", 
            "title": "Conf"
        }, 
        {
            "location": "/confs/#configurazioni-definite-di-default", 
            "text": "Nella libreria ci sono gi\u00e0 delle configurazioni di uso comune per ogni oggetto vista \nimplementato di default.", 
            "title": "Configurazioni definite di default"
        }, 
        {
            "location": "/confs/#collectionconf", 
            "text": "Configurazione base per le views di tipo collection  var CollectionConf = {\n    routeName : null,\n    viewClass : null,\n    actions : [],\n    custom_actions : {},\n    fields : [],\n    fields_config: {},\n    pagination : true,\n    detail_fields: {},\n}", 
            "title": "CollectionConf"
        }, 
        {
            "location": "/confs/#recordconf", 
            "text": "Configurazione base per le view di tipo record  var RecordConf = {\n    routeName : null,\n    viewClass : null,\n    actions : [],\n    custom_actions : {},\n    fields : [],\n    fields_config: {},\n    dependencies : {},\n    fields_template: 'left',  // pu\u00f2 essere stringa o array associativo {field : struttura} per definizioni di struttura per ogni campo\n}", 
            "title": "RecordConf"
        }, 
        {
            "location": "/confs/#conflist", 
            "text": "Rappresenta la configurazione base utilizzare nella creazione di una view di lista di oggetti.  var ConfList = Conf.extend(CollectionConf,{\n    routeName : 'list',\n    viewClass : 'ViewList',\n    actions : ['ActionDelete','ActionMultiDelete','ActionEdit','ActionView','ActionInsert'],\n    detail_fields : {},\n    fields_config: {\n        id :            {type:'hidden'},\n        created_at:     {type:'hidden'},\n        updated_at:     {type:'hidden'},\n        deleted_at:     {type:'hidden'},\n        created_by:     {type:'hidden'},\n        updated_by:     {type:'hidden'},\n        descrizione :   {type:'hidden'},\n        activated:      {type: 'swap','mode': 'edit'},\n        verified:       {type: 'swap','mode': 'edit'},\n        fotos:          {type: 'hasmany_upload_image',limit:1},\n        attachments:    {type: 'hasmany_upload_attachment',limit:1},\n        data:           {type: 'date_picker'}\n    }\n});", 
            "title": "ConfList"
        }, 
        {
            "location": "/confs/#confedit", 
            "text": "Rappresenta la configurazione per l'editing di un record.   var ConfEdit = Conf.extend(RecordConf, {\n    routeName : 'edit',\n    viewClass : 'ViewEdit',\n    actions : ['ActionSave','ActionBack'],\n    custom_actions : {},\n    fields: [],\n    fields_config: {\n        id: {type:'hidden'},\n        created_at: {type:'hidden'},\n        updated_at: {type:'hidden'},\n        deleted_at: {type:'hidden'},\n        created_by: {type:'hidden'},\n        updated_by: {type:'hidden'},\n        activated:  {type: 'radio'},\n        descrizione: {type: 'texthtml'},\n        body: {type: 'texthtml'},\n        note: {type: 'texthtml'},\n        fotos: {type: 'hasmany_upload_image',templateName:'no'},\n        attachments: {type: 'hasmany_upload_attachment',templateName:'no'},\n        data: {type: 'date_picker'},\n        status: {type:'hidden'},\n        token: {type:'hidden'},\n        captcha: {type: 'captcha'},\n    },\n    dependencies : {}\n});", 
            "title": "ConfEdit"
        }, 
        {
            "location": "/confs/#confinsert", 
            "text": "Rappresenta la configurazione per una vista per inserire un record.  var ConfInsert = Conf.extend(ConfEdit,{\n    routeName : 'insert',\n    viewClass : 'ViewInsert',\n});", 
            "title": "ConfInsert"
        }, 
        {
            "location": "/confs/#confsearch", 
            "text": "Rappresenta la configurazione di una vista per la ricerca.  var ConfSearch = Conf.extend(RecordConf ,{\n    routeName : 'search',\n    viewClass : 'ViewSearch',\n    actions : ['ActionSearch','ActionReset'],\n});", 
            "title": "ConfSearch"
        }, 
        {
            "location": "/confs/#confview", 
            "text": "Configurazione per la vista in modalit\u00e0 view di un record  var ConfView = Conf.extend(RecordConf ,{\n    routeName : 'view',\n    viewClass : 'ViewView',\n    fields_config: {\n        attivo: {type: 'swap'},\n        fotos : {type: 'hasmany_upload_image'},\n        attachments: {type: 'hasmany_upload_attachment'},\n        id: {type:'hidden'},\n        created_at: {type:'hidden'},\n        updated_at: {type:'hidden'},\n        deleted_at: {type:'hidden'},\n        created_by: {type:'hidden'},\n        updated_by: {type:'hidden'}\n    }\n});", 
            "title": "ConfView"
        }, 
        {
            "location": "/confs/#confcalendar", 
            "text": "Configurazione per la vista a calendario di una lista di record.  var ConfCalendar =  Conf.extend(CollectionConf ,{\n    routeName : 'calendar',\n    viewClass : 'ViewCalendar',\n    data_inizio : 'data',   // nome campo da utlizzare per prendere la data dell'evento\n    data_fine : null,       // eventuale campo che segna la data di fine  dell'evento\n    title : null,           // nome campo da utilizzare per la visualizzazione dell'evento\n    calendar_options : {}   // opzioni da passare al plugin fullCalendar\n});", 
            "title": "ConfCalendar"
        }, 
        {
            "location": "/routes/", 
            "text": "Routes\n\n\nLe routes rappresentano le classi per la gestione degli url per la comunicazione verso il server che\nfornir\u00e0 i dati\n\n\nRoute\n\n\nClasse base per la gestione delle route verso il backend. Sono state definite\nalcune route per le principali interazioni con il backend secondo le specifiche REST.\n\n\nPropriet\u00e0\n\n\n\n\nclassName\n: default \"Route\" variabile di comodo per riconoscere in quale route ci troviamo\n\n\nmethod\n: default null rappresenta il metodo usato per la chiamata ajax, pu\u00f2 essere get o post\n\n\nurl\n : default null rappresenta l'url che deve essere composto per eseguire la chiamataa \n    Le parti variabili devono essere racchiuse tra parentesi graffe. Per esempio : /action/{var1}/print \u00e8 un\n    url in cui {var1} verr\u00e0 sostituita con il valore che l'oggetto Route ha in quel momento.\n\n\nresultType\n default  null tipo di risultato, pu\u00f2 essere record o list\n\n\nprotocol\n default null nome della classe protocollo da utilizzare per applicare eventuali\n elaborazioni sui dati dopo averli ricevuti. Di default sono stati implementati due protocolli: \n\n\nListProtocol\n\n\nRecordProtocol\n\n\n\n\n\n\nextraParams\n  : {}, parametri statici da aggiungere sempre alla chiamata prima di eseguire la richiesta \nal server.\n\n\nvalues\n : {}, vettore associativo con il valore dei parametri per la costruzione dell'url\n\n\nparams\n :{} vettore associativo dei parametri passati nella richiesta. Prima\ndella richiesta vengono sommati agli extraParams\n\n\n\n\nMetodi\n\n\n\n\n\n\ninit(attrs)\n costruttore. Accetta come parametro un vettore associativo che permette\ndi sovrascrivere le propriet\u00e0 dell'oggetto creato.\n\n\n\n\n\n\ngetUrl(values)\n ritorna url esatto valorizzando le variabili parametriche tra {} \npresenti nella stringa url. Il parametro \nvalues\n \u00e8 il vettore associativo dei valori\nattuali per valorizzare le variabili. Se non viene passato prende i valori presenti\nnell'oggetto nel vettore values\n\n\n\n\n\n\ngetParams\n ritorna tutti i parametri che verranno passati nella richiesta. L'unione\ntra params ed extra_params dell'oggetto\n\n\n\n\n\n\ngetKeys\n ritorna un vettore con tutte le keys necessarie per la composizione dell'ulr\ndella route che devono essere valorizzati per ritornare l'url esatto. Peer esempio \nse url e' fatto come /pippo/{param1}/{param2} ritorna ['param1','param2']\n\n\n\n\n\n\nRoute Implementate\n\n\nLa libreria contiene gi\u00e0 delle route per l'uso comune che vengono utilizzate dalle views\ne dalle actions. Per la creazione di una route \u00e8 stato realizzato un pseduo metodo statico\nchiamato factory. Se vogliamo utilizzare il metodo factory dobbiamo rispettare la convenzione\nsui nomi. Chiamare il factory('list') il metodo cercher\u00e0 l'esistenza della classe\nRouteList, se chiamiamo il factory('list_mia') il metodo cercher\u00e0 l'esistenza\ndella classe RouteListMia. In altre parole sul nome passato al metodo factory viene\napplicata la funziona 'pascal case' concatenato con il prefisso \nRoute\n\n\n\n\nRoute.factory(type,attrs)\n questo metodo istanzia una Route di tipo type\npassando al costruttore gli attrs. Alla variabile type viene applicata la trasformazione\npascal case e aggiunto il prefisso \nRoute\n. Per esempio se vogliamo istanziare un oggetto chiamato RouteList si chiama il metodo\nstatico :\n\n\n\n\nvar r = Route.factory('list',{\n    values : {\n        modelName : 'user'\n    }\n});\n\n\n\n\nQuesto codice crea un'instanza della classe RouteList e il vettore associativo values\nprender\u00e0 come valori quelli passati.\n\n\nRouteList\n\n\nla route \u00e8 stata creata per recuperare una lista di record del modello specificato.\nNel vettore \nvalues\n deve essere presente la chiave:\n\n\n\n\nmodelName\n: rappresenta il nome del modello.\n\n\n\n\n{\n    \nurl\n: \n/api/json/{modelName}\n,\n    \nprotocol\n: \nlist\n,\n    \nresultType\n: \nlist\n,\n    \nmethod\n: \nget\n,\n    \nkeys\n: [\n        \nmodelName\n\n    ]\n}\n\n\n\n\nRouteEdit\n\n\nLa route carica i dati di un record per la modifica.\nNel vettore \nvalues\n devono essere presenti le chiavi:\n\n\n\n\nmodelName\n: rappresenta il nome del modello.\n\n\npk\n: rappresenta l'id che identifica il record specifico\n\n\n\n\n{\n    \nurl\n: \n/api/json/{modelName}/{pk}/edit\n,\n    \nprotocol\n: \nrecord\n,\n    \nresultType\n: \nrecord\n,\n    \nmethod\n: \nget\n,\n    \nkeys\n: [\n        \nmodelName\n,\n        \npk\n\n    ]\n}\n\n\n\n\nRouteSearch\n\n\nLa route che chiede i dati di un record per la ricerca.\nNel vettore \nvalues\n deve essere presente la chiave:\n\n\n\n\nmodelName\n: rappresenta il nome del modello.\n\n\n\n\n{\n    \nurl\n: \n/api/json/{modelName}/search\n,\n    \nprotocol\n: \nrecord\n,\n    \nresultType\n: \nrecord\n,\n    \nmethod\n: \nget\n,\n    \nkeys\n: [\n        \nmodelName\n\n    ]\n}\n\n\n\n\nRouteInsert\n\n\nLa route che chiede i dati di un record per l'inserimento.\nNel vettore \nvalues\n deve essere presente la chiave:\n\n\n\n\nmodelName\n: rappresenta il nome del modello.\n\n\n\n\n{\n    \nurl\n: \n/api/json/{modelName}/create\n,\n    \nprotocol\n: \nrecord\n,\n    \nresultType\n: \nrecord\n,\n    \nmethod\n: \nget\n,\n    \nkeys\n: [\n        \nmodelName\n\n    ]\n}\n\n\n\n\nRouteSave\n\n\nLa route che invia i dati di un record per crearlo. I dati del modello verranno passati\ncome params. In questa route viene aggiunto sempre un parametro chiamato _method='POST' che \nserve a simulare il metodo save REST attraverso la chiamata http.\n\n\nNel vettore \nvalues\n deve essere presente la chiave:\n\n\n\n\nmodelName\n: rappresenta il nome del modello.\n\n\n\n\n{\n    \nurl\n: \n/api/json/{modelName}/create\n,\n    \nprotocol\n: \nrecord\n,\n    \nresultType\n: \nrecord\n,\n    \nmethod\n: \npost\n,\n    \nkeys\n: [\n        \nmodelName\n\n    ],\n    \nextra_params\n: {\n        \n_method\n: \nPOST\n\n    }\n}\n\n\n\n\nRouteUpdate\n\n\nLa route che invia i dati di un record per la modifica. I dati del modello verranno passati\ncome params. In questa route viene aggiunto sempre un parametro chiamato _method='PUT' che \nserve a simulare il metodo put REST attraverso la chiamata http.\nNel vettore \nvalues\n devono essere presenti le chiavi:\n\n\n\n\nmodelName\n: rappresenta il nome del modello.\n\n\npk\n: rappresenta l'id che identifica il record specifico\n\n\n\n\n{\n    \nurl\n: \n/api/json/{modelName}/{pk}\n,\n    \nprotocol\n: \nrecord\n,\n    \nresultType\n: \nrecord\n,\n    \nmethod\n: \npost\n,\n    \nkeys\n: [\n        \nmodelName\n,\n        \npk\n\n    ],\n    \nextra_params\n: {\n        \n_method\n: \nPUT\n\n    }\n}\n\n\n\n\nRouteView\n\n\nLa route che chiede i dati di un record in modalit\u00e0 lettura.\nNel vettore \nvalues\n devono essere presenti le chiavi:\n\n\n\n\nmodelName\n: rappresenta il nome del modello.\n\n\npk\n: rappresenta l'id che identifica il record specifico\n\n\n\n\n{\n    \nurl\n: \n/api/json/{modelName}/{pk}\n,\n    \nprotocol\n: \nrecord\n,\n    \nresultType\n: \nrecord\n,\n    \nmethod\n: \nget\n,\n    \nkeys\n: [\n        \nmodelName\n,\n        \npk\n\n    ]\n}\n\n\n\n\nRouteDelete\n\n\nLa route che rimuove un record. In questa route viene aggiunto sempre un parametro chiamato \n_method='DELETE' che serve a simulare il metodo delete REST attraverso la chiamata http.\nNel vettore \nvalues\n devono essere presenti le chiavi:\n\n\n\n\nmodelName\n: rappresenta il nome del modello.\n\n\npk\n: rappresenta l'id che identifica il record specifico\n\n\n\n\n{\n    \nurl\n: \n/api/json/{modelName}/{pk}\n,\n    \nprotocol\n: \nrecord\n,\n    \nresultType\n: \nrecord\n,\n    \nmethod\n: \npost\n,\n    \nkeys\n: [\n        \nmodelName\n,\n        \npk\n\n    ],\n    \nextra_params\n: {\n        \n_method\n: \nDELETE\n\n    }\n}\n\n\n\n\nRouteMultiDelete\n\n\nLa route che rimuove una lista di record. La lista viene passata come vettore di id\nnei params.\nNel vettore \nvalues\n deve essere presente la chiave:\n\n\n\n\nmodelName\n: rappresenta il nome del modello.\n\n\n\n\n{\n    \nurl\n: \n/api/json/{modelName}/deleteall\n,\n    \nprotocol\n: \nrecord\n,\n    \nresultType\n: \nrecord\n,\n    \nmethod\n: \npost\n,\n    \nkeys\n: [\n        \nmodelName\n\n    ]\n}", 
            "title": "Routes"
        }, 
        {
            "location": "/routes/#routes", 
            "text": "Le routes rappresentano le classi per la gestione degli url per la comunicazione verso il server che\nfornir\u00e0 i dati", 
            "title": "Routes"
        }, 
        {
            "location": "/routes/#route", 
            "text": "Classe base per la gestione delle route verso il backend. Sono state definite\nalcune route per le principali interazioni con il backend secondo le specifiche REST.", 
            "title": "Route"
        }, 
        {
            "location": "/routes/#proprieta", 
            "text": "className : default \"Route\" variabile di comodo per riconoscere in quale route ci troviamo  method : default null rappresenta il metodo usato per la chiamata ajax, pu\u00f2 essere get o post  url  : default null rappresenta l'url che deve essere composto per eseguire la chiamataa \n    Le parti variabili devono essere racchiuse tra parentesi graffe. Per esempio : /action/{var1}/print \u00e8 un\n    url in cui {var1} verr\u00e0 sostituita con il valore che l'oggetto Route ha in quel momento.  resultType  default  null tipo di risultato, pu\u00f2 essere record o list  protocol  default null nome della classe protocollo da utilizzare per applicare eventuali\n elaborazioni sui dati dopo averli ricevuti. Di default sono stati implementati due protocolli:   ListProtocol  RecordProtocol    extraParams   : {}, parametri statici da aggiungere sempre alla chiamata prima di eseguire la richiesta \nal server.  values  : {}, vettore associativo con il valore dei parametri per la costruzione dell'url  params  :{} vettore associativo dei parametri passati nella richiesta. Prima\ndella richiesta vengono sommati agli extraParams", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/routes/#metodi", 
            "text": "init(attrs)  costruttore. Accetta come parametro un vettore associativo che permette\ndi sovrascrivere le propriet\u00e0 dell'oggetto creato.    getUrl(values)  ritorna url esatto valorizzando le variabili parametriche tra {} \npresenti nella stringa url. Il parametro  values  \u00e8 il vettore associativo dei valori\nattuali per valorizzare le variabili. Se non viene passato prende i valori presenti\nnell'oggetto nel vettore values    getParams  ritorna tutti i parametri che verranno passati nella richiesta. L'unione\ntra params ed extra_params dell'oggetto    getKeys  ritorna un vettore con tutte le keys necessarie per la composizione dell'ulr\ndella route che devono essere valorizzati per ritornare l'url esatto. Peer esempio \nse url e' fatto come /pippo/{param1}/{param2} ritorna ['param1','param2']", 
            "title": "Metodi"
        }, 
        {
            "location": "/routes/#route-implementate", 
            "text": "La libreria contiene gi\u00e0 delle route per l'uso comune che vengono utilizzate dalle views\ne dalle actions. Per la creazione di una route \u00e8 stato realizzato un pseduo metodo statico\nchiamato factory. Se vogliamo utilizzare il metodo factory dobbiamo rispettare la convenzione\nsui nomi. Chiamare il factory('list') il metodo cercher\u00e0 l'esistenza della classe\nRouteList, se chiamiamo il factory('list_mia') il metodo cercher\u00e0 l'esistenza\ndella classe RouteListMia. In altre parole sul nome passato al metodo factory viene\napplicata la funziona 'pascal case' concatenato con il prefisso  Route   Route.factory(type,attrs)  questo metodo istanzia una Route di tipo type\npassando al costruttore gli attrs. Alla variabile type viene applicata la trasformazione\npascal case e aggiunto il prefisso  Route . Per esempio se vogliamo istanziare un oggetto chiamato RouteList si chiama il metodo\nstatico :   var r = Route.factory('list',{\n    values : {\n        modelName : 'user'\n    }\n});  Questo codice crea un'instanza della classe RouteList e il vettore associativo values\nprender\u00e0 come valori quelli passati.", 
            "title": "Route Implementate"
        }, 
        {
            "location": "/routes/#routelist", 
            "text": "la route \u00e8 stata creata per recuperare una lista di record del modello specificato.\nNel vettore  values  deve essere presente la chiave:   modelName : rappresenta il nome del modello.   {\n     url :  /api/json/{modelName} ,\n     protocol :  list ,\n     resultType :  list ,\n     method :  get ,\n     keys : [\n         modelName \n    ]\n}", 
            "title": "RouteList"
        }, 
        {
            "location": "/routes/#routeedit", 
            "text": "La route carica i dati di un record per la modifica.\nNel vettore  values  devono essere presenti le chiavi:   modelName : rappresenta il nome del modello.  pk : rappresenta l'id che identifica il record specifico   {\n     url :  /api/json/{modelName}/{pk}/edit ,\n     protocol :  record ,\n     resultType :  record ,\n     method :  get ,\n     keys : [\n         modelName ,\n         pk \n    ]\n}", 
            "title": "RouteEdit"
        }, 
        {
            "location": "/routes/#routesearch", 
            "text": "La route che chiede i dati di un record per la ricerca.\nNel vettore  values  deve essere presente la chiave:   modelName : rappresenta il nome del modello.   {\n     url :  /api/json/{modelName}/search ,\n     protocol :  record ,\n     resultType :  record ,\n     method :  get ,\n     keys : [\n         modelName \n    ]\n}", 
            "title": "RouteSearch"
        }, 
        {
            "location": "/routes/#routeinsert", 
            "text": "La route che chiede i dati di un record per l'inserimento.\nNel vettore  values  deve essere presente la chiave:   modelName : rappresenta il nome del modello.   {\n     url :  /api/json/{modelName}/create ,\n     protocol :  record ,\n     resultType :  record ,\n     method :  get ,\n     keys : [\n         modelName \n    ]\n}", 
            "title": "RouteInsert"
        }, 
        {
            "location": "/routes/#routesave", 
            "text": "La route che invia i dati di un record per crearlo. I dati del modello verranno passati\ncome params. In questa route viene aggiunto sempre un parametro chiamato _method='POST' che \nserve a simulare il metodo save REST attraverso la chiamata http.  Nel vettore  values  deve essere presente la chiave:   modelName : rappresenta il nome del modello.   {\n     url :  /api/json/{modelName}/create ,\n     protocol :  record ,\n     resultType :  record ,\n     method :  post ,\n     keys : [\n         modelName \n    ],\n     extra_params : {\n         _method :  POST \n    }\n}", 
            "title": "RouteSave"
        }, 
        {
            "location": "/routes/#routeupdate", 
            "text": "La route che invia i dati di un record per la modifica. I dati del modello verranno passati\ncome params. In questa route viene aggiunto sempre un parametro chiamato _method='PUT' che \nserve a simulare il metodo put REST attraverso la chiamata http.\nNel vettore  values  devono essere presenti le chiavi:   modelName : rappresenta il nome del modello.  pk : rappresenta l'id che identifica il record specifico   {\n     url :  /api/json/{modelName}/{pk} ,\n     protocol :  record ,\n     resultType :  record ,\n     method :  post ,\n     keys : [\n         modelName ,\n         pk \n    ],\n     extra_params : {\n         _method :  PUT \n    }\n}", 
            "title": "RouteUpdate"
        }, 
        {
            "location": "/routes/#routeview", 
            "text": "La route che chiede i dati di un record in modalit\u00e0 lettura.\nNel vettore  values  devono essere presenti le chiavi:   modelName : rappresenta il nome del modello.  pk : rappresenta l'id che identifica il record specifico   {\n     url :  /api/json/{modelName}/{pk} ,\n     protocol :  record ,\n     resultType :  record ,\n     method :  get ,\n     keys : [\n         modelName ,\n         pk \n    ]\n}", 
            "title": "RouteView"
        }, 
        {
            "location": "/routes/#routedelete", 
            "text": "La route che rimuove un record. In questa route viene aggiunto sempre un parametro chiamato \n_method='DELETE' che serve a simulare il metodo delete REST attraverso la chiamata http.\nNel vettore  values  devono essere presenti le chiavi:   modelName : rappresenta il nome del modello.  pk : rappresenta l'id che identifica il record specifico   {\n     url :  /api/json/{modelName}/{pk} ,\n     protocol :  record ,\n     resultType :  record ,\n     method :  post ,\n     keys : [\n         modelName ,\n         pk \n    ],\n     extra_params : {\n         _method :  DELETE \n    }\n}", 
            "title": "RouteDelete"
        }, 
        {
            "location": "/routes/#routemultidelete", 
            "text": "La route che rimuove una lista di record. La lista viene passata come vettore di id\nnei params.\nNel vettore  values  deve essere presente la chiave:   modelName : rappresenta il nome del modello.   {\n     url :  /api/json/{modelName}/deleteall ,\n     protocol :  record ,\n     resultType :  record ,\n     method :  post ,\n     keys : [\n         modelName \n    ]\n}", 
            "title": "RouteMultiDelete"
        }, 
        {
            "location": "/server/", 
            "text": "Server\n\n\nClasse per le comunicazioni ajax con il backend. E' un wrapper delle chiamate jQuery\n\n\nPropriet\u00e0\n\n\n\n\nstatic subdomain\n : null\npropriet\u00e0 che permette di avere una base comune in tutti gli url codificati dentro\njavascript. Esempio se il nostro sito si trova sotto una sottodominio o cartella\nhttp://dominio.it/sottodominio  settiamo il subdomain=sottodominio. Da questo momento in poi\ntutte le chiamate avranno url che inizier\u00e0 con \nsottodominio\n\n\n\n\nMetodi\n\n\n\n\n\n\nstatic getUrl(url)\n\nRitorna l'url reale combinato con il subdomain.\n\n\n\n\n\n\nstatic get(url, params, callback)\n\nEsegue una chiamata ajax al server in GET.\n\n\n\n\n@param url : url da richiamare\n\n\n@param params : parametri che vengono passati in get.\n\n\n@param callback : funzione che verr\u00e0 richiamata passando come parametro il risultato ricevuto dal\nserver\n\n\n\n\n\n\n\n\nstatic post(url, params, callback)\n\nEsegue una chiamata ajax al server in POST.\n\n\n\n\n@param url : url da richiamare\n\n\n@param params : parametri che vengono passati in pos.\n\n\n@param callback : funzione che verr\u00e0 richiamata passando come parametro il risultato ricevuto dal\nserver\n\n\n\n\n\n\n\n\nstatic route(route,callback)\n\nEsegue una chiamata ajax al server utilizzando l'oggetto route.\n\n\n\n\n@param route : Oggetto route che incapsula la chiamata\n\n\n@param callback : funzione che verr\u00e0 richiamata passando come parametro il risultato ricevuto dal\nserver", 
            "title": "Server"
        }, 
        {
            "location": "/server/#server", 
            "text": "Classe per le comunicazioni ajax con il backend. E' un wrapper delle chiamate jQuery", 
            "title": "Server"
        }, 
        {
            "location": "/server/#proprieta", 
            "text": "static subdomain  : null\npropriet\u00e0 che permette di avere una base comune in tutti gli url codificati dentro\njavascript. Esempio se il nostro sito si trova sotto una sottodominio o cartella\nhttp://dominio.it/sottodominio  settiamo il subdomain=sottodominio. Da questo momento in poi\ntutte le chiamate avranno url che inizier\u00e0 con  sottodominio", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/server/#metodi", 
            "text": "static getUrl(url) \nRitorna l'url reale combinato con il subdomain.    static get(url, params, callback) \nEsegue una chiamata ajax al server in GET.   @param url : url da richiamare  @param params : parametri che vengono passati in get.  @param callback : funzione che verr\u00e0 richiamata passando come parametro il risultato ricevuto dal\nserver     static post(url, params, callback) \nEsegue una chiamata ajax al server in POST.   @param url : url da richiamare  @param params : parametri che vengono passati in pos.  @param callback : funzione che verr\u00e0 richiamata passando come parametro il risultato ricevuto dal\nserver     static route(route,callback) \nEsegue una chiamata ajax al server utilizzando l'oggetto route.   @param route : Oggetto route che incapsula la chiamata  @param callback : funzione che verr\u00e0 richiamata passando come parametro il risultato ricevuto dal\nserver", 
            "title": "Metodi"
        }, 
        {
            "location": "/app/", 
            "text": "App\n\n\nApp \u00e8 la classe per la gestione della pagina. Permette di aggiungere e cancellare view, \ncreare dashboards ecc.\n\n\nPropriet\u00e0\n\n\n\n\nresources\n : [] - vettore di risorse iniziali della pagina da caricare \n\n\npluginsPath\n : '/cupparis4/plugins/' - directory base dove cercare i plugins da caricare\n\n\nlog\n = null  : oggetto per il log dei messaggi, viene istanziato nel costruttore dell'app.\n\n\nshow_log\n : false - se visualizzare o no i messaggi in console del browser\n\n\nmobile\n : false - se la libreria viene istanziata usu un mobile,\n\n\nlocale\n : 'it' - locale di default, viene utilizzato per la configurazione delle date\n\n\n\n\nMetodi\n\n\n\n\ngetResources()\n : vettore di tutte le risorse caricate dalla pagina\n\n\ninit(options,callback)\n : metodo iniziale da chiamare subito dopo la new per inizializzare\nl'applicazione\n\n\nloadResource(fileName, callback)\n : carica una risorsa script o css dinamicamente partendo dalla \ncartella pluginsPath. quando lo script e' stato caricato chiama la callback\n\n\n@param fileName : path compreso dal filename della risorsa da caricare\n\n\n@param callback : funzione da richiamare al fine del caricamento\n\n\n\n\n\n\nloadResources(resources, callback)\n : carica un vettore di risorse, al fine caricamento chiama la callback\n\n\n@param resources : vettore risorse da caricare\n\n\n@param callback : funzione da richiamare dopo il caricamento di tutte le risorse\n\n\n\n\n\n\naddView(options)\n : aggiunge una view, se in options la propriet\u00e0 autorender=true la visualizza.\n\n\n@param options : configurazione della view, deve essere un'istanza Conf.  \n\n\n\n\n\n\naddDashboard(options)\n : aggiunge una dashboard\n\n\n@param options : opzioni per l'aggiunta di una dashboard\n\n\n\n\n\n\nrenderViews()\n : renderizza tutte le view prensenti aggiunte precedentemente\n\n\nrenderView(key, callback)\n : renderizza la view con chiave key e chiama la callback se passata\n\n\n@param key : chiave della view da visualizzare\n\n\n@param callback : opzionale, se passata viene chiamata quando la view e' stata visualizzata\n\n\n\n\n\n\ngetView(key)\n : restituisce la view di chiave key, se esiste, altrimenti null.\n\n\n@param key : chiave view da prendere\n\n\n\n\n\n\ngetViews()\n : ritorna il vettore di tutte le views presenti in App.\n\n\ngetKeyFromId(htmlId)\n : se il container html della view ha un id allora possiamo recuperare la chiave\ndella view tramite questo id.\n\n\n@param htmlId : id html del container che contiene la view. \n\n\n@return : stringa che contiene la key della view\n\n\n\n\n\n\ngetViewById(htmlId)\n : sel il container html della view ha un id allora possiamo recuperare direttamente la\nview tramite questo id.\n\n\n@param htmlId : id html del container che contiene la view. \n\n\n@return : oggetto view\n\n\n\n\n\n\nremoveViewById(htmlId)\n : rimuove la view associata al container con quell'id.\n\n\n@param htmlId : id html del container\n\n\n\n\n\n\nremoveAllViews()\n : rimuove tutte le view istanziate.\n\n\nremoveView(key)\n : rimuove la view associate alle key passata\n\n\n@param key : chiave view che vogliamo cancellare \n\n\n\n\n\n\nrenderViewById(htmlId,callback)\n : renderizza una view che id html passato. Poi chiama la callback, se passata.\n\n\n@param htmlId : id html del container che contiene la view\n\n\n@param callback : opzionale, funziona da chiamare quando la view viene renderizzata\n\n\n\n\n\n\n\n\ngetHtmlConf\n = function (jQe) \n\n\n\n\n\n\nparse\n = function (container)  /*\n\n                                    * esegue il parse di un container html e istanzia tutte le views trovate\n                                    * @param container\n                                    * @returns {Array} di views\n                                    \n/\n\n\n\n\n\n\nviewModal(title,ViewConf,callback)\n: visualizza una view in modal.\n\n\n\n\n@param title : 'Titolo della modale',\n\n\n@param ViewConf : configurazione della view,\n\n\n@param callback : callback che verr\u00e0 richiamata quando la modale sar\u00e0 chiusa\n\n\n@return la key id della view presente nella modale \n\n\n\n\n\n\ndashboardModal\n = function (title,dash,callback) \n\n\ngetConf\n = function (model,action,role) \n\n\ntranslate\n = function (key,plural,params) \n\n\ntranslateIfExist\n = function (key,plural,params) \n\n\ngetLocale\n = function () \n\n\nwaitStart\n = function (msg,container) \n\n\nwaitEnd\n = function (container) \n\n\nmessageDialog\n = function (body,callbacks) - crea una message dialog e ne ritorna l'oggetto\n\n\nerrorDialog\n = function (body,callbacks) - crea una message dialog e ne ritorna l'oggetto\n\n\nconfirmDialog\n = function (body,callbacks)\n\n\ncustomDialog\n = function (content,callbacks) \n\n\nprogressDialog\n = function (content,callbacks)", 
            "title": "App"
        }, 
        {
            "location": "/app/#app", 
            "text": "App \u00e8 la classe per la gestione della pagina. Permette di aggiungere e cancellare view, \ncreare dashboards ecc.", 
            "title": "App"
        }, 
        {
            "location": "/app/#proprieta", 
            "text": "resources  : [] - vettore di risorse iniziali della pagina da caricare   pluginsPath  : '/cupparis4/plugins/' - directory base dove cercare i plugins da caricare  log  = null  : oggetto per il log dei messaggi, viene istanziato nel costruttore dell'app.  show_log  : false - se visualizzare o no i messaggi in console del browser  mobile  : false - se la libreria viene istanziata usu un mobile,  locale  : 'it' - locale di default, viene utilizzato per la configurazione delle date", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/app/#metodi", 
            "text": "getResources()  : vettore di tutte le risorse caricate dalla pagina  init(options,callback)  : metodo iniziale da chiamare subito dopo la new per inizializzare\nl'applicazione  loadResource(fileName, callback)  : carica una risorsa script o css dinamicamente partendo dalla \ncartella pluginsPath. quando lo script e' stato caricato chiama la callback  @param fileName : path compreso dal filename della risorsa da caricare  @param callback : funzione da richiamare al fine del caricamento    loadResources(resources, callback)  : carica un vettore di risorse, al fine caricamento chiama la callback  @param resources : vettore risorse da caricare  @param callback : funzione da richiamare dopo il caricamento di tutte le risorse    addView(options)  : aggiunge una view, se in options la propriet\u00e0 autorender=true la visualizza.  @param options : configurazione della view, deve essere un'istanza Conf.      addDashboard(options)  : aggiunge una dashboard  @param options : opzioni per l'aggiunta di una dashboard    renderViews()  : renderizza tutte le view prensenti aggiunte precedentemente  renderView(key, callback)  : renderizza la view con chiave key e chiama la callback se passata  @param key : chiave della view da visualizzare  @param callback : opzionale, se passata viene chiamata quando la view e' stata visualizzata    getView(key)  : restituisce la view di chiave key, se esiste, altrimenti null.  @param key : chiave view da prendere    getViews()  : ritorna il vettore di tutte le views presenti in App.  getKeyFromId(htmlId)  : se il container html della view ha un id allora possiamo recuperare la chiave\ndella view tramite questo id.  @param htmlId : id html del container che contiene la view.   @return : stringa che contiene la key della view    getViewById(htmlId)  : sel il container html della view ha un id allora possiamo recuperare direttamente la\nview tramite questo id.  @param htmlId : id html del container che contiene la view.   @return : oggetto view    removeViewById(htmlId)  : rimuove la view associata al container con quell'id.  @param htmlId : id html del container    removeAllViews()  : rimuove tutte le view istanziate.  removeView(key)  : rimuove la view associate alle key passata  @param key : chiave view che vogliamo cancellare     renderViewById(htmlId,callback)  : renderizza una view che id html passato. Poi chiama la callback, se passata.  @param htmlId : id html del container che contiene la view  @param callback : opzionale, funziona da chiamare quando la view viene renderizzata     getHtmlConf  = function (jQe)     parse  = function (container)  /* \n                                    * esegue il parse di un container html e istanzia tutte le views trovate\n                                    * @param container\n                                    * @returns {Array} di views\n                                     /    viewModal(title,ViewConf,callback) : visualizza una view in modal.   @param title : 'Titolo della modale',  @param ViewConf : configurazione della view,  @param callback : callback che verr\u00e0 richiamata quando la modale sar\u00e0 chiusa  @return la key id della view presente nella modale     dashboardModal  = function (title,dash,callback)   getConf  = function (model,action,role)   translate  = function (key,plural,params)   translateIfExist  = function (key,plural,params)   getLocale  = function ()   waitStart  = function (msg,container)   waitEnd  = function (container)   messageDialog  = function (body,callbacks) - crea una message dialog e ne ritorna l'oggetto  errorDialog  = function (body,callbacks) - crea una message dialog e ne ritorna l'oggetto  confirmDialog  = function (body,callbacks)  customDialog  = function (content,callbacks)   progressDialog  = function (content,callbacks)", 
            "title": "Metodi"
        }, 
        {
            "location": "/esempi_views/", 
            "text": "View che lavorano con liste di dati\n\n\nPer avere un comporamento simil ad un linguaggio ad oggetti..\nOgni volta che si ridefinisce un metodo della Component \u00e8\npossibile chiamare il metodo padre attaverso la convenzione this.super\n\n\n- Lista con dati json\n\n\n// definisco i miei dati\nvar mydata = {\n    value :  [\n        {\n            text : 100,\n            intero : '1',\n            stringa : 'prova'\n        },\n        {\n            text : 2,\n            intero : '1',\n            stringa : 'fprova2'\n        },\n    ]\n}\n\n// creo una configurazione per la view lista\nvar myList = new ConfList({\n    fields : ['stringa','intero','text'], // campi che voglio visualizzare\n    container : '#test_container1',  // container dove verr\u00e0 disegnata la view\n    modelName : 'dummy', // modelname dummy, uso sempre questo per i dati dinamici\n    routeName : null, // nessuna route verso il server i dati ci sono gi\u00e0\n    pagination : false, // se voglio o no il navigatore per la paginazione\n    actions : [], //azioni che si possono fare sui singoli record  o lista\n    data : mydata // dati della lista\n});\n\n// aggiungo la lista\nvar vkey = app.addView(myList);\n// la renderizzo \napp.renderView(vkey);\n\n\n\n\n\n Vai \n\n\n- Lista con dati json con intestazioni header custom\n\n\n// definisco i miei dati\nvar mydata = {\n    value :  [\n        {\n            text : 100,\n            intero : '1',\n            stringa : 'prova'\n        },\n        {\n            text : 2,\n            intero : '1',\n            stringa : 'fprova2'\n        },\n    ]\n}\n\n// creo una configurazione per la view lista\nvar myList = new ConfList({\n    fields : ['stringa','intero','text'], // campi che voglio visualizzare\n    container : '#test_container1',  // container dove verr\u00e0 disegnata la view\n    modelName : 'dummy', // modelname dummy, uso sempre questo per i dati dinamici\n    routeName : null, // nessuna route verso il server, i dati ci sono gi\u00e0\n    pagination : false, // se voglio o no il navigatore per la paginazione\n    actions : [], //azioni che si possono fare sui singoli record  o lista\n    data : mydata, // dati della lista\n    labels : {\n        'dummy.stringa.label' : 'campo stringa'\n    }\n});\n\n// aggiungo la lista\nvar vkey = app.addView(myList);\n// la renderizzo \napp.renderView(vkey);\n\n\n\n\nViews che lavorano con singolo record\n\n\n- Vista in modalit\u00e0 edit con azione ActionSave ridefinita\n\n\n\n// definisco i miei dati che propongo nella view. Un solo record\nvar mydata =  {\n    value : {  // valori del mio ipotetico modello dati\n        text : \ntesto \n,\n        intero : 1,\n        stringa : 'prova'\n    },\n    metadata : {  // metadata dei miei valori, in questo caso il campo intero pu\u00f2 avere solo 2 valori\n        intero : {\n            domainValues : {\n                0 : 'Zero',\n                1 : 'Uno'\n            }\n        }\n    }\n}\n// definisco la configurazione della mia vista\nvar myList = new ConfInsert({\n    fields : ['stringa','intero','text'],  //campi che voglio visualizzare\n    container : '#test_container1',        // container dove verr\u00e0 disegnata la vista\n    modelName : 'dummy',                    // model name per dati dinamici\n    routeName : null,                       // nessuna route verso il server, i dati ci sono gi\u00e0\n    actions : ['ActionSave','ActionMia'],   //azione save presente nella libreria\n    data : mydata,\n    fields_config : {                       // configurazione campi\n        intero : {                          // dico che il campo intero e' una select\n            type : 'select'\n        },\n        text : {\n            type : 'textarea'\n        }\n    },\n    custom_actions : {   // ridefiniamo l'azione ActionSave presente in libreria per inserire il nostro comportamento\n        ActionSave : ActionSave.extend({\n            execute : function () {\n                alert(JSON.stringify(this.view.getFormData()))\n            }\n        })  \n    },\n    autorender : true, // dico che la view la voglio renderizzare appena l'aggiungo\n});\napp.addView(myList);\n\n\n\n\n\n- Vista in modalit\u00e0 edit con azione custom e template custom\n\n\n\n// definisco i miei dati che propongo nella view. Un solo record\nvar mydata =  {\n    value : {  // valori del mio ipotetico modello dati\n        text : \ntesto \n,\n        intero : 1,\n        stringa : 'prova'\n    },\n    metadata : {  // metadata dei miei valori, in questo caso il campo intero pu\u00f2 avere solo 2 valori\n        intero : {\n            domainValues : {\n                0 : 'Zero',\n                1 : 'Uno'\n            }\n        }\n    }\n}\n// definisco la configurazione della mia vista\nvar myList = new ConfInsert({\n    fields : ['stringa','intero','text'],  //campi che voglio visualizzare\n    container : '#test_container1',        // container dove verr\u00e0 disegnata la vista\n    modelName : 'dummy',                    // model name per dati dinamici\n    routeName : null,                       // nessuna route verso il server, i dati ci sono gi\u00e0\n    actions : ['ActionMia'],               //azione save presente nella libreria\n    data : mydata,\n    fields_config : {                       // configurazione campi\n        intero : {                          // dico che il campo intero e' una select\n            type : 'select'\n        },\n        text : {\n            type : 'textarea'\n        }\n    },\n    custom_actions : {\n        ActionMia : RecordAction.extend({\n            text : 'mia',\n            title : 'azione custom',\n            execute : function () {\n                alert(JSON.stringify(this.view.getFormData()))\n            }\n        })  \n    },\n    labels : {\n        'app.mialabel' : 'Questa e\\' una vista con template personale rispetto a quello standard',  \n    },\n    template : function () {\n        return `\n        \ndiv class=\nwell\n data-edit-main\n\n            \ndiv data-alert class=\nalert alert-success hide\n/div\n\n            \ndiv data-label=\napp.mialabel\n/div\n\n            \nform name=\ndata_form\n class=\nmodel-edit\n\n                \ndiv data-hidden_fields\n\n                    \n!-- qui dentro verrano disegnati i renders speciali hidden --\n\n                \n/div\n\n                \ndiv data-view_elements\n\n                    \n!-- qui dentro verrano disegnati i renders --\n\n                \n/div\n\n                \ndiv data-view_action \n\n                    \n!-- qui dentro verrano disegnate le azioni definite --\n\n                \n/div\n\n            \n/form\n\n        \n/div\n\n    `\n    },\n    autorender : true, // dico che la view la voglio renderizzare appena l'aggiungo\n});\napp.addView(myList);", 
            "title": "Esempi Views"
        }, 
        {
            "location": "/esempi_views/#view-che-lavorano-con-liste-di-dati", 
            "text": "Per avere un comporamento simil ad un linguaggio ad oggetti..\nOgni volta che si ridefinisce un metodo della Component \u00e8\npossibile chiamare il metodo padre attaverso la convenzione this.super", 
            "title": "View che lavorano con liste di dati"
        }, 
        {
            "location": "/esempi_views/#-lista-con-dati-json", 
            "text": "// definisco i miei dati\nvar mydata = {\n    value :  [\n        {\n            text : 100,\n            intero : '1',\n            stringa : 'prova'\n        },\n        {\n            text : 2,\n            intero : '1',\n            stringa : 'fprova2'\n        },\n    ]\n}\n\n// creo una configurazione per la view lista\nvar myList = new ConfList({\n    fields : ['stringa','intero','text'], // campi che voglio visualizzare\n    container : '#test_container1',  // container dove verr\u00e0 disegnata la view\n    modelName : 'dummy', // modelname dummy, uso sempre questo per i dati dinamici\n    routeName : null, // nessuna route verso il server i dati ci sono gi\u00e0\n    pagination : false, // se voglio o no il navigatore per la paginazione\n    actions : [], //azioni che si possono fare sui singoli record  o lista\n    data : mydata // dati della lista\n});\n\n// aggiungo la lista\nvar vkey = app.addView(myList);\n// la renderizzo \napp.renderView(vkey);   Vai", 
            "title": "- Lista con dati json"
        }, 
        {
            "location": "/esempi_views/#-lista-con-dati-json-con-intestazioni-header-custom", 
            "text": "// definisco i miei dati\nvar mydata = {\n    value :  [\n        {\n            text : 100,\n            intero : '1',\n            stringa : 'prova'\n        },\n        {\n            text : 2,\n            intero : '1',\n            stringa : 'fprova2'\n        },\n    ]\n}\n\n// creo una configurazione per la view lista\nvar myList = new ConfList({\n    fields : ['stringa','intero','text'], // campi che voglio visualizzare\n    container : '#test_container1',  // container dove verr\u00e0 disegnata la view\n    modelName : 'dummy', // modelname dummy, uso sempre questo per i dati dinamici\n    routeName : null, // nessuna route verso il server, i dati ci sono gi\u00e0\n    pagination : false, // se voglio o no il navigatore per la paginazione\n    actions : [], //azioni che si possono fare sui singoli record  o lista\n    data : mydata, // dati della lista\n    labels : {\n        'dummy.stringa.label' : 'campo stringa'\n    }\n});\n\n// aggiungo la lista\nvar vkey = app.addView(myList);\n// la renderizzo \napp.renderView(vkey);", 
            "title": "- Lista con dati json con intestazioni header custom"
        }, 
        {
            "location": "/esempi_views/#views-che-lavorano-con-singolo-record", 
            "text": "", 
            "title": "Views che lavorano con singolo record"
        }, 
        {
            "location": "/esempi_views/#-vista-in-modalita-edit-con-azione-actionsave-ridefinita", 
            "text": "// definisco i miei dati che propongo nella view. Un solo record\nvar mydata =  {\n    value : {  // valori del mio ipotetico modello dati\n        text :  testo  ,\n        intero : 1,\n        stringa : 'prova'\n    },\n    metadata : {  // metadata dei miei valori, in questo caso il campo intero pu\u00f2 avere solo 2 valori\n        intero : {\n            domainValues : {\n                0 : 'Zero',\n                1 : 'Uno'\n            }\n        }\n    }\n}\n// definisco la configurazione della mia vista\nvar myList = new ConfInsert({\n    fields : ['stringa','intero','text'],  //campi che voglio visualizzare\n    container : '#test_container1',        // container dove verr\u00e0 disegnata la vista\n    modelName : 'dummy',                    // model name per dati dinamici\n    routeName : null,                       // nessuna route verso il server, i dati ci sono gi\u00e0\n    actions : ['ActionSave','ActionMia'],   //azione save presente nella libreria\n    data : mydata,\n    fields_config : {                       // configurazione campi\n        intero : {                          // dico che il campo intero e' una select\n            type : 'select'\n        },\n        text : {\n            type : 'textarea'\n        }\n    },\n    custom_actions : {   // ridefiniamo l'azione ActionSave presente in libreria per inserire il nostro comportamento\n        ActionSave : ActionSave.extend({\n            execute : function () {\n                alert(JSON.stringify(this.view.getFormData()))\n            }\n        })  \n    },\n    autorender : true, // dico che la view la voglio renderizzare appena l'aggiungo\n});\napp.addView(myList);", 
            "title": "- Vista in modalit\u00e0 edit con azione ActionSave ridefinita"
        }, 
        {
            "location": "/esempi_views/#-vista-in-modalita-edit-con-azione-custom-e-template-custom", 
            "text": "// definisco i miei dati che propongo nella view. Un solo record\nvar mydata =  {\n    value : {  // valori del mio ipotetico modello dati\n        text :  testo  ,\n        intero : 1,\n        stringa : 'prova'\n    },\n    metadata : {  // metadata dei miei valori, in questo caso il campo intero pu\u00f2 avere solo 2 valori\n        intero : {\n            domainValues : {\n                0 : 'Zero',\n                1 : 'Uno'\n            }\n        }\n    }\n}\n// definisco la configurazione della mia vista\nvar myList = new ConfInsert({\n    fields : ['stringa','intero','text'],  //campi che voglio visualizzare\n    container : '#test_container1',        // container dove verr\u00e0 disegnata la vista\n    modelName : 'dummy',                    // model name per dati dinamici\n    routeName : null,                       // nessuna route verso il server, i dati ci sono gi\u00e0\n    actions : ['ActionMia'],               //azione save presente nella libreria\n    data : mydata,\n    fields_config : {                       // configurazione campi\n        intero : {                          // dico che il campo intero e' una select\n            type : 'select'\n        },\n        text : {\n            type : 'textarea'\n        }\n    },\n    custom_actions : {\n        ActionMia : RecordAction.extend({\n            text : 'mia',\n            title : 'azione custom',\n            execute : function () {\n                alert(JSON.stringify(this.view.getFormData()))\n            }\n        })  \n    },\n    labels : {\n        'app.mialabel' : 'Questa e\\' una vista con template personale rispetto a quello standard',  \n    },\n    template : function () {\n        return `\n         div class= well  data-edit-main \n             div data-alert class= alert alert-success hide /div \n             div data-label= app.mialabel /div \n             form name= data_form  class= model-edit \n                 div data-hidden_fields \n                     !-- qui dentro verrano disegnati i renders speciali hidden -- \n                 /div \n                 div data-view_elements \n                     !-- qui dentro verrano disegnati i renders -- \n                 /div \n                 div data-view_action  \n                     !-- qui dentro verrano disegnate le azioni definite -- \n                 /div \n             /form \n         /div \n    `\n    },\n    autorender : true, // dico che la view la voglio renderizzare appena l'aggiungo\n});\napp.addView(myList);", 
            "title": "- Vista in modalit\u00e0 edit con azione custom e template custom"
        }
    ]
}