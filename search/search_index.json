{
    "docs": [
        {
            "location": "/", 
            "text": "Cupparijs4 (Versione Alpha)\n\n\nLibreria CRUD per la realizzazione di interfacce professionali basate su chiamate rest con \nmetodi CREATE,READ,UPDATE,DELETE. Il protocollo utilizzato per la comunicazione \u00e8 il json. \nLa libreria utilizza il concetto di componente. La pagina \u00e8 formata da componenti ed esse\nsono gestite attraverso l'oggetto principale \nApp\n. \nIl concetto di base nella libreria \u00e8 quello di creare una logica e una grafica delle componenti\nin modo che ci sia una versione base implementata dalla libreria, ma che sia customizzabile\na piacere nella propria applicazione sia come layout grafico sia come logica.\n\n\nComponenti base\n\n\nL'oggetto astratto principale che tutte le componenti presenti nella libreria si chiama  \nComponent\n.\nIn una visione top-down elenchiamo le principali componenti presenti nella libreria:\n\n\n- Dashboards\n\n\nLa componente dashboard \u00e8 stata create per la la gestione di pi\u00f9 viste che interagiscono o no tra di loro.\nIn questo modo si possono creare dashboard specifiche per le nostre applicazioni.\n\nDettaglio Dashboards\n\n\n- Views\n\n\nLa componente \nView\n rappresenta una collezione di dati che possono essere passati manualmente o \nattraverso un server, utilizzando le route che usano le convenzioni REST. A questi dati \nvengono associati dei componenti di tipo \nRender\n. \n\nDettaglio Views\n\n\n- Renders\n\n\nUna componente \nRender\n si prende il compito di gestire le interazione utenti sul dato secondo controlli standard html o plugins \ndi varia complessit\u00e0.\n\n\nLa gestione del componente \nRender\n \u00e8 stata differenziata dal modo in cui esso pu\u00f2 essere gestito. \nI modi con cui pu\u00f2 essere gestito sono:\n\n\n\n\nVIEW : In questa modalit\u00e0 il componente render si preoccupa di visualizzare i dati, \nnon \u00e8 prevista nessuna modifica.\n\n\nEDIT : In questa modalit\u00e0 il componente render oltre a visualizzare i dati, deve prevederne\nla modifica\n\n\nSEARCH: In questa modalit\u00e0 il componente deve gestire l'input dell'utente e l'operatore della search normalmente\nnascosto\n\n\n\n\nQueste modalit\u00e0 sono nate per favorire una migliore customizzazione dei componenti render\nin base al contesto in cui vengno utilizzati.\n\n\nDettaglio Renders\n\n\n- Templates\n\n\nIl componente \nTemplate\n permette di costruire un template html di contorno per l'oggetto \nRender\n. \nViene utilizzato dalle views e permette di poter customizzare alcuni campi che vogliamo adornare con varie\ninformazioni e che non \u00e8 detto che valgano per tutti gli altri Render.\n\nDettaglio Templates\n\n\n- Actions\n\n\nIl componente \nAction\n \u00e8 nato per la gestione delle azioni vogliamo realizzare su di una vista.\n\nDettaglio Actions\n\n\nConfs\n\n\nSono le classi di configurazioni iniziali per le istanze delle varie views. Questo permette di avere delle \nconfigurazioni globali su alcuni campi delle nostre viste senza definirli ogni volta.\n\n\nRoutes\n\n\nLa componente \nRoute\n incapsula l'interazione con il server sia per il recupero sia per la spedizione \ndei dati. In genere viene utilizzata da una view e dalle azioni.\n\nDettaglio Routes\n\n\nServer\n\n\nClasse che rappresenta un wrapper delle chiamate ajax di jquery, con alcune estensioni.\n\nDettaglio Server\n\n\nApp\n\n\nLa componente \nApp\n rappresenta l'oggetto per la gestione della pagina e delle sue varie componenti \njavascript.\n\nDettaglio App", 
            "title": "Home"
        }, 
        {
            "location": "/#cupparijs4-versione-alpha", 
            "text": "Libreria CRUD per la realizzazione di interfacce professionali basate su chiamate rest con \nmetodi CREATE,READ,UPDATE,DELETE. Il protocollo utilizzato per la comunicazione \u00e8 il json. \nLa libreria utilizza il concetto di componente. La pagina \u00e8 formata da componenti ed esse\nsono gestite attraverso l'oggetto principale  App . \nIl concetto di base nella libreria \u00e8 quello di creare una logica e una grafica delle componenti\nin modo che ci sia una versione base implementata dalla libreria, ma che sia customizzabile\na piacere nella propria applicazione sia come layout grafico sia come logica.", 
            "title": "Cupparijs4 (Versione Alpha)"
        }, 
        {
            "location": "/#componenti-base", 
            "text": "L'oggetto astratto principale che tutte le componenti presenti nella libreria si chiama   Component .\nIn una visione top-down elenchiamo le principali componenti presenti nella libreria:", 
            "title": "Componenti base"
        }, 
        {
            "location": "/#-dashboards", 
            "text": "La componente dashboard \u00e8 stata create per la la gestione di pi\u00f9 viste che interagiscono o no tra di loro.\nIn questo modo si possono creare dashboard specifiche per le nostre applicazioni. Dettaglio Dashboards", 
            "title": "- Dashboards"
        }, 
        {
            "location": "/#-views", 
            "text": "La componente  View  rappresenta una collezione di dati che possono essere passati manualmente o \nattraverso un server, utilizzando le route che usano le convenzioni REST. A questi dati \nvengono associati dei componenti di tipo  Render .  Dettaglio Views", 
            "title": "- Views"
        }, 
        {
            "location": "/#-renders", 
            "text": "Una componente  Render  si prende il compito di gestire le interazione utenti sul dato secondo controlli standard html o plugins \ndi varia complessit\u00e0.  La gestione del componente  Render  \u00e8 stata differenziata dal modo in cui esso pu\u00f2 essere gestito. \nI modi con cui pu\u00f2 essere gestito sono:   VIEW : In questa modalit\u00e0 il componente render si preoccupa di visualizzare i dati, \nnon \u00e8 prevista nessuna modifica.  EDIT : In questa modalit\u00e0 il componente render oltre a visualizzare i dati, deve prevederne\nla modifica  SEARCH: In questa modalit\u00e0 il componente deve gestire l'input dell'utente e l'operatore della search normalmente\nnascosto   Queste modalit\u00e0 sono nate per favorire una migliore customizzazione dei componenti render\nin base al contesto in cui vengno utilizzati.  Dettaglio Renders", 
            "title": "- Renders"
        }, 
        {
            "location": "/#-templates", 
            "text": "Il componente  Template  permette di costruire un template html di contorno per l'oggetto  Render . \nViene utilizzato dalle views e permette di poter customizzare alcuni campi che vogliamo adornare con varie\ninformazioni e che non \u00e8 detto che valgano per tutti gli altri Render. Dettaglio Templates", 
            "title": "- Templates"
        }, 
        {
            "location": "/#-actions", 
            "text": "Il componente  Action  \u00e8 nato per la gestione delle azioni vogliamo realizzare su di una vista. Dettaglio Actions", 
            "title": "- Actions"
        }, 
        {
            "location": "/#confs", 
            "text": "Sono le classi di configurazioni iniziali per le istanze delle varie views. Questo permette di avere delle \nconfigurazioni globali su alcuni campi delle nostre viste senza definirli ogni volta.", 
            "title": "Confs"
        }, 
        {
            "location": "/#routes", 
            "text": "La componente  Route  incapsula l'interazione con il server sia per il recupero sia per la spedizione \ndei dati. In genere viene utilizzata da una view e dalle azioni. Dettaglio Routes", 
            "title": "Routes"
        }, 
        {
            "location": "/#server", 
            "text": "Classe che rappresenta un wrapper delle chiamate ajax di jquery, con alcune estensioni. Dettaglio Server", 
            "title": "Server"
        }, 
        {
            "location": "/#app", 
            "text": "La componente  App  rappresenta l'oggetto per la gestione della pagina e delle sue varie componenti \njavascript. Dettaglio App", 
            "title": "App"
        }, 
        {
            "location": "/component/", 
            "text": "Component\n\n\nLa classe principale di tutte le componenti grafiche \nComponent\n, definisce il comportamento\ngenerale che un componente deve avere nella visualizzazione di un html e dati associati\npi\u00f9 tutta la logica per la gestione del dato e delle interazioni utente.\n\n\nLa classe ha un metodo \ntemplate\n che ritorna html del componente. Il template viene marcato\ncon dei marcatori (attributi di tag dal formato data-{marcatore}). Avere questi marcatori permette\nla possibilit\u00e0 di stravolgere completamente il template di base avendo solo l'obbligo di mantenere\nquesti marcatori per la costruzione dell'html finale.\n\n\nNell'oggetto componente \u00e8 stato inserito anche la possibilit\u00e0 di avere dei traits che ne permette l'estensione\ncon funzionalit\u00e0 proprie della nostra applicazione senza dover per forza ridefinire la classe componente. \nI traits sono stati differenziati in traits che agiscono sui templates e traits generali per l'aggiunta di \nfunzionalit\u00e0 custom.\n\n\nPropriet\u00e0\n\n\n\n\nclassName\n : 'Component'. Questa propriet\u00e0 \u00e8 stata introdotta a causa della possibilit\u00e0 di poter estendere \nle classi con un trucchetto e che rende impossibile saper a runtime in quale classe ci si trovi.\n\n\ndefaultTraitsTemplate\n : ['TraitTranslate','TraitTemplate','TraitPlaceholder'], vettore di traits definiti di default\nin particolare :\n\n\nTraitTranslate\n ha il compito per la sostituzione di tutti i marcatori data-label presenti nel template\n\n\nTraitTemplate\n\n\nTraitPlaceholder\n\n\n\n\n\n\ntraitsTemplate\n : [] vettore di eventuali altri traits custom che vogliamo siano eseguiti subito dopo avere visualizzato il template\n\n\ntraits\n : [] traits per estendere funzionalit\u00e0 del component senza ridefinirne la classe.\n\n\ncontainer\n : null,\n\n\n\n\nMetodi\n\n\n\n\n\n\ninit : function (attributes)\n: costruttore, attributes rappresenta gli attributi\nche si vogliono sostituire, \u00e8 possibile passare anche i metodi per ridefinire alcuni \ncomportamenti.\n\n\n\n\n\n\nattrs\n : function (attrs) : permettere di ridefinire propriet\u00e0 o metodi dell'oggetto\n\n\n\n\n\n\ntemplate\n : function() : metodo che restituisce il template html del componente\n\n\n\n\n\n\ngetTemplate\n : function () : metodo che un oggetto jquery('div') che wrappa il template\n del componente.\n\n\n\n\n\n\nhtml\n :  function () ritorna l'html puntato dalla propriet\u00e0 container del componente\n\n\n\n\n\n\njQe : function (selector)\n : ritorna l'oggetto jquery associato al container del componente\n\n\n\n\n\n\nbeforeRender\n : function (callback) : viene chiamata prima di eseguire il render, se si vogliono\n fare di check prima di iniettare l'html del richiamare la callback per il ritorno.\n\n\n\n\n\n\nrender\n : function (callback): metodo dove viene iniettato nel container l'html del componente in \nbase alle proprie politiche.\n\n\n\n\n\n\nafterRender\n : function (callback) : metodo che viene chiamato dopo il metodo render.\n\n\n\n\n\n\nbeforeFinalize\n : function (callback) : metodo per il proprio codice custom chiamato prima del finalize\n\n\n\n\nfinalize\n : function (callback) : metodo per aggiungere eventi o istanziare plugins \n\n\nafterFinalize\n : function (callback) : metodo custom per eventuali esigenze su oggetti modificati\n\n\n_prepareContainer\n : function () : scrive l'html che viene restituita dal metodo template dentro il container.\nSe il componente ne ha uno altrimenti viene creato un oggetto jquery contentente l'html.\n\n\n\n\n_executeTraitsTemplate\n : function () metodo eseguito dopo che si \u00e8 scritto l'html. Utilizzare questo metodo\nse si vogliono eseguire dei particolari filtri con il concetto di trait\n\n\n\n\n\n\n_loadExternalResources\n : function (callback) \ncarica eventuali risorse esterne prima di far partire il render del component\n@param callback : funzione di ritorno \n\n\n\n\n\n\ndraw\n : function (callback) : disegna l'html del componente e poi richiama la callback\nIl metodo draw esegue in seguenza diversi metodi che vengono richiamati attraverso la\ncallback. Questo modo di eseguire i metodi permette di fare anche delle chiamate\nasincrone e aspettare il termine delle chiamate prima di procedere. \n\n\n\n\n_\nprepareContainer\n ;\n\n\n_\nloadExternalResources\n : function (callback);\n\n\nbeforeRender\n : function (callback)\n\n\nrender\n : function (callback)\n\n\nafterRender\n : function (callback)\n\n\nbeforeFinalize\n : function (callback)\n\n\nfinalize\n : function (callback)\n\n\nafterFinalize\n : function (callback)\n\n\n\n\n\n\n\n\nComponent.parseHtml\n = function (templateString) metodo statico che crea un oggetto jquery eseguendo\nil parse della stringa passata\n\n\nComponent.uid\n = 0;\n\n\nComponent.newID\n = function () metodo statico che ritorna un id univoco fomato da 'c_'+ un intero \nincrementale", 
            "title": "Component"
        }, 
        {
            "location": "/component/#component", 
            "text": "La classe principale di tutte le componenti grafiche  Component , definisce il comportamento\ngenerale che un componente deve avere nella visualizzazione di un html e dati associati\npi\u00f9 tutta la logica per la gestione del dato e delle interazioni utente.  La classe ha un metodo  template  che ritorna html del componente. Il template viene marcato\ncon dei marcatori (attributi di tag dal formato data-{marcatore}). Avere questi marcatori permette\nla possibilit\u00e0 di stravolgere completamente il template di base avendo solo l'obbligo di mantenere\nquesti marcatori per la costruzione dell'html finale.  Nell'oggetto componente \u00e8 stato inserito anche la possibilit\u00e0 di avere dei traits che ne permette l'estensione\ncon funzionalit\u00e0 proprie della nostra applicazione senza dover per forza ridefinire la classe componente. \nI traits sono stati differenziati in traits che agiscono sui templates e traits generali per l'aggiunta di \nfunzionalit\u00e0 custom.", 
            "title": "Component"
        }, 
        {
            "location": "/component/#proprieta", 
            "text": "className  : 'Component'. Questa propriet\u00e0 \u00e8 stata introdotta a causa della possibilit\u00e0 di poter estendere \nle classi con un trucchetto e che rende impossibile saper a runtime in quale classe ci si trovi.  defaultTraitsTemplate  : ['TraitTranslate','TraitTemplate','TraitPlaceholder'], vettore di traits definiti di default\nin particolare :  TraitTranslate  ha il compito per la sostituzione di tutti i marcatori data-label presenti nel template  TraitTemplate  TraitPlaceholder    traitsTemplate  : [] vettore di eventuali altri traits custom che vogliamo siano eseguiti subito dopo avere visualizzato il template  traits  : [] traits per estendere funzionalit\u00e0 del component senza ridefinirne la classe.  container  : null,", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/component/#metodi", 
            "text": "init : function (attributes) : costruttore, attributes rappresenta gli attributi\nche si vogliono sostituire, \u00e8 possibile passare anche i metodi per ridefinire alcuni \ncomportamenti.    attrs  : function (attrs) : permettere di ridefinire propriet\u00e0 o metodi dell'oggetto    template  : function() : metodo che restituisce il template html del componente    getTemplate  : function () : metodo che un oggetto jquery('div') che wrappa il template\n del componente.    html  :  function () ritorna l'html puntato dalla propriet\u00e0 container del componente    jQe : function (selector)  : ritorna l'oggetto jquery associato al container del componente    beforeRender  : function (callback) : viene chiamata prima di eseguire il render, se si vogliono\n fare di check prima di iniettare l'html del richiamare la callback per il ritorno.    render  : function (callback): metodo dove viene iniettato nel container l'html del componente in \nbase alle proprie politiche.    afterRender  : function (callback) : metodo che viene chiamato dopo il metodo render.    beforeFinalize  : function (callback) : metodo per il proprio codice custom chiamato prima del finalize   finalize  : function (callback) : metodo per aggiungere eventi o istanziare plugins   afterFinalize  : function (callback) : metodo custom per eventuali esigenze su oggetti modificati  _prepareContainer  : function () : scrive l'html che viene restituita dal metodo template dentro il container.\nSe il componente ne ha uno altrimenti viene creato un oggetto jquery contentente l'html.   _executeTraitsTemplate  : function () metodo eseguito dopo che si \u00e8 scritto l'html. Utilizzare questo metodo\nse si vogliono eseguire dei particolari filtri con il concetto di trait    _loadExternalResources  : function (callback) \ncarica eventuali risorse esterne prima di far partire il render del component\n@param callback : funzione di ritorno     draw  : function (callback) : disegna l'html del componente e poi richiama la callback\nIl metodo draw esegue in seguenza diversi metodi che vengono richiamati attraverso la\ncallback. Questo modo di eseguire i metodi permette di fare anche delle chiamate\nasincrone e aspettare il termine delle chiamate prima di procedere.    _ prepareContainer  ;  _ loadExternalResources  : function (callback);  beforeRender  : function (callback)  render  : function (callback)  afterRender  : function (callback)  beforeFinalize  : function (callback)  finalize  : function (callback)  afterFinalize  : function (callback)     Component.parseHtml  = function (templateString) metodo statico che crea un oggetto jquery eseguendo\nil parse della stringa passata  Component.uid  = 0;  Component.newID  = function () metodo statico che ritorna un id univoco fomato da 'c_'+ un intero \nincrementale", 
            "title": "Metodi"
        }, 
        {
            "location": "/dashboards/", 
            "text": "Le dashboards sono composizioni di views. In questo componente si inserisce tutta la logica \ndi interazioni tra le views che contiene e le loro dipendendenze.\n\n\nDashboard\n\n\nDashboard\n \u00e8 la classe principale da cui ereditano tutte le dashboard che andremo\na creare. Estende la class \nComponent\n\n\nPropriet\u00e0\n\n\n\n\ncontainer\n       : null - rappresenta il container di destinazione dove disegnare le views\n\n\nclassName\n       : 'Dashboard' - serve per poter definire a runtime la classe in cui ci si trova\n\n\nmodelName\n       : null - il modello dei dati che vogliamo gestire,\n\n\nviewKeys\n        : [] - array delle key associate ad ogni view\n\n\nlabelContext\n    : null - contesto nel reperimento delle traduzioni delle label\n\n\n\n\nDashboards implementate.\n\n\nLa libreria mette a disposizione alcune dashboard di uso comune, possono essere \nridefinite per le proprie esigenze oppure se ne possono creare delle nuove.\n\n\n- DashboardList\n\n\nLa DashboardList \u00e8 formata da una \nViewSearch\n collegata ad una \nViewList\n contornata\nda semplice html. In questo modo si \u00e8 creata una dashboard che permette la lista\ne la ricerca degli elementi della lista e paginazione. \n\n\nPropriet\u00e0\n\n\n\n\nsearchKey\n : chiave che identifica la view che gestisce la search\n\n\nlistKey\n : chiave che identifica la view che gestisce la lista\n\n\n\n\nmarcatori\n\n\n\n\ndata-view_search\n : contentitore dove verr\u00e0 disegnata la view associata alla search\n\n\ndata-view_list\n: contenitore dove verr\u00e0 disegnata la view associata alla lista\n\n\n\n\ntemplate\n\n\ndiv id=\ntabContent\n\n    \ndiv class=\ncollapse in\n data-collapse_list\n\n        \nheader id=\npage-header\n\n            \ndiv class=\npanel panel-default\n\n                \ndiv class=\npanel-heading\n\n                      \nspan class=\ntitle elipsis\n \n                        \nstrong data-label=\nmodelMetadata.singular\n/strong\n\n                      \n/span\n\n                \n/div\n\n            \n/div\n\n        \n/header\n\n\n        \ndiv class=\npadding-15\n\n            \ndiv data-view_search\n/div\n\n            \ndiv data-view_list\n/div\n\n        \n/div\n\n    \n/div\n\n\n/div\n\n\n\n\n\nPer instanziare una DashboardList basta scrivere il seguente codice:\n\n\nvar dash = new DashboardList({\n    modelName : 'test',\n    container : '#test_container1',\n});\ndash.draw();\n\n\n\n\n\n\nmodelName\n rappresenta il modello dei dati che vogliamo gestire nella view che viene utlizzato\ndalle routes delle due view per reperire i dati con cui popolare le viste.\n\n\ncontainer\n rappresenta il selettore html dove renderizzare i dati.\n\n\n\n\nEsempio\n\n\n- DashboardEdit\n\n\nLa DashboardEdit \u00e8 formata da un solo componente, una ViewEdit all'interno contornata\nda semplice html. \n\n\n\n\nPropriet\u00e0\n\n\neditKey : chiave che identifica la view che gestisce l'edit\n\n\n\n\n\n\n\n\nmarcatori\n\n\n\n\ndata-view_edit : contentitore dove verr\u00e0 disegnata la view associata all'edit\n\n\n\n\ntemplate\n\n\ndiv\n\n    \ndiv class=\npanel panel-default\n\n        \ndiv class=\npanel-heading\n\n              \nspan class=\ntitle elipsis\n \n                \nstrong data-label=\nmodelMetadata.singular\n/strong\n\n              \n/span\n\n        \n/div\n\n    \n/div\n\n    \ndiv data-view_edit \n\n\n    \n/div\n\n\n/div\n\n\n\n\n\nPer instanziarla basta scrivere il seguente codice:\n\n\nvar dash = new DashboardEdit({\n    modelName : 'test',\n    pk : 1,\n    container : '#test_container1',\n});\ndash.draw();\n\n\n\n\n\n\nmodelName\n rappresenta il modello dei dati che vogliamo gestire nella view che viene utlizzato\ndalla route della view per reperire i dati con cui popolare la vista.\n\n\ncontainer\n rappresenta il selettore html dove renderizzare i dati.\n\n\npk\n : chiave del record da caricare\n\n\n\n\nEsempio\n\n\n- DashboardInsert\n\n\nLa DashboardInsert \u00e8 formata da un solo componente, una ViewInsert all'interno contornata\nda semplice html. \n\n\n\n\nPropriet\u00e0\n\n\ninsertKey : chiave che identifica la view che gestisce l'insert\n\n\n\n\n\n\n\n\nmarcatori\n\n\n\n\ndata-view_insert : contentitore dove verr\u00e0 disegnata la view associata all'insert\n\n\n\n\ntemplate \n\n\ndiv\n\n    \ndiv class=\npanel panel-default\n\n        \ndiv class=\npanel-heading\n\n              \nspan class=\ntitle elipsis\n \n                \nstrong data-label=\nmodelMetadata.singular\n/strong\n\n              \n/span\n\n        \n/div\n\n    \n/div\n           \n    \ndiv data-view_insert\n\n\n    \n/div\n\n\n/div\n\n\n\n\n\nPer instanziarla basta scrivere il seguente codice:\n\n\nvar dash = new DashboardInsert({\n    modelName : 'test',\n    container : '#test_container1',\n});\ndash.draw();\n\n\n\n\n\n\nmodelName\n rappresenta il modello dei dati che vogliamo gestire nella view che viene utlizzato\ndalla route della view per reperire i dati con cui popolare la vista.\n\n\ncontainer\n rappresenta il selettore html dove renderizzare i dati.\n\n\n\n\nEsempio\n\n\n- DashboardTab\n\n\nLa DashboardTab \u00e8 formata da 5 viste che interagiscono tra di loro:\n\n\n\n\nuna \nViewSearch\n che permette di ricercare gli elementi della \nViewList\n. \n\n\nuna \nViewList\n: Visualizza i risultati e contiene delle azioni cliccabili su ogni \nrecord. Le azioni sono delete,edit,view,create.\n\n\nuna \nViewEdit\n: Viene mostrata quando viene premuto il tasto modifica nella ViewList\ne permette la modifica del record\n\n\nuna \nViewInsert\n: Viene mostrata quando viene premuto il tasto nuovo e permette la\ncreazione di un nuovo record\n\n\n\n\nuna \nViewView\n:Viene mostrata in una modal quando viene cliccato l'azione vista.\n\n\n\n\n\n\nPropriet\u00e0\n\n\n\n\ninsertKey : chiave che identifica la view che gestisce l'insert\n\n\neditKey : chiave che identifica la view che gestisce l'edit\n\n\nsearchKey : chiave che identifica la view che gestisce la search\n\n\nlistKey : chiave che identifica la view che gestisce la lista\n\n\n\n\n\n\n\n\nMetodi \n\n\n\n\nshowEdit : metodo per la visualizzazione di edit\n\n\nshowInsert : \n\n\nshowList\n\n\nshowDialog \n\n\n\n\n\n\n\n\nmarcatori\n\n\n\n\ndata-view_search\n : contentitore dove verr\u00e0 disegnata la view associata alla search\n\n\ndata-view_list\n : contentitore dove verr\u00e0 disegnata la view associata alla lista\n\n\ndata-view_insert\n : contentitore dove verr\u00e0 disegnata la view associata all'insert\n\n\ndata-view_edit\n : contentitore dove verr\u00e0 disegnata la view associata all'edit\n\n\ndata-view_view\n : contentitore dove verr\u00e0 disegnata la view associata alla vista\n\n\n\n\ntemplate\n\n\ndiv class=\ntab-content\n \n    \nheader\n\n        \ndiv class=\npanel panel-default\n\n            \ndiv class=\npanel-heading\n\n                  \nspan class=\ntitle elipsis\n\n                        \nstrong data-label=\nmodelMetadata.singular\n/strong\n\n                  \n/span\n\n            \n/div\n\n        \n/div\n\n    \n/header\n\n    \ndiv class=\ncollapse in\n data-collapse_list\n\n        \ndiv class=\npadding-15\n\n            \ndiv data-view_search\n\n            \n/div\n\n            \ndiv data-view_list\n\n            \n/div\n\n        \n/div\n\n    \n/div\n\n\n    \ndiv class=\ncollapse\n data-collapse_edit\n\n        \ndiv class=\npadding-15\n\n            \ndiv data-view_edit\n/div\n\n            \ndiv data-view_insert\n/div\n\n        \n/div\n\n    \n/div\n\n\n    \ndiv data-view_dialog class=\nmodal fade\n\n        \ndiv class=\nmodal-dialog\n\n            \ndiv class=\nmodal-content\n\n                \ndiv class=\nmodal-header\n\n                    \nbutton type=\nbutton\n class=\nclose\n data-dismiss=\nmodal\n\n                            aria-hidden=\ntrue\ntimes;\n/button\n\n                    \nh4 class=\nmodal-title\n data-label=\nmodelMetadata.singular\n \n/h4\n\n                \n/div\n \n                \ndiv class=\nmodal-body\n\n                    \ndiv data-view_view\n/div\n\n                \n/div\n\n                \ndiv class=\nmodal-footer\n\n                    \nbutton data-button=\ncancel\n type=\nbutton\n class=\nbtn btn-primary \n\n                          data-dismiss=\nmodal\nAnnulla\n                    \n/button\n\n                    \nbutton data-button=\nok\n type=\nbutton\n class=\nbtn btn-primary\n\n                            data-dismiss=\nmodal\nOk\n                    \n/button\n\n                \n/div\n\n            \n/div\n\n            \n!-- /.modal-content --\n\n        \n/div\n\n        \n!-- /.modal-dialog --\n\n    \n/div\n\n\n/div\n\n\n\n\n\n- Dashboard2Col\n\n\nLa Dashboard2Col \u00e8 come la DashboardTab ma organizzata su 2 colonne. La ViewView\nnon viene mostrata in modal\nAnche questa dashboar contiene 5 viste :\n\n\n\n\nuna \nViewSearch\n che permette di ricercare gli elementi della \nViewList\n. \n\n\nuna \nViewList\n: Visualizza i risultati e contiene delle azioni cliccabili su ogni \nrecord. Le azioni sono delete,edit,view,create.\n\n\nuna \nViewEdit\n: Viene mostrata quando viene premuto il tasto modifica nella ViewList\ne permette la modifica del record\n\n\nuna \nViewInsert\n: Viene mostrata quando viene premuto il tasto nuovo e permette la\ncreazione di un nuovo record\n\n\n\n\nuna \nViewView\n:Viene mostrata quando viene cliccato l'azione vista.\n\n\n\n\n\n\nPropriet\u00e0\n\n\n\n\ninsertKey : chiave che identifica la view che gestisce l'insert\n\n\neditKey : chiave che identifica la view che gestisce l'edit\n\n\nsearchKey : chiave che identifica la view che gestisce la search\n\n\nlistKey : chiave che identifica la view che gestisce la lista\n\n\n\n\n\n\n\n\nMetodi \n\n\n\n\nshowEdit : metodo per la visualizzazione di edit\n\n\nshowInsert : \n\n\nshowList\n\n\nshowDialog \n\n\n\n\n\n\n\n\nmarcatori\n\n\n\n\ndata-view_search\n : contentitore dove verr\u00e0 disegnata la view associata alla search\n\n\ndata-view_list\n : contentitore dove verr\u00e0 disegnata la view associata alla lista\n\n\ndata-view_insert\n : contentitore dove verr\u00e0 disegnata la view associata all'insert\n\n\ndata-view_edit\n : contentitore dove verr\u00e0 disegnata la view associata all'edit\n\n\ndata-view_view\n : contentitore dove verr\u00e0 disegnata la view associata alla vista\n\n\n\n\ntemplate\n\n\ndiv class=\ntab-content\n \n    \nheader \n\n        \ndiv class=\npanel panel-default\n\n            \ndiv class=\npanel-heading\n\n                  \nspan class=\ntitle elipsis\n\n                        \nstrong data-label=\nmodelMetada.singular\n/strong\n\n                  \n/span\n\n            \n/div\n\n        \n/div\n\n    \n/header\n\n    \ndiv\n\n        \ndiv class=\ncol col-xs-6\n\n            \ndiv data-view_search \n/div\n\n            \ndiv data-view_list\n/div\n\n        \n/div\n\n        \ndiv class=\ncol col-xs-6\n\n            \ndiv data-view_container=\nedit\n\n                \nh4 data-edit_title\n/h4\n\n                \ndiv data-view_edit\n\n\n                \n/div\n\n            \n/div\n\n            \ndiv data-view_container=\ninsert\n\n                \nh4 data-insert_title\n/h4\n\n                \ndiv data-view_insert \n/div\n\n            \n/div\n\n            \ndiv data-view_container=\nview\n\n                \nh4 data-view_title\n/h4\n\n                \ndiv data-view_view\n/div\n\n            \n/div\n\n        \n/div\n\n    \n/div\n\n\n/div", 
            "title": "Dashboards"
        }, 
        {
            "location": "/dashboards/#dashboard", 
            "text": "Dashboard  \u00e8 la classe principale da cui ereditano tutte le dashboard che andremo\na creare. Estende la class  Component", 
            "title": "Dashboard"
        }, 
        {
            "location": "/dashboards/#proprieta", 
            "text": "container        : null - rappresenta il container di destinazione dove disegnare le views  className        : 'Dashboard' - serve per poter definire a runtime la classe in cui ci si trova  modelName        : null - il modello dei dati che vogliamo gestire,  viewKeys         : [] - array delle key associate ad ogni view  labelContext     : null - contesto nel reperimento delle traduzioni delle label", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/dashboards/#dashboards-implementate", 
            "text": "La libreria mette a disposizione alcune dashboard di uso comune, possono essere \nridefinite per le proprie esigenze oppure se ne possono creare delle nuove.", 
            "title": "Dashboards implementate."
        }, 
        {
            "location": "/dashboards/#-dashboardlist", 
            "text": "La DashboardList \u00e8 formata da una  ViewSearch  collegata ad una  ViewList  contornata\nda semplice html. In questo modo si \u00e8 creata una dashboard che permette la lista\ne la ricerca degli elementi della lista e paginazione.", 
            "title": "- DashboardList"
        }, 
        {
            "location": "/dashboards/#proprieta_1", 
            "text": "searchKey  : chiave che identifica la view che gestisce la search  listKey  : chiave che identifica la view che gestisce la lista", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/dashboards/#marcatori", 
            "text": "data-view_search  : contentitore dove verr\u00e0 disegnata la view associata alla search  data-view_list : contenitore dove verr\u00e0 disegnata la view associata alla lista", 
            "title": "marcatori"
        }, 
        {
            "location": "/dashboards/#template", 
            "text": "div id= tabContent \n     div class= collapse in  data-collapse_list \n         header id= page-header \n             div class= panel panel-default \n                 div class= panel-heading \n                       span class= title elipsis  \n                         strong data-label= modelMetadata.singular /strong \n                       /span \n                 /div \n             /div \n         /header \n\n         div class= padding-15 \n             div data-view_search /div \n             div data-view_list /div \n         /div \n     /div  /div   Per instanziare una DashboardList basta scrivere il seguente codice:  var dash = new DashboardList({\n    modelName : 'test',\n    container : '#test_container1',\n});\ndash.draw();   modelName  rappresenta il modello dei dati che vogliamo gestire nella view che viene utlizzato\ndalle routes delle due view per reperire i dati con cui popolare le viste.  container  rappresenta il selettore html dove renderizzare i dati.   Esempio", 
            "title": "template"
        }, 
        {
            "location": "/dashboards/#-dashboardedit", 
            "text": "La DashboardEdit \u00e8 formata da un solo componente, una ViewEdit all'interno contornata\nda semplice html.    Propriet\u00e0  editKey : chiave che identifica la view che gestisce l'edit     marcatori   data-view_edit : contentitore dove verr\u00e0 disegnata la view associata all'edit   template  div \n     div class= panel panel-default \n         div class= panel-heading \n               span class= title elipsis  \n                 strong data-label= modelMetadata.singular /strong \n               /span \n         /div \n     /div \n     div data-view_edit  \n\n     /div  /div   Per instanziarla basta scrivere il seguente codice:  var dash = new DashboardEdit({\n    modelName : 'test',\n    pk : 1,\n    container : '#test_container1',\n});\ndash.draw();   modelName  rappresenta il modello dei dati che vogliamo gestire nella view che viene utlizzato\ndalla route della view per reperire i dati con cui popolare la vista.  container  rappresenta il selettore html dove renderizzare i dati.  pk  : chiave del record da caricare   Esempio", 
            "title": "- DashboardEdit"
        }, 
        {
            "location": "/dashboards/#-dashboardinsert", 
            "text": "La DashboardInsert \u00e8 formata da un solo componente, una ViewInsert all'interno contornata\nda semplice html.    Propriet\u00e0  insertKey : chiave che identifica la view che gestisce l'insert     marcatori   data-view_insert : contentitore dove verr\u00e0 disegnata la view associata all'insert   template   div \n     div class= panel panel-default \n         div class= panel-heading \n               span class= title elipsis  \n                 strong data-label= modelMetadata.singular /strong \n               /span \n         /div \n     /div            \n     div data-view_insert \n\n     /div  /div   Per instanziarla basta scrivere il seguente codice:  var dash = new DashboardInsert({\n    modelName : 'test',\n    container : '#test_container1',\n});\ndash.draw();   modelName  rappresenta il modello dei dati che vogliamo gestire nella view che viene utlizzato\ndalla route della view per reperire i dati con cui popolare la vista.  container  rappresenta il selettore html dove renderizzare i dati.   Esempio", 
            "title": "- DashboardInsert"
        }, 
        {
            "location": "/dashboards/#-dashboardtab", 
            "text": "La DashboardTab \u00e8 formata da 5 viste che interagiscono tra di loro:   una  ViewSearch  che permette di ricercare gli elementi della  ViewList .   una  ViewList : Visualizza i risultati e contiene delle azioni cliccabili su ogni \nrecord. Le azioni sono delete,edit,view,create.  una  ViewEdit : Viene mostrata quando viene premuto il tasto modifica nella ViewList\ne permette la modifica del record  una  ViewInsert : Viene mostrata quando viene premuto il tasto nuovo e permette la\ncreazione di un nuovo record   una  ViewView :Viene mostrata in una modal quando viene cliccato l'azione vista.    Propriet\u00e0   insertKey : chiave che identifica la view che gestisce l'insert  editKey : chiave che identifica la view che gestisce l'edit  searchKey : chiave che identifica la view che gestisce la search  listKey : chiave che identifica la view che gestisce la lista     Metodi    showEdit : metodo per la visualizzazione di edit  showInsert :   showList  showDialog", 
            "title": "- DashboardTab"
        }, 
        {
            "location": "/dashboards/#marcatori_1", 
            "text": "data-view_search  : contentitore dove verr\u00e0 disegnata la view associata alla search  data-view_list  : contentitore dove verr\u00e0 disegnata la view associata alla lista  data-view_insert  : contentitore dove verr\u00e0 disegnata la view associata all'insert  data-view_edit  : contentitore dove verr\u00e0 disegnata la view associata all'edit  data-view_view  : contentitore dove verr\u00e0 disegnata la view associata alla vista   template  div class= tab-content  \n     header \n         div class= panel panel-default \n             div class= panel-heading \n                   span class= title elipsis \n                         strong data-label= modelMetadata.singular /strong \n                   /span \n             /div \n         /div \n     /header \n     div class= collapse in  data-collapse_list \n         div class= padding-15 \n             div data-view_search \n             /div \n             div data-view_list \n             /div \n         /div \n     /div \n\n     div class= collapse  data-collapse_edit \n         div class= padding-15 \n             div data-view_edit /div \n             div data-view_insert /div \n         /div \n     /div \n\n     div data-view_dialog class= modal fade \n         div class= modal-dialog \n             div class= modal-content \n                 div class= modal-header \n                     button type= button  class= close  data-dismiss= modal \n                            aria-hidden= true times; /button \n                     h4 class= modal-title  data-label= modelMetadata.singular   /h4 \n                 /div  \n                 div class= modal-body \n                     div data-view_view /div \n                 /div \n                 div class= modal-footer \n                     button data-button= cancel  type= button  class= btn btn-primary  \n                          data-dismiss= modal Annulla\n                     /button \n                     button data-button= ok  type= button  class= btn btn-primary \n                            data-dismiss= modal Ok\n                     /button \n                 /div \n             /div \n             !-- /.modal-content -- \n         /div \n         !-- /.modal-dialog -- \n     /div  /div", 
            "title": "marcatori"
        }, 
        {
            "location": "/dashboards/#-dashboard2col", 
            "text": "La Dashboard2Col \u00e8 come la DashboardTab ma organizzata su 2 colonne. La ViewView\nnon viene mostrata in modal\nAnche questa dashboar contiene 5 viste :   una  ViewSearch  che permette di ricercare gli elementi della  ViewList .   una  ViewList : Visualizza i risultati e contiene delle azioni cliccabili su ogni \nrecord. Le azioni sono delete,edit,view,create.  una  ViewEdit : Viene mostrata quando viene premuto il tasto modifica nella ViewList\ne permette la modifica del record  una  ViewInsert : Viene mostrata quando viene premuto il tasto nuovo e permette la\ncreazione di un nuovo record   una  ViewView :Viene mostrata quando viene cliccato l'azione vista.    Propriet\u00e0   insertKey : chiave che identifica la view che gestisce l'insert  editKey : chiave che identifica la view che gestisce l'edit  searchKey : chiave che identifica la view che gestisce la search  listKey : chiave che identifica la view che gestisce la lista     Metodi    showEdit : metodo per la visualizzazione di edit  showInsert :   showList  showDialog", 
            "title": "- Dashboard2Col"
        }, 
        {
            "location": "/dashboards/#marcatori_2", 
            "text": "data-view_search  : contentitore dove verr\u00e0 disegnata la view associata alla search  data-view_list  : contentitore dove verr\u00e0 disegnata la view associata alla lista  data-view_insert  : contentitore dove verr\u00e0 disegnata la view associata all'insert  data-view_edit  : contentitore dove verr\u00e0 disegnata la view associata all'edit  data-view_view  : contentitore dove verr\u00e0 disegnata la view associata alla vista   template  div class= tab-content  \n     header  \n         div class= panel panel-default \n             div class= panel-heading \n                   span class= title elipsis \n                         strong data-label= modelMetada.singular /strong \n                   /span \n             /div \n         /div \n     /header \n     div \n         div class= col col-xs-6 \n             div data-view_search  /div \n             div data-view_list /div \n         /div \n         div class= col col-xs-6 \n             div data-view_container= edit \n                 h4 data-edit_title /h4 \n                 div data-view_edit \n\n                 /div \n             /div \n             div data-view_container= insert \n                 h4 data-insert_title /h4 \n                 div data-view_insert  /div \n             /div \n             div data-view_container= view \n                 h4 data-view_title /h4 \n                 div data-view_view /div \n             /div \n         /div \n     /div  /div", 
            "title": "marcatori"
        }, 
        {
            "location": "/views/", 
            "text": "View\n\n\nLa \nView\n estende la classe \nComponent\n rappesenta il contenitore di dati html associate ad un \nmodello di dati.\nQuesto modello viene utilizzato per discriminare la route per il recupero dei dati.\nDa essa sono derivate le classi:\n    - \nRecordView\n per la gestione di dati provenienti da record di un modello\n    - \nCollectionView\n per la gestione di una collezione di record di un modello\n\n\nLa view accetta come parametro una configurazione. \n\n\nNella configurazione vengono definiti:\n- i campi da visualizzare, quali Render utilizzare per ogni dato\n- le azioni disponibili che si possono effettuare. In caso di view che gestisce una \n  collezione di records esistono due tipi di azioni\n  - \nRecordAction\n definite sul singolo record\n  - \nCollectionAction\n che agisce sulla collezione dei dati\n\n\nRappresenta la classe Principale\n\n\nPropriet\u00e0\n\n\n\n\n\n\nmodelName\n \ndefault null\n rappresenta il nome del modello dei dati gestito\n\n\n\n\n\n\ndummyModel\n \ndefault 'dummy'\n  Questo nome \u00e8 del modello dummy per view che contiene dati calcolati manualmente senza comunicazione con \nil server attraverso la route\n\n\n\n\n\n\nrenderObjs\n \ndefault []\n Array degli oggetti \nRender\n presenti nella view\n\n\n\n\n\n\ndata\n \ndefault {}\n Array associativo contente i dati della view\n\n\n\n\n\n\ntype\n \ndefault null\n Tipo di view, \n\n\n\n\n\n\njQe\n \ndefault null\n Oggetto jQuery che punta al container della view\n\n\n\n\n\n\ndefaultRenderType\n \ndefault null\n\n\n\n\n\n\nconnectedObjs\n       : {},\n\n\n\n\nkeyId\n               : null,     // identificativo univoco della view creata e assegnata dall'oggetto App   \n\n\napp\n                : null,      // oggetto app proprietario della view\n\n\nviewTypeToRenderType\n :          // mapping delle viste con i tipi default dei render\n\n\n\n\n{\n    'list'      : BaseElement.VIEW,\n    'edit'      : BaseElement.EDIT,\n    'search'    : BaseElement.SEARCH,\n    'view'      : BaseElement.VIEW,\n    'calendar'  : BaseElement.VIEW,\n    'csv'       : BaseElement.EDIT\n}\n\n\n\n\n\n\n\n\nresources\n : [] - vettore delle risorse esterne da caricare prima di visualizzare la view\n\n\n\n\n\n\nroute\n : null - oggetto route associata view\n\n\n\n\n\n\nrouteName\n : null - nome della classe Route da agganciare ( vedere Route.factory per la convenzione sui nomi) \n\n\n\n\n\n\nactions\n : [] - vettore nome azioni da istanziare nella view\n\n\n\n\n\n\nMetodi\n\n\n\n\n\n\ndraw(callback)\n metodo per la renderizzazione della view. callback e' la chiamata che\nviene effettuata alla fine se passata. La sequenza delle chiamate attraverso le callback:\nSe all'interno di questi metodi non viene chiamata la callback viene interrotto il flusso di chiamate.\nUtilizzare questa tecnica per interrompere la visualizzazione o il comportamento della view.\n\n\n\n\nbeforeLoadData(callback)\n\n\nloadData(callback)\n\n\nafterLoadData(callback)\n\n\n_prepareContainer()\n\n\nbeforeRender(callback)\n\n\nrender(callback)\n\n\nafterRender(callback)\n\n\nbeforeFinalize(callback)\n\n\n_loadExternalResources(callback)\n\n\nfinalize(callback)\n\n\nafterFinalize(callback)\n\n\n\n\n\n\n\n\nbeforeLoadData(callback)\n - metodo viene chiamato prima che la view carichi i dati\n\n\n\n\nloadData(callback)\n - metodo chiamato per il caricamento dei dati attraverso la route\n\n\nafterLoadData(callback)\n - metodo chiamato dopo che i dati sono stati caricati\n\n\n_prepareContainer()\n - metodo dove viene iniettato l'html presente nel template\n\n\nbeforeRender(callback)\n - metodo chiamato prima di chiamare utilizzabile per eventuali manipolazioni\n\n\nrender(callback)\n - questo metodo \u00e8 utilizzato per disegnare la struttura html\n\n\nafterRender(callback)\n - chiamato dopo il render\n\n\nbeforeFinalize(callback)\n\n\n_loadExternalResources(callback)\n - chiamata per il caricamento delle risorse esterne\n\n\nfinalize(callback)\n - metodo per la creazione e il disegno dei renders della view\n\n\nafterFinalize(callback)\n - metodo per agganciare eventuali eventi personali e modifiche custom\n\n\ndelete()\n - metodo chiamato prima di cancellare la view per dare la possibilit\u00e0 alla view di \ncancellare eventuali oggetti creati \n\n\nsetRoute(route)\n - metodo per settare l'oggetto route interno alla view\n\n\ngetRoute()\n - ritorna la route istanziata della view\n\n\nsetId(id)\n - setta l'identificativo della view\n\n\nsetData(data)\n - setta i dati della dall'esterno\n\n\ngetFormData(data)\n - ritorna i dati di una form html in un vettore associativo se esiste\n\n\ngetItemTemplate(key)\n - Istanzia e ritorna il template associato all'oggetto Render associato alla\nkey\n\n\nkey : nome del campo di cui si vuole il template\n\n\n\n\n\n\n_getRenderMode(key) - (privata) restituisce la modalita' in cui verra' disegnato l'oggetto render \nin base alla configurazione dell'oggetto nell fields_config della view\n\n\n_getRenderType(key) - (privata) ritorna il type del render in base al type definito nella fields_config della view\no alla configurazione di default\n\n\n_getDefaultRenderConfig(key) - ritorna la configurazione di default dell'oggetto render\n\n\nkey : chiave dell'oggetto render\n\n\n\n\n\n\n_getRenderConfig : function(key) - ritorna la configurazione finale dell'oggetto render, eseguendo\nil merge tra la configuazione di default e quella passata alla view.\n\n\n\n\nRecordView\n\n\nLa \nRecordView\n estende \nView\n \u00e8 pensata per tutte le viste che gestiscono un solo record del modello \ndi dati.\n\n\nPropriet\u00e0\n\n\n\n\n_pkName : 'id' - nome della chiave univoca del modello dati\n\n\n_pkValue : null - valore della chiave univoca del modello dati\n\n\n_actions : [] - vettore con tutte le azioni istanziati nella vista\n\n\nactions : [] - vettore nomi delle azioni da istanziare nella vista\n\n\ntype : 'record' - tipo della vista in questo caso record\n\n\ndefaultItemTemplate : 'left' - Oggetto template di default che conterr\u00e0 gli oggetti Renders\n\n\ndata : vettore associativo dei dati dalla forma\n\n\n\n\ndata : {\n    value : {},     //vettore associativo key =\n value dei modello dati\n    metadata : {},  //vettore associativo key =\n {} metadati che descrivono key\n    validationRules : {}, // vettore associativo key =\n {} regole di validazione lato javascript da applicare alla key    \n}\n\n\n\n\nMetodi\n\n\n\n\ngetRenderValue : function(fieldName)\n\n\ngetRender : function(fieldName)\n\n\nresetForm : function () - esegue il clear di tutti i render della view\n\n\n_callAction : function (actionData) - (privata)\n\n\n_setActions : function () - (privata) instanzia tutte le azioni definite per riga e globali partendo\n                                             * dalla configurazione iniziale definita nella config\n                                             * far partire l'ascolto per tutti gli eventi che riguardano le proprie\n                                             * azioni\n\n\n_createAction : function (key)\n\n\n_setKeys : function () - setta le keys attive per la view\n\n\n_renderHidden : function (key) - renderizza i render di tipo hidden perche' speciali\n\n\n_renderObjectElement : function (key) - renderizza l'oggetto render associato alla key che non sia hidden\n\n\n_getGroup: function (key) - ritorna il gruppo associato al campo nel caso di view con template strutturato a gruppi\n\n\n_renderElement : function (key) : chiama _renderHidden o _renderObjectElement in base al type\n\n\n_createRender : function (container,key) - crea l'oggetto render e gli associa il container dove\nverr\u00e0 disegnato\n\n\n_renderActions : function() - renderizza le azioni istanziate nella view\n\n\n_getFieldName : function (key) - ritorna il fieldName costruito a partire dalla key a seconda del \ntipo di view che stiamo realizzando. Ci permette di mettere dei prefissi o suffissi a tutte le key\ndel modello dei dati dovuti ad esigenze dell'html tipo view annidate per creare delle form complese.\n\n\n\n\nCollectionView\n\n\nLa \nCollectionView\n estend la \nView\n \u00e8 pensata per tutte le viste che gestiscono una lista record del modello \ndi dati.\n\n\nPropriet\u00e0\n\n\n\n\n_recordActions : [] - vettore azioni della vista per ogni singolo record,\n\n\n_globalActions : [] - vettore azioni sull'intera vista\n\n\n_paginatorActions : [] - vettore azioni per la paginazione\n\n\nactionsLayout : 'left' - tipo di layout per le azioni sui record, left o right\n\n\ntype : 'list' - tipo di view, in questo caso list\n\n\ndefaultItemTemplate : 'no' - classe del template da istanziare per ogni render\n\n\norderClass - le classi da aggiungere all'header del campo ordinato.\n\n\n\n\norderClass : {\n  'asc': ['sorting_asc'],\n  'desc' : ['sorting_desc']\n}\n\n\n\n\n\n\ndata - dati del modello dati da visualizzare, vettore associativo della forma:\n\n\n\n\ndata : {\n    value : [],\n    metadata : {},\n    pagination : {},\n    resultParams : {},\n    summary : {},\n    validationRules : {},\n    backParams : {},\n    has_errors : false,\n    list_header : ''\n}\n\n\n\n\nMetodi\n\n\n\n\nsetOrder(field) - permette di ordinare una view rispetto ad un campo\n\n\n_setKeys() - (privata) setta i render da renderizzare nella vista\n\n\n_renderHeaderValues(jQrow) - (privata) setta l'intestazione delle colonne della vista\n\n\n_renderHeaderActions(jQrow) - (privata) renderizza l'header della colonna action\n\n\n_renderHeader() - (privata) - renderizza l'header\n\n\n_renderFooter() - (privata) - renderizza il footer\n\n\n_attachEvents(index) - \n\n\n_attachDetailEvents() -\n\n\ngetChecked() - ritorna il vettore di tutte le pk delle rows selezionate.\n\n\n_renderGlobalActions() - renderizzare le azioni globali alla vista\n\n\n_renderInfoHeader() - renderizza un eventuale header di info della lista. L'html viene preso da\ndata.list_header\n\n\nrender(callback) - renderizza la view\n\n\n_renderRow : function (index) - (privata) renderizza la singola riga\n\n\nfinalize(callback) - finalizza la view e aggancia gli eventi\n\n\n_setActions() - (privata) instanzia tutte le azioni definite per riga e globali partendo\ndalla configurazione iniziale definita nella config. Far partire l'ascolto per tutti gli eventi \nche riguardano le proprie azioni\n\n\n_setVisibleKeys : function ()\n\n\n_renderZeroResult : function () \n\n\n_renderPagination : function ()\n\n\n_createRender : function (r,key,container)\n\n\n_createGrid : function ()\n\n\n_createAction : function (row,key) - crea un azione se row e' null setta come modelData \ndell'azione tutti i dati altrimenti il dati della row indicata.\n\n\n@param row : row a cui si riferisce null in caso di azione globale\n\n\n@param key : nome dell'azione\n\n\n@returns {*} : ritorna l'azione creata\n\n\n\n\n\n\n_renderSingleActions : function ()\n\n\n_hasNeedSelectionAction : function () - controlla che la lista abbia almeno un'azione che ha bisogno di selezionare elementi\n\n\n_hasRecordActions : function () - controlla se la view abbia almeno una azione che lavora sul singolo record della lista\n\n\n\n\nViews Implementate\n\n\nNella libreria sono state implementate delle views di uso comune\n\n\n- ViewList\n\n\nE' una collection view che renderizza i risultati su un template tabellare,\nviene popolata attraverso la \nRouteList\n che prevede come parametro il modelName\n\n\n- ViewInsert\n\n\nE' una view per la creazione di un nuovo record. Utilizza la route RouteInsert per il \ncaricamento dei dati e la RouteSave per il salvataggio\n\n\n- ViewEdit\n\n\nE' una view per la modifica di un record. Utilizza la route RouteEdit per il caricamento\ne la RouteUpdate per il salvataggio\n\n\ntemplate\n\n\ndiv class=\nwell\n data-edit-main\n\n    \ndiv data-alert class=\nalert alert-success hide\n/div\n\n    \nform name=\ndata_form\n class=\nmodel-edit\n\n        \ndiv data-hidden_fields\n/div\n\n        \ndiv data-view_elements\n\n\n        \n/div\n\n        \ndiv data-view_action \n\n            \ndiv data-field=\ndata\n data-self\n\n\n            \n/div\n\n        \n/div\n\n    \n/form\n\n\n/div\n\n\n\n\n\n- ViewSearch\n\n\nE' una view per effettuare una ricerca.\n\n\n- ViewView\n\n\nE' una view per visualizzare i risultati in modalit\u00e0 lettura.", 
            "title": "Views"
        }, 
        {
            "location": "/views/#view", 
            "text": "La  View  estende la classe  Component  rappesenta il contenitore di dati html associate ad un \nmodello di dati.\nQuesto modello viene utilizzato per discriminare la route per il recupero dei dati.\nDa essa sono derivate le classi:\n    -  RecordView  per la gestione di dati provenienti da record di un modello\n    -  CollectionView  per la gestione di una collezione di record di un modello  La view accetta come parametro una configurazione.   Nella configurazione vengono definiti:\n- i campi da visualizzare, quali Render utilizzare per ogni dato\n- le azioni disponibili che si possono effettuare. In caso di view che gestisce una \n  collezione di records esistono due tipi di azioni\n  -  RecordAction  definite sul singolo record\n  -  CollectionAction  che agisce sulla collezione dei dati  Rappresenta la classe Principale", 
            "title": "View"
        }, 
        {
            "location": "/views/#proprieta", 
            "text": "modelName   default null  rappresenta il nome del modello dei dati gestito    dummyModel   default 'dummy'   Questo nome \u00e8 del modello dummy per view che contiene dati calcolati manualmente senza comunicazione con \nil server attraverso la route    renderObjs   default []  Array degli oggetti  Render  presenti nella view    data   default {}  Array associativo contente i dati della view    type   default null  Tipo di view,     jQe   default null  Oggetto jQuery che punta al container della view    defaultRenderType   default null    connectedObjs        : {},   keyId                : null,     // identificativo univoco della view creata e assegnata dall'oggetto App     app                 : null,      // oggetto app proprietario della view  viewTypeToRenderType  :          // mapping delle viste con i tipi default dei render   {\n    'list'      : BaseElement.VIEW,\n    'edit'      : BaseElement.EDIT,\n    'search'    : BaseElement.SEARCH,\n    'view'      : BaseElement.VIEW,\n    'calendar'  : BaseElement.VIEW,\n    'csv'       : BaseElement.EDIT\n}    resources  : [] - vettore delle risorse esterne da caricare prima di visualizzare la view    route  : null - oggetto route associata view    routeName  : null - nome della classe Route da agganciare ( vedere Route.factory per la convenzione sui nomi)     actions  : [] - vettore nome azioni da istanziare nella view", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/views/#metodi", 
            "text": "draw(callback)  metodo per la renderizzazione della view. callback e' la chiamata che\nviene effettuata alla fine se passata. La sequenza delle chiamate attraverso le callback:\nSe all'interno di questi metodi non viene chiamata la callback viene interrotto il flusso di chiamate.\nUtilizzare questa tecnica per interrompere la visualizzazione o il comportamento della view.   beforeLoadData(callback)  loadData(callback)  afterLoadData(callback)  _prepareContainer()  beforeRender(callback)  render(callback)  afterRender(callback)  beforeFinalize(callback)  _loadExternalResources(callback)  finalize(callback)  afterFinalize(callback)     beforeLoadData(callback)  - metodo viene chiamato prima che la view carichi i dati   loadData(callback)  - metodo chiamato per il caricamento dei dati attraverso la route  afterLoadData(callback)  - metodo chiamato dopo che i dati sono stati caricati  _prepareContainer()  - metodo dove viene iniettato l'html presente nel template  beforeRender(callback)  - metodo chiamato prima di chiamare utilizzabile per eventuali manipolazioni  render(callback)  - questo metodo \u00e8 utilizzato per disegnare la struttura html  afterRender(callback)  - chiamato dopo il render  beforeFinalize(callback)  _loadExternalResources(callback)  - chiamata per il caricamento delle risorse esterne  finalize(callback)  - metodo per la creazione e il disegno dei renders della view  afterFinalize(callback)  - metodo per agganciare eventuali eventi personali e modifiche custom  delete()  - metodo chiamato prima di cancellare la view per dare la possibilit\u00e0 alla view di \ncancellare eventuali oggetti creati   setRoute(route)  - metodo per settare l'oggetto route interno alla view  getRoute()  - ritorna la route istanziata della view  setId(id)  - setta l'identificativo della view  setData(data)  - setta i dati della dall'esterno  getFormData(data)  - ritorna i dati di una form html in un vettore associativo se esiste  getItemTemplate(key)  - Istanzia e ritorna il template associato all'oggetto Render associato alla\nkey  key : nome del campo di cui si vuole il template    _getRenderMode(key) - (privata) restituisce la modalita' in cui verra' disegnato l'oggetto render \nin base alla configurazione dell'oggetto nell fields_config della view  _getRenderType(key) - (privata) ritorna il type del render in base al type definito nella fields_config della view\no alla configurazione di default  _getDefaultRenderConfig(key) - ritorna la configurazione di default dell'oggetto render  key : chiave dell'oggetto render    _getRenderConfig : function(key) - ritorna la configurazione finale dell'oggetto render, eseguendo\nil merge tra la configuazione di default e quella passata alla view.", 
            "title": "Metodi"
        }, 
        {
            "location": "/views/#recordview", 
            "text": "La  RecordView  estende  View  \u00e8 pensata per tutte le viste che gestiscono un solo record del modello \ndi dati.", 
            "title": "RecordView"
        }, 
        {
            "location": "/views/#proprieta_1", 
            "text": "_pkName : 'id' - nome della chiave univoca del modello dati  _pkValue : null - valore della chiave univoca del modello dati  _actions : [] - vettore con tutte le azioni istanziati nella vista  actions : [] - vettore nomi delle azioni da istanziare nella vista  type : 'record' - tipo della vista in questo caso record  defaultItemTemplate : 'left' - Oggetto template di default che conterr\u00e0 gli oggetti Renders  data : vettore associativo dei dati dalla forma   data : {\n    value : {},     //vettore associativo key =  value dei modello dati\n    metadata : {},  //vettore associativo key =  {} metadati che descrivono key\n    validationRules : {}, // vettore associativo key =  {} regole di validazione lato javascript da applicare alla key    \n}", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/views/#metodi_1", 
            "text": "getRenderValue : function(fieldName)  getRender : function(fieldName)  resetForm : function () - esegue il clear di tutti i render della view  _callAction : function (actionData) - (privata)  _setActions : function () - (privata) instanzia tutte le azioni definite per riga e globali partendo\n                                             * dalla configurazione iniziale definita nella config\n                                             * far partire l'ascolto per tutti gli eventi che riguardano le proprie\n                                             * azioni  _createAction : function (key)  _setKeys : function () - setta le keys attive per la view  _renderHidden : function (key) - renderizza i render di tipo hidden perche' speciali  _renderObjectElement : function (key) - renderizza l'oggetto render associato alla key che non sia hidden  _getGroup: function (key) - ritorna il gruppo associato al campo nel caso di view con template strutturato a gruppi  _renderElement : function (key) : chiama _renderHidden o _renderObjectElement in base al type  _createRender : function (container,key) - crea l'oggetto render e gli associa il container dove\nverr\u00e0 disegnato  _renderActions : function() - renderizza le azioni istanziate nella view  _getFieldName : function (key) - ritorna il fieldName costruito a partire dalla key a seconda del \ntipo di view che stiamo realizzando. Ci permette di mettere dei prefissi o suffissi a tutte le key\ndel modello dei dati dovuti ad esigenze dell'html tipo view annidate per creare delle form complese.", 
            "title": "Metodi"
        }, 
        {
            "location": "/views/#collectionview", 
            "text": "La  CollectionView  estend la  View  \u00e8 pensata per tutte le viste che gestiscono una lista record del modello \ndi dati.", 
            "title": "CollectionView"
        }, 
        {
            "location": "/views/#proprieta_2", 
            "text": "_recordActions : [] - vettore azioni della vista per ogni singolo record,  _globalActions : [] - vettore azioni sull'intera vista  _paginatorActions : [] - vettore azioni per la paginazione  actionsLayout : 'left' - tipo di layout per le azioni sui record, left o right  type : 'list' - tipo di view, in questo caso list  defaultItemTemplate : 'no' - classe del template da istanziare per ogni render  orderClass - le classi da aggiungere all'header del campo ordinato.   orderClass : {\n  'asc': ['sorting_asc'],\n  'desc' : ['sorting_desc']\n}   data - dati del modello dati da visualizzare, vettore associativo della forma:   data : {\n    value : [],\n    metadata : {},\n    pagination : {},\n    resultParams : {},\n    summary : {},\n    validationRules : {},\n    backParams : {},\n    has_errors : false,\n    list_header : ''\n}", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/views/#metodi_2", 
            "text": "setOrder(field) - permette di ordinare una view rispetto ad un campo  _setKeys() - (privata) setta i render da renderizzare nella vista  _renderHeaderValues(jQrow) - (privata) setta l'intestazione delle colonne della vista  _renderHeaderActions(jQrow) - (privata) renderizza l'header della colonna action  _renderHeader() - (privata) - renderizza l'header  _renderFooter() - (privata) - renderizza il footer  _attachEvents(index) -   _attachDetailEvents() -  getChecked() - ritorna il vettore di tutte le pk delle rows selezionate.  _renderGlobalActions() - renderizzare le azioni globali alla vista  _renderInfoHeader() - renderizza un eventuale header di info della lista. L'html viene preso da\ndata.list_header  render(callback) - renderizza la view  _renderRow : function (index) - (privata) renderizza la singola riga  finalize(callback) - finalizza la view e aggancia gli eventi  _setActions() - (privata) instanzia tutte le azioni definite per riga e globali partendo\ndalla configurazione iniziale definita nella config. Far partire l'ascolto per tutti gli eventi \nche riguardano le proprie azioni  _setVisibleKeys : function ()  _renderZeroResult : function ()   _renderPagination : function ()  _createRender : function (r,key,container)  _createGrid : function ()  _createAction : function (row,key) - crea un azione se row e' null setta come modelData \ndell'azione tutti i dati altrimenti il dati della row indicata.  @param row : row a cui si riferisce null in caso di azione globale  @param key : nome dell'azione  @returns {*} : ritorna l'azione creata    _renderSingleActions : function ()  _hasNeedSelectionAction : function () - controlla che la lista abbia almeno un'azione che ha bisogno di selezionare elementi  _hasRecordActions : function () - controlla se la view abbia almeno una azione che lavora sul singolo record della lista", 
            "title": "Metodi"
        }, 
        {
            "location": "/views/#views-implementate", 
            "text": "Nella libreria sono state implementate delle views di uso comune", 
            "title": "Views Implementate"
        }, 
        {
            "location": "/views/#-viewlist", 
            "text": "E' una collection view che renderizza i risultati su un template tabellare,\nviene popolata attraverso la  RouteList  che prevede come parametro il modelName", 
            "title": "- ViewList"
        }, 
        {
            "location": "/views/#-viewinsert", 
            "text": "E' una view per la creazione di un nuovo record. Utilizza la route RouteInsert per il \ncaricamento dei dati e la RouteSave per il salvataggio", 
            "title": "- ViewInsert"
        }, 
        {
            "location": "/views/#-viewedit", 
            "text": "E' una view per la modifica di un record. Utilizza la route RouteEdit per il caricamento\ne la RouteUpdate per il salvataggio", 
            "title": "- ViewEdit"
        }, 
        {
            "location": "/views/#template", 
            "text": "div class= well  data-edit-main \n     div data-alert class= alert alert-success hide /div \n     form name= data_form  class= model-edit \n         div data-hidden_fields /div \n         div data-view_elements \n\n         /div \n         div data-view_action  \n             div data-field= data  data-self \n\n             /div \n         /div \n     /form  /div", 
            "title": "template"
        }, 
        {
            "location": "/views/#-viewsearch", 
            "text": "E' una view per effettuare una ricerca.", 
            "title": "- ViewSearch"
        }, 
        {
            "location": "/views/#-viewview", 
            "text": "E' una view per visualizzare i risultati in modalit\u00e0 lettura.", 
            "title": "- ViewView"
        }, 
        {
            "location": "/templates/", 
            "text": "Template\n\n\nClasse che estende \nComponent\n e incapsula il template per la visualizzazione di un render,\nall'interno di una vista.\n\n\nMetodi\n\n\n\n\nhtml() : ritorna l'html del template \n\n\n\n\nTemplate.factory : metodo statico per creare un template a partire nome\ne attrs secondo la convenzione sui nomi \n\n\nTemplate.getRenderContainer : ritorna l'elemento dom destinato\na contenere il render\n\n\nTemplate Implementati\n\n\nTemplateLeft\n\n\nUtilizzato soprattuto dalle views edit,insert,view\n\n\nMetodi \n\n\n\n\ntemplate() \n\n\n\n\ndiv class=\nview-field clearfix\n\n    \ndiv class=\ncol col-sm-12 view-msg\n data-label=\nmsg\n\n\n    \n/div\n\n    \ndiv class=\ncol col-sm-4\n\n        \ndiv class=\ncol col-sm-10\n\n\n            \nlabel data-html_label data-label=\nlabel\n/label\n\n\n        \n/div\n\n    \n/div\n\n\n\n    \ndiv class=\ncol col-sm-8\n data-render\n\n\n    \n/div\n\n    \ndiv class=\ncol col-sm-12\n\n        \nsmall data-label=\naddedLabel\n class=\nview-addedLabel\n/small\n\n    \n/div\n\n    \ndiv class=\ncol col-sm-12 view-field-error text-danger\n data-label=\nerror\n\n\n    \n/div\n\n\n/div\n\n\n\n\n\nTemplateTop\n\n\nUtilizzato soprattutto dalle views edit,insert,view per i controlli\nche hanno bisogno di spazio\n\n\nMetodi \n\n\n\n\ntemplate() \n\n\n\n\ndiv class=\nview-field clearfix\n\n    \ndiv class=\ncol col-sm-12\n\n        \nlabel data-label=\nlabel\n\n\n        \n/label\n\n    \n/div\n\n    \ndiv class=\ncol col-sm-12 view-msg\n data-label=\nmsg\n\n\n    \n/div\n\n    \ndiv class=\ncol col-sm-12\n data-render\n\n\n    \n/div\n\n    \ndiv class=\ncol col-sm-12 view-field-error\n data-label=\nerror\n\n\n    \n/div\n\n\n/div\n\n\n\n\n\nTemplateNo\n\n\nnessun template solo un div  utilizzato soprattutto dalla viewlist\n\n\nMetodi \n\n\n\n\ntemplate() \n\n\n\n\ndiv class=\ncol col-xs-12\n data-render\n\n\n/div\n\n\n\n\n\nTemplateSimple\n\n\nnessun template solo un div utilizzato soprattutto dalla viewlist\nMetodi \n\n\n\n\ntemplate() \n\n\n\n\ndiv data-render\n\n\n/div", 
            "title": "Templates"
        }, 
        {
            "location": "/templates/#template", 
            "text": "Classe che estende  Component  e incapsula il template per la visualizzazione di un render,\nall'interno di una vista.  Metodi   html() : ritorna l'html del template    Template.factory : metodo statico per creare un template a partire nome\ne attrs secondo la convenzione sui nomi   Template.getRenderContainer : ritorna l'elemento dom destinato\na contenere il render", 
            "title": "Template"
        }, 
        {
            "location": "/templates/#template-implementati", 
            "text": "", 
            "title": "Template Implementati"
        }, 
        {
            "location": "/templates/#templateleft", 
            "text": "Utilizzato soprattuto dalle views edit,insert,view  Metodi    template()    div class= view-field clearfix \n     div class= col col-sm-12 view-msg  data-label= msg \n\n     /div \n     div class= col col-sm-4 \n         div class= col col-sm-10 \n\n             label data-html_label data-label= label /label \n\n         /div \n     /div \n\n\n     div class= col col-sm-8  data-render \n\n     /div \n     div class= col col-sm-12 \n         small data-label= addedLabel  class= view-addedLabel /small \n     /div \n     div class= col col-sm-12 view-field-error text-danger  data-label= error \n\n     /div  /div", 
            "title": "TemplateLeft"
        }, 
        {
            "location": "/templates/#templatetop", 
            "text": "Utilizzato soprattutto dalle views edit,insert,view per i controlli\nche hanno bisogno di spazio  Metodi    template()    div class= view-field clearfix \n     div class= col col-sm-12 \n         label data-label= label \n\n         /label \n     /div \n     div class= col col-sm-12 view-msg  data-label= msg \n\n     /div \n     div class= col col-sm-12  data-render \n\n     /div \n     div class= col col-sm-12 view-field-error  data-label= error \n\n     /div  /div", 
            "title": "TemplateTop"
        }, 
        {
            "location": "/templates/#templateno", 
            "text": "nessun template solo un div  utilizzato soprattutto dalla viewlist  Metodi    template()    div class= col col-xs-12  data-render  /div", 
            "title": "TemplateNo"
        }, 
        {
            "location": "/templates/#templatesimple", 
            "text": "nessun template solo un div utilizzato soprattutto dalla viewlist\nMetodi    template()    div data-render  /div", 
            "title": "TemplateSimple"
        }, 
        {
            "location": "/renders/", 
            "text": "Render\n\n\nLa classe \nRender\n estende la classe \nComponent\n e rappresenta la classe per la gestione di un \nsingolo dato. La classe render pu\u00f2 essere utilizzata in maniera diretta, ma il loro utilizzo reale \u00e8 \ncome componenti dei singoli dati di una view. Dentro la view un render pu\u00f2 essere usato in 3 modi differenti, \nin modalit\u00e0 edit, search, view. La visualizzazione dell'oggetto render avviene con il metodo draw().\n\n\nLa classe Render deve essere consideata come una specie di classe astratta edefinisce alcuni metodi di uso generale e \ni metodi che i veri oggetti Render devono ridefinire per funzionare. Dobbiamo considerarla come la classe astratta che \ndefinisce l'interfaccia da definire nei vari oggetti Render concreti.\n\n\nil modo \u00e8 definito nelle costanti\n\n\nRender.VIEW = 'view';\nRender.EDIT = 'edit';\nRender.SEARCH = 'search';\n\n\n\n\nPropriet\u00e0\n\n\n\n\nkey\n : null - nome dell'oggetto render (il campo del db)\n\n\ntype\n : null - type dell'oggetto per gestire le Gerarchie di classi\n\n\n\n\nclassName\n : 'Render' - nome della Classe reale dell'oggetto\n\n\n\n\n\n\nelement_selector\n : '[data-render_element]' - marcatore html dell'elemento\n\n\n\n\ncontrol_selector\n : '[data-render_control]' - marcatore html del controllo html (input, select, ecc)\n\n\noperator_selector\n : '[data-control_operator]' - marcatore dell'input hidden dove \u00e8 memorizzato l'operatore in caso di modalit\u00e0 \nsearch\n\n\n\n\noperator\n : null - valore operatore\n\n\n\n\n\n\nvalue\n : null - valore oggetto\n\n\n\n\napp\n : null - identificatore dell'oggetto app della pagina\n\n\nresources\n : [] - vettore risorse da caricare prima di chiamare il finalize\n\n\nmetadata\n : {} - array associativo metadati che descrivono il dato\n\n\n\n\nMetodi\n\n\n\n\ninit(key,attributes)\n - ridefinizione del costruttore rispetto al Component. \n\n\n_setHtmlAttributes\n(el)\n\n\nchange\n : function ()\n\n\nclear\n : function ()\n\n\nsetMetadata\n : function (metadata)\n\n\n\n\nRender.factory = function (key,options) \u00e8 un metodo statico che permette di creare un Render\n- key \u00e8 il nome del campo da creare\n- options vettore associativo delle opzioni del render. La factory prende\noptions.type e options.mode per cercare il nome della classe da istanziare. Se non esistono\n prende come default 'input' come type ed 'edit' come mode.\nIl nome da cercare deve rispettare questa convezione:\n\"Render\"+pascalCase(options.type)+pascalCase(options.mode) esempio\n\n\nvar r = Render.factory('field', {\n    type : 'input_helped',\n    mode : 'edit'\n})\n// la factory cercher\u00e0 la definizione della classe 'RenderInputHelpedEdit'\n\n\n\n\nRender Implementati\n\n\nLa libreria mette a disposizione dei renders di default per gli usi pi\u00f9 comuni.\nQuesti possono essere ridefiniti, in caso vogliamo cambiare, nella nostra applicazione,\naspetto o funzionalit\u00e0. A questi definiti se ne possono aggiungere altri usando\nl'erediaret\u00e0. I renders vengono istanziati in automatico dalle views, oppure possono\nessere istanziati manualmente.\n\n\nRenderAutocomplete\n\n\nQuesto render \u00e8 stato pensato per il popolamento di una chiave con riferimento ad una tabella\nesterna permettendo la ricerca e inserendo la chiave_id  selezionata nel input nascosto.\nEsiste solo in modalit\u00e0 edit che si chiama \nRenderAutocompleteEdit\n\n\n- RenderAutocompleteEdit\n\n\nil suo template di default:\n\n\ndiv class=\ninput-group\n\n    \nspan style=\nheight:19px\n class=\ninput-group-addon\n id=\nbasic-addon1\n data-render_autocomplete_view data-lang=\nautocomplete-nonselezionato\n/span\n\n    \ninput data-render_control type=\nhidden\n name=\n value=\n\n    \ndiv data-render_element class=\nautosuggest\n data-minLength=\n1\n data-queryURL=\n\n        \ninput data-render_autocomplete_input type=\ntext\n name=\nsrc\n placeholder=\n class=\nform-control typeahead\n /\n\n    \n/div\n\n\n/div\n\n\n\n\n\nPropriet\u00e0\n\n\n\n\nrouteName\n : 'autocomplete' - nome della route da utilizzare per reperire i dati dal server\n\n\nautocomplete_view_selector\n : '[data-render_autocomplete_view]' - marcatore dove verr\u00e0 visualizzato\nle info della entry scelta\n\n\n\n\nautocomplete_input_selector\n : '[data-render_autocomplete_input]' - marcatore dove verr\u00e0 agganciato\nil plugins typehead di bootstrap.\n\n\n\n\n\n\nfields\n : [],                // campi da visualizzare dopo la selezione\n\n\n\n\nmetadata\n :\n\n\n\n\n{\n    modelData : null,           // dati del modello selezionato\n    autocompleteModel : null,   // nome modello da utilizzare nelle chiamate rest per la popolazione dei dati\n    method : null,              // eventuale parametro da mandare in get nella chiamata rest\n    separator : null,           // separatore da utillare nella visualizzazione dei campi in caso siano piu' di uno\n    n_items : null,             // numero di items da richiedere\n    model_description : []\n}\n\n\n\n\n\n\nresources\n : vettore delle risorse esterne che ha bisogno per funzionare. Questo render si appoggia a\ntypeahead bootstrap.\n\n\n\n\n[\n        'typeahead/bootstrap3-typeahead.min.js',\n        'typeahead/typeahead.bundle.js',\n        'typeahead/typeaheadjs.css'\n]\n\n\n\n\nMetodi\n\n\n\n\n\n\n_getLabelValue()\n : \n\n\n\n\nritorna il nome dell'inputview, tiene conto del fatto che si potrebbe trovare in un hasmany\n\n\ne il nome potrebbe avere le []\n */\n\n\n\n\n\n\n\n\n_getInputViewName\n : function () \n\n\n\n\n\n\n_getFieldValue\n : function() \n\n\n\n\n\n\n_createUrl\n : function () \n\n\n\n\n\n\n_renderSelectedValue\n : function () \n\n\n\n\n\n\ngetAutocompleteRow\n : function (element) \n\n\n\n\n\n\nev_selected\n : function (datum) \n\n\n\n\n\n\ngetValue\n : function () \n\n\n\n\n\n\nRenderBelongsto\n\n\nQuesto render \u00e8 solo per la visualizzazione di dati pi\u00f9 complessi che non sono formati da un solo\nvalore, in genere viene utilizzato per la rappresentazione di campi di una tabella\nesterna rispetto a campo corrente, istanza\n\n\n- RenderBelongstoView\n\n\nmarcatori\n- data-render_element\n\n\ntemplate generale\n\n\n    \ndiv data-render_element\n/div\n\n\n\n\n\nitemTemplate : vuoto. Da definire solo se si vuole avere una visualizzazinoe particolare\ndei campi. Per esempio supponiamo che il nostro belongsto punti ad una tabella \nclienti con questi dati\n\n\n{\n    nome : 'nome',\n    cognome : 'cognome',\n}\n\n\n\n\ndiv\n\n    \nspan data-field=\ncognome\n/span\n altro campo \nspan data-field=\nnome\n/span\n\n\n/div\n\n\n\n\n\nPropriet\u00e0\n\n\n\n\nseparator : null,\n\n\nfields: [],\n\n\n\n\nnullLabel : '',\n\n\ngetValue : function () {\n    var self = this;\n    return self.value;\n},\n\n\n\n\n\n\n});\n\n\nRenderBelongstoView\n\n\n\n\ntemplate() : function () {\n        return \ndiv data-render_element\n/div\n\n    },\n\n\n\n\n-itemTemplate : function () {\n        return false;\n    }\n\n\nRenderDateSelect\n\n\nQuesto render \u00e8 per l'inserimento o la visualizzazione di una data. Questo oggetto \nutilizza le selectbox html per l'inserimento di una data.\nE' fromato da una classe base \nDateSelectCommon\n che ha i metodi comuni alle 3 viste.\n\n\n- DateSelectCommon\n\n\nPropriet\u00e0\n\n\n\n\nyear_selector    : '[data-render_year]',\n\n\nmonth_selector    : '[data-render_month]',\n\n\nday_selector    : '[data-render_day]',\n\n\npicker_selector : '[data-render_picker]',\n\n\nh24 : true,\n\n\ntime : false,\n\n\ndateFormat : 'YYYY-MM-DD',\n\n\ntimeFormat : 'H:i:s',\n\n\nresources :[\n    'moment-with-locales.min.js',\n]\n\n\nselectProps : {\n        active : ['day','month','year'],    // select active in dateType select\n        startYear : (new Date().getFullYear()) -3,\n        endYear : (new Date().getFullYear()) +3,\n    },\n\n\n\n\nMetodi\n\n\n\n\n_setDateControls : function () - \n\n\n_changeDate : function () - \n\n\nsetValue : function (value) \n\n\ngetValue : function () \n\n\nclear : function ()\n\n\ngetDisplayFormat : function()\n\n\ngetFormat : function () \n\n\n\n\n- RenderDateSelectEdit\n\n\nEstende DateSelectCommon e si preoccupa della gestione della data in modalit\u00e0 edit.\n\n\nmarcatori:\n\n\n\n\ndata-render_element\n : container di tutto il render\n\n\ndata-render_control\n : input per la form che conterr\u00e0 il valore da spedire\n\n\ndata-render_day_container\n\n\ndata-render_day\n : select associata al giorno\n\n\ndata-render_month_container\n\n\ndata-render_month\n : select associata al mese\n\n\ndata-render_year_container\n\n\ndata-render_year\n : select associata all'anno\n\n\n\n\ntemplate\n\n\ndiv data-render_element  class=\ninput-group\n\n    \ninput data-render_control=\n type=\nhidden\n /\n\n    \ndiv class=\ninput-group-btn\n data-render_day_container\n\n        \nselect class=\nform-control\n data-render_day\n\n\n        \n/select\n\n    \n/div\n\n    \ndiv class=\ninput-group-btn\n data-render_month_container\n\n        \nselect class=\nform-control\n data-render_month\n\n\n        \n/select\n\n    \n/div\n\n    \ndiv class=\ninput-group-btn\n data-render_year_container\n\n        \nselect class=\nform-control\n data-render_year\n\n\n        \n/select\n\n    \n/div\n\n\n/div\n\n\n\n\n\n- RenderDateSelectSearch\n\n\nEstende \nRenderDateSelectEdit\n ridefinendo al render dove aggiunge il controllo per l'operatore di ricerca\ne cambia i nomi per la convenzione con view search\n\n\n- RenderDateSelectView\n\n\nEstende \nDateSelectCommon\n  \n\n\nmarcatori\n\n\n\n\ndata-render_element: container dove verr\u00e0 visualizzata la data\n\n\n\n\ntemplate \n\n\nspan data-render_element\n/span\n\n\n\n\n\nMetodi\n\n\n\n\ngetValue\n\n\nsetValue\n\n\n\n\nRenderDatePicker\n\n\nQuesto render \u00e8 per l'inserimento o la visualizzazione di una data. Questo oggetto \nutilizza il picker bootstrap per l'inserimento di una data.\n\n\nresources : {\n    edit :  [\n        'bootstrap-daterangepicker/daterangepicker.css',\n        'bootstrap-daterangepicker/moment.js',\n        'bootstrap-daterangepicker/daterangepicker.js',\n    ],\n    search : [\n        'bootstrap-daterangepicker/daterangepicker.css',\n        'bootstrap-daterangepicker/moment.js',\n        'bootstrap-daterangepicker/daterangepicker.js',\n    ],\n    view : []\n}\n\n\n\n\n- RenderDatePickerEdit\n\n\ntemplate\n\n\ndiv data-render_element\n\n    \ninput data-render_control=\n type=\nhidden\n /\n\n    \ndiv class=\ninput-group\n\n        \ninput data-render_picker class=\nform-control text-right\n autocomplete=\noff\n /\n\n        \na data-clear class=\ninput-group-addon\n href=\njavascript:void(0)\nspan \ni class=\nfa fa-times\n/i\n/span\n/a\n\n    \n/div\n\n\n/div\n\n\n\n\n\n- RenderDatePickerView\n\n\ntemplate\n\n\nspan data-render_element\n/span\n\n\n\n\n\nRenderDateFormatted\n\n\nQuesto render \u00e8 per l'inserimento o la visualizzazione di una data. Questo oggetto \nutilizza il picker nativo del broswer associato al type=date, se supportato.\n\n\n- RenderDateFormattedEdit\n\n\ntemplate\n\n\ndiv class=\nclearfix\n data-render_element\n\n    \ninput data-render_control=\n type=\nhidden\n /\n\n    \ndiv class=\ncol col-xs-6\n\n        \ninput data-date_formatted class=\nform-control\n type=\ndate\n /\n\n    \n/div\n\n    \ndiv class=\ncol col-xs-6\n\n        \ninput data-time_formatted class=\nform-control hide\n type=\ntime\n/\n\n    \n/div\n\n\n/div\n\n\n\n\n\nRenderBetweenDate\n\n\nQuesto render serve per la gestione di un range di date.\n\n\n-  RenderBetweenDateEdit\n\n\ntemplate\n\n\ndiv\n\n    \ndiv class=\ncol col-xs-6\n\n        \ndiv data-label=\napp.dal\n/div\n\n        \ndiv data-render_start\n/div\n\n    \n/div\n\n    \ndiv class=\ncol col-xs-6\n \n\n        \ndiv data-label=\napp.al\n/div\n\n        \ndiv data-render_end\n/div\n\n    \n/div\n\n\n/div\n\n\n\n\n\nRenderCaptcha\n\n\nQuesto render incapsula il captca con il suo relativo reload\n\n\nmarcatori\n\n\n\n\n\n\ncaptcha_img_selector : '[data-captcha_img]'\n\n\n\n\n\n\ntemplate() \n\n\n\n\n\n\ndiv class=\nrow\n\n    \ndiv class=\ncol-sm-4\n data-captcha_img  \n\n\n    \n/div\n\n    \ndiv class=\ncol-sm-4\n\n            \ninput data-render_control=\n class=\nform-control\n type=\ntext\n name=\n value=\n\n    \n/div\n\n    \ndiv class=\ncol-sm-4\n\n        \nbutton class=\nbtn btn-sm btn-default\n type=\nbutton\n data-button_reload\nReload\n/button\n\n    \n/div\n\n\n/div\n\n\n\n\n\nRenderRadio\n\n\n\n\ncaption_selector : '[data-render_caption]' - marcatore \n\n\n\n\nRenderCheckbox\n\n\nRenderCustom\n\n\nOggetto per chi vuole poter modificare l'html da renderizzare. Qui si pu\u00f2 inserire\ntutto quello che si vuole utilizzando che chiamate render e finalize.\n\n\nRenderDecimal\n\n\nOggetto per la gestione dei decimali con parte intera e decimale gestiti separatamente.\n\n\nRenderFaicon\n\n\nRenderHasmany\n\n\nOggetto per la gestione delle relazioni esterne. Permette l'inserimento e visualizzazione\ndi relazioni esterne in un'unica form.\n\n\nRenderHasmanyThrough\n\n\nOggetto per la gestione degli hasmany trought...\n\n\nRenderHasmanyUpload\n\n\nOggetto per la gestione di hasmany che prevedo un upload di una immagini o allegati\ncome pdf,csv,ecc.\n\n\nRenderImage\n\n\nOggetto per la renderizzazione di un'immagine proveniente da campo.\n\n\nRenderInput\n\n\noggetto per la gestione degli input standard.\n\n\nRenderInputHelped\n\n\nOggetto che prevede un input e dei tasti per inserimenti generali, in genere usato\nper input che prendono un'insieme di valori predefinito.\n\n\nRenderMap\n\n\nOggetto per la visualizzazione e la selezione di coordinate gps basato su googlemaps\n\n\nRenderMultiUpload\n\n\nRenderSelect\n\n\nOggetto per la selezione di un valore utilizzando le select\n\n\nRenderSwap\n\n\nRenderText\n\n\nRenderTextarea\n\n\nRenderTexthtml\n\n\nRenderTime\n\n\nRenderUpload", 
            "title": "Renders"
        }, 
        {
            "location": "/renders/#render", 
            "text": "La classe  Render  estende la classe  Component  e rappresenta la classe per la gestione di un \nsingolo dato. La classe render pu\u00f2 essere utilizzata in maniera diretta, ma il loro utilizzo reale \u00e8 \ncome componenti dei singoli dati di una view. Dentro la view un render pu\u00f2 essere usato in 3 modi differenti, \nin modalit\u00e0 edit, search, view. La visualizzazione dell'oggetto render avviene con il metodo draw().  La classe Render deve essere consideata come una specie di classe astratta edefinisce alcuni metodi di uso generale e \ni metodi che i veri oggetti Render devono ridefinire per funzionare. Dobbiamo considerarla come la classe astratta che \ndefinisce l'interfaccia da definire nei vari oggetti Render concreti.  il modo \u00e8 definito nelle costanti  Render.VIEW = 'view';\nRender.EDIT = 'edit';\nRender.SEARCH = 'search';", 
            "title": "Render"
        }, 
        {
            "location": "/renders/#proprieta", 
            "text": "key  : null - nome dell'oggetto render (il campo del db)  type  : null - type dell'oggetto per gestire le Gerarchie di classi   className  : 'Render' - nome della Classe reale dell'oggetto    element_selector  : '[data-render_element]' - marcatore html dell'elemento   control_selector  : '[data-render_control]' - marcatore html del controllo html (input, select, ecc)  operator_selector  : '[data-control_operator]' - marcatore dell'input hidden dove \u00e8 memorizzato l'operatore in caso di modalit\u00e0 \nsearch   operator  : null - valore operatore    value  : null - valore oggetto   app  : null - identificatore dell'oggetto app della pagina  resources  : [] - vettore risorse da caricare prima di chiamare il finalize  metadata  : {} - array associativo metadati che descrivono il dato", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/renders/#metodi", 
            "text": "init(key,attributes)  - ridefinizione del costruttore rispetto al Component.   _setHtmlAttributes (el)  change  : function ()  clear  : function ()  setMetadata  : function (metadata)   Render.factory = function (key,options) \u00e8 un metodo statico che permette di creare un Render\n- key \u00e8 il nome del campo da creare\n- options vettore associativo delle opzioni del render. La factory prende\noptions.type e options.mode per cercare il nome della classe da istanziare. Se non esistono\n prende come default 'input' come type ed 'edit' come mode.\nIl nome da cercare deve rispettare questa convezione:\n\"Render\"+pascalCase(options.type)+pascalCase(options.mode) esempio  var r = Render.factory('field', {\n    type : 'input_helped',\n    mode : 'edit'\n})\n// la factory cercher\u00e0 la definizione della classe 'RenderInputHelpedEdit'", 
            "title": "Metodi"
        }, 
        {
            "location": "/renders/#render-implementati", 
            "text": "La libreria mette a disposizione dei renders di default per gli usi pi\u00f9 comuni.\nQuesti possono essere ridefiniti, in caso vogliamo cambiare, nella nostra applicazione,\naspetto o funzionalit\u00e0. A questi definiti se ne possono aggiungere altri usando\nl'erediaret\u00e0. I renders vengono istanziati in automatico dalle views, oppure possono\nessere istanziati manualmente.", 
            "title": "Render Implementati"
        }, 
        {
            "location": "/renders/#renderautocomplete", 
            "text": "Questo render \u00e8 stato pensato per il popolamento di una chiave con riferimento ad una tabella\nesterna permettendo la ricerca e inserendo la chiave_id  selezionata nel input nascosto.\nEsiste solo in modalit\u00e0 edit che si chiama  RenderAutocompleteEdit", 
            "title": "RenderAutocomplete"
        }, 
        {
            "location": "/renders/#-renderautocompleteedit", 
            "text": "il suo template di default:  div class= input-group \n     span style= height:19px  class= input-group-addon  id= basic-addon1  data-render_autocomplete_view data-lang= autocomplete-nonselezionato /span \n     input data-render_control type= hidden  name=  value= \n     div data-render_element class= autosuggest  data-minLength= 1  data-queryURL= \n         input data-render_autocomplete_input type= text  name= src  placeholder=  class= form-control typeahead  / \n     /div  /div", 
            "title": "- RenderAutocompleteEdit"
        }, 
        {
            "location": "/renders/#proprieta_1", 
            "text": "routeName  : 'autocomplete' - nome della route da utilizzare per reperire i dati dal server  autocomplete_view_selector  : '[data-render_autocomplete_view]' - marcatore dove verr\u00e0 visualizzato\nle info della entry scelta   autocomplete_input_selector  : '[data-render_autocomplete_input]' - marcatore dove verr\u00e0 agganciato\nil plugins typehead di bootstrap.    fields  : [],                // campi da visualizzare dopo la selezione   metadata  :   {\n    modelData : null,           // dati del modello selezionato\n    autocompleteModel : null,   // nome modello da utilizzare nelle chiamate rest per la popolazione dei dati\n    method : null,              // eventuale parametro da mandare in get nella chiamata rest\n    separator : null,           // separatore da utillare nella visualizzazione dei campi in caso siano piu' di uno\n    n_items : null,             // numero di items da richiedere\n    model_description : []\n}   resources  : vettore delle risorse esterne che ha bisogno per funzionare. Questo render si appoggia a\ntypeahead bootstrap.   [\n        'typeahead/bootstrap3-typeahead.min.js',\n        'typeahead/typeahead.bundle.js',\n        'typeahead/typeaheadjs.css'\n]", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/renders/#metodi_1", 
            "text": "_getLabelValue()  :    ritorna il nome dell'inputview, tiene conto del fatto che si potrebbe trovare in un hasmany  e il nome potrebbe avere le []\n */     _getInputViewName  : function ()     _getFieldValue  : function()     _createUrl  : function ()     _renderSelectedValue  : function ()     getAutocompleteRow  : function (element)     ev_selected  : function (datum)     getValue  : function ()", 
            "title": "Metodi"
        }, 
        {
            "location": "/renders/#renderbelongsto", 
            "text": "Questo render \u00e8 solo per la visualizzazione di dati pi\u00f9 complessi che non sono formati da un solo\nvalore, in genere viene utilizzato per la rappresentazione di campi di una tabella\nesterna rispetto a campo corrente, istanza", 
            "title": "RenderBelongsto"
        }, 
        {
            "location": "/renders/#-renderbelongstoview", 
            "text": "marcatori\n- data-render_element  template generale       div data-render_element /div   itemTemplate : vuoto. Da definire solo se si vuole avere una visualizzazinoe particolare\ndei campi. Per esempio supponiamo che il nostro belongsto punti ad una tabella \nclienti con questi dati  {\n    nome : 'nome',\n    cognome : 'cognome',\n}  div \n     span data-field= cognome /span  altro campo  span data-field= nome /span  /div", 
            "title": "- RenderBelongstoView"
        }, 
        {
            "location": "/renders/#proprieta_2", 
            "text": "separator : null,  fields: [],   nullLabel : '',  getValue : function () {\n    var self = this;\n    return self.value;\n},    });", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/renders/#renderbelongstoview", 
            "text": "template() : function () {\n        return  div data-render_element /div \n    },   -itemTemplate : function () {\n        return false;\n    }", 
            "title": "RenderBelongstoView"
        }, 
        {
            "location": "/renders/#renderdateselect", 
            "text": "Questo render \u00e8 per l'inserimento o la visualizzazione di una data. Questo oggetto \nutilizza le selectbox html per l'inserimento di una data.\nE' fromato da una classe base  DateSelectCommon  che ha i metodi comuni alle 3 viste.", 
            "title": "RenderDateSelect"
        }, 
        {
            "location": "/renders/#-dateselectcommon", 
            "text": "", 
            "title": "- DateSelectCommon"
        }, 
        {
            "location": "/renders/#proprieta_3", 
            "text": "year_selector    : '[data-render_year]',  month_selector    : '[data-render_month]',  day_selector    : '[data-render_day]',  picker_selector : '[data-render_picker]',  h24 : true,  time : false,  dateFormat : 'YYYY-MM-DD',  timeFormat : 'H:i:s',  resources :[\n    'moment-with-locales.min.js',\n]  selectProps : {\n        active : ['day','month','year'],    // select active in dateType select\n        startYear : (new Date().getFullYear()) -3,\n        endYear : (new Date().getFullYear()) +3,\n    },", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/renders/#metodi_2", 
            "text": "_setDateControls : function () -   _changeDate : function () -   setValue : function (value)   getValue : function ()   clear : function ()  getDisplayFormat : function()  getFormat : function ()", 
            "title": "Metodi"
        }, 
        {
            "location": "/renders/#-renderdateselectedit", 
            "text": "Estende DateSelectCommon e si preoccupa della gestione della data in modalit\u00e0 edit.", 
            "title": "- RenderDateSelectEdit"
        }, 
        {
            "location": "/renders/#marcatori", 
            "text": "data-render_element  : container di tutto il render  data-render_control  : input per la form che conterr\u00e0 il valore da spedire  data-render_day_container  data-render_day  : select associata al giorno  data-render_month_container  data-render_month  : select associata al mese  data-render_year_container  data-render_year  : select associata all'anno", 
            "title": "marcatori:"
        }, 
        {
            "location": "/renders/#template", 
            "text": "div data-render_element  class= input-group \n     input data-render_control=  type= hidden  / \n     div class= input-group-btn  data-render_day_container \n         select class= form-control  data-render_day \n\n         /select \n     /div \n     div class= input-group-btn  data-render_month_container \n         select class= form-control  data-render_month \n\n         /select \n     /div \n     div class= input-group-btn  data-render_year_container \n         select class= form-control  data-render_year \n\n         /select \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#-renderdateselectsearch", 
            "text": "Estende  RenderDateSelectEdit  ridefinendo al render dove aggiunge il controllo per l'operatore di ricerca\ne cambia i nomi per la convenzione con view search", 
            "title": "- RenderDateSelectSearch"
        }, 
        {
            "location": "/renders/#-renderdateselectview", 
            "text": "Estende  DateSelectCommon     marcatori   data-render_element: container dove verr\u00e0 visualizzata la data   template   span data-render_element /span", 
            "title": "- RenderDateSelectView"
        }, 
        {
            "location": "/renders/#metodi_3", 
            "text": "getValue  setValue", 
            "title": "Metodi"
        }, 
        {
            "location": "/renders/#renderdatepicker", 
            "text": "Questo render \u00e8 per l'inserimento o la visualizzazione di una data. Questo oggetto \nutilizza il picker bootstrap per l'inserimento di una data.  resources : {\n    edit :  [\n        'bootstrap-daterangepicker/daterangepicker.css',\n        'bootstrap-daterangepicker/moment.js',\n        'bootstrap-daterangepicker/daterangepicker.js',\n    ],\n    search : [\n        'bootstrap-daterangepicker/daterangepicker.css',\n        'bootstrap-daterangepicker/moment.js',\n        'bootstrap-daterangepicker/daterangepicker.js',\n    ],\n    view : []\n}", 
            "title": "RenderDatePicker"
        }, 
        {
            "location": "/renders/#-renderdatepickeredit", 
            "text": "", 
            "title": "- RenderDatePickerEdit"
        }, 
        {
            "location": "/renders/#template_1", 
            "text": "div data-render_element \n     input data-render_control=  type= hidden  / \n     div class= input-group \n         input data-render_picker class= form-control text-right  autocomplete= off  / \n         a data-clear class= input-group-addon  href= javascript:void(0) span  i class= fa fa-times /i /span /a \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#-renderdatepickerview", 
            "text": "", 
            "title": "- RenderDatePickerView"
        }, 
        {
            "location": "/renders/#template_2", 
            "text": "span data-render_element /span", 
            "title": "template"
        }, 
        {
            "location": "/renders/#renderdateformatted", 
            "text": "Questo render \u00e8 per l'inserimento o la visualizzazione di una data. Questo oggetto \nutilizza il picker nativo del broswer associato al type=date, se supportato.", 
            "title": "RenderDateFormatted"
        }, 
        {
            "location": "/renders/#-renderdateformattededit", 
            "text": "", 
            "title": "- RenderDateFormattedEdit"
        }, 
        {
            "location": "/renders/#template_3", 
            "text": "div class= clearfix  data-render_element \n     input data-render_control=  type= hidden  / \n     div class= col col-xs-6 \n         input data-date_formatted class= form-control  type= date  / \n     /div \n     div class= col col-xs-6 \n         input data-time_formatted class= form-control hide  type= time / \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#renderbetweendate", 
            "text": "Questo render serve per la gestione di un range di date.", 
            "title": "RenderBetweenDate"
        }, 
        {
            "location": "/renders/#-renderbetweendateedit", 
            "text": "", 
            "title": "-  RenderBetweenDateEdit"
        }, 
        {
            "location": "/renders/#template_4", 
            "text": "div \n     div class= col col-xs-6 \n         div data-label= app.dal /div \n         div data-render_start /div \n     /div \n     div class= col col-xs-6   \n         div data-label= app.al /div \n         div data-render_end /div \n     /div  /div", 
            "title": "template"
        }, 
        {
            "location": "/renders/#rendercaptcha", 
            "text": "Questo render incapsula il captca con il suo relativo reload  marcatori    captcha_img_selector : '[data-captcha_img]'    template()     div class= row \n     div class= col-sm-4  data-captcha_img   \n\n     /div \n     div class= col-sm-4 \n             input data-render_control=  class= form-control  type= text  name=  value= \n     /div \n     div class= col-sm-4 \n         button class= btn btn-sm btn-default  type= button  data-button_reload Reload /button \n     /div  /div", 
            "title": "RenderCaptcha"
        }, 
        {
            "location": "/renders/#renderradio", 
            "text": "caption_selector : '[data-render_caption]' - marcatore", 
            "title": "RenderRadio"
        }, 
        {
            "location": "/renders/#rendercheckbox", 
            "text": "", 
            "title": "RenderCheckbox"
        }, 
        {
            "location": "/renders/#rendercustom", 
            "text": "Oggetto per chi vuole poter modificare l'html da renderizzare. Qui si pu\u00f2 inserire\ntutto quello che si vuole utilizzando che chiamate render e finalize.", 
            "title": "RenderCustom"
        }, 
        {
            "location": "/renders/#renderdecimal", 
            "text": "Oggetto per la gestione dei decimali con parte intera e decimale gestiti separatamente.", 
            "title": "RenderDecimal"
        }, 
        {
            "location": "/renders/#renderfaicon", 
            "text": "", 
            "title": "RenderFaicon"
        }, 
        {
            "location": "/renders/#renderhasmany", 
            "text": "Oggetto per la gestione delle relazioni esterne. Permette l'inserimento e visualizzazione\ndi relazioni esterne in un'unica form.", 
            "title": "RenderHasmany"
        }, 
        {
            "location": "/renders/#renderhasmanythrough", 
            "text": "Oggetto per la gestione degli hasmany trought...", 
            "title": "RenderHasmanyThrough"
        }, 
        {
            "location": "/renders/#renderhasmanyupload", 
            "text": "Oggetto per la gestione di hasmany che prevedo un upload di una immagini o allegati\ncome pdf,csv,ecc.", 
            "title": "RenderHasmanyUpload"
        }, 
        {
            "location": "/renders/#renderimage", 
            "text": "Oggetto per la renderizzazione di un'immagine proveniente da campo.", 
            "title": "RenderImage"
        }, 
        {
            "location": "/renders/#renderinput", 
            "text": "oggetto per la gestione degli input standard.", 
            "title": "RenderInput"
        }, 
        {
            "location": "/renders/#renderinputhelped", 
            "text": "Oggetto che prevede un input e dei tasti per inserimenti generali, in genere usato\nper input che prendono un'insieme di valori predefinito.", 
            "title": "RenderInputHelped"
        }, 
        {
            "location": "/renders/#rendermap", 
            "text": "Oggetto per la visualizzazione e la selezione di coordinate gps basato su googlemaps", 
            "title": "RenderMap"
        }, 
        {
            "location": "/renders/#rendermultiupload", 
            "text": "", 
            "title": "RenderMultiUpload"
        }, 
        {
            "location": "/renders/#renderselect", 
            "text": "Oggetto per la selezione di un valore utilizzando le select", 
            "title": "RenderSelect"
        }, 
        {
            "location": "/renders/#renderswap", 
            "text": "", 
            "title": "RenderSwap"
        }, 
        {
            "location": "/renders/#rendertext", 
            "text": "", 
            "title": "RenderText"
        }, 
        {
            "location": "/renders/#rendertextarea", 
            "text": "", 
            "title": "RenderTextarea"
        }, 
        {
            "location": "/renders/#rendertexthtml", 
            "text": "", 
            "title": "RenderTexthtml"
        }, 
        {
            "location": "/renders/#rendertime", 
            "text": "", 
            "title": "RenderTime"
        }, 
        {
            "location": "/renders/#renderupload", 
            "text": "", 
            "title": "RenderUpload"
        }, 
        {
            "location": "/actions/", 
            "text": "Actions\n\n\nAction\n\n\nClasse principale delle azioni. Le azioni rappresentano l'aggancio per le interazioni con \nl'utente sulle views, dashboard oppure semplici bottoni html. Da questa classe\nsono state definite altri due azioni generali la RecordAction e la CollectionAction che\nfondamentalmente dividono il comportamento in azioni che agiscono sul singolo record\ne azioni che agiscono su una collezione di record.\n\n\nPropriet\u00e0\n\n\n\n\ncontainer\n : default null\n\n\nhtmlEvent\n : default 'onclick'      evento html associato che fa scattare l'azione\n\n\ntype\n : default null pu\u00f2 essere record o collection\n\n\ncontrolType\n : default 'button',\n\n\ntext\n : '',\n\n\nicon\n : '',\n\n\ncssClass\n : '',\n\n\ntarget\n : '',\n\n\nhref\n : '',\n\n\nparams\n : [],\n\n\nenabled\n : true,\n\n\nvisible\n : true,\n\n\ntitle\n : '',\n\n\n_htmlProperties\n : ['text','icon','cssClass','target','href','params','title','enabled','visible','onclick','onchange'],\n\n\n\n\nMetodi\n\n\n\n\nexecute\n : metodo chiamato quando l'azione viene cliccata\n\n\ntemplate\n : metodo che restituisce i template di tipo button o link \n\n\nbuttonTemplate\n : template con type button\n\n\nlinkTemplate\n : template con type link\n\n\ncallback\n : se definita viene chiamata al termi dell'execute\n\n\n_getData\n : ritorna i valori di instanza di tutti gli attributi html dell'azione\n\n\n\n\nRecordAction\n\n\nLe recordAction sono quelle utilizzate nelle liste per ogni record\n\n\nPropriet\u00e0\n\n\n\n\nclassName\n : 'RecordAction',\n\n\ntype\n : 'record',\n\n\n\n\ncssClass\n : 'btn btn-default btn-xs btn-group',\n\n\n\n\n\n\nbuttonTemplate\n : function ()\n\n\n\n\n\n\nbutton data-action type=\nbutton\n data-visible=visible data-class=\ncssClass\n  data-attrs=\n{'title':title,'data-params':params,'target':target}\n data-addclass=\nenabled?'':'disabled'\n\n    \ni data-remove=\n!icon\n data-class=\nicon\n/i\n\n    \nspan data-field=\ntext\n/span\n\n\n/button\n \n\n\n\n\n\n\nlinkTemplate\n : function () \n\n\n\n\na data-href=\nhref\n data-visible=\nvisible\n data-class=\ncssClass\n  data-attrs=\n{'title':title,'data-params':params,'target':target}\n target=\n_blank\n data-addclass=\nenabled?'':'disabled'\n\n    \ni data-remove=\n!icon\n data-class=\nicon\n/i\n\n    \nspan data-field=\ntext\n/span\n\n\n/a\n   \n\n\n\n\nCollectionAction\n\n\nPropriet\u00e0\n\n\n\n\nclassName\n : 'CollectionAction'\n\n\ntype\n : 'collection'\n\n\nbuttonTemplate\n : \n\n\n\n\nbutton data-action type=\nbutton\n data-visible=visible data-attrs=\n{'title':title,'data-params':params,'target':target}\n data-class=\ncssClass\n data-addclass=\nenabled?'':'disabled'\n\n    \ni data-remove=\n!icon\n data-class=\nicon\n/i\n\n    \nspan data-field=\ntext\n/span\n\n\n/button\n \n\n\n\n\n\n\nlinkTemplate\n : \n\n\n\n\na data-href=\nhref\n data-visible=\nvisible\n data-class=\ncssClass\n  data-attrs=\n{'title':title,'data-params':params,'target':target}\n target=\n_blank\n data-addclass=\nenabled?'':'disabled'\n\n    \ni data-remove=\n!icon\n data-class=\nicon\n/i\n\n    \nspan data-field=\ntext\n/span\n\n\n/a\n  \n\n\n\n\nAction Implementate\n\n\n- ActionEdit:\n\n\nEstende \nRecordAction\n. Azione pensata per l'utilizzo dentro una view list  l'edit di un record all'interno della lista. \n\n\nPropriet\u00e0\n\n\n\n\nclassName\n : 'ActionEdit'\n\n\ntitle\n : 'Modifica',\n\n\nicon\n : 'fa fa-edit',\n\n\nmultiText\n : 'Modifica',\n\n\nrouteName\n : 'page_edit'\n\n\n\n\nMetodi \n\n\n\n\nexecute\n - utilizza la route per una pagina in edit per richiamare la pagina nuova\n\n\n\n\n- ActionInsert\n\n\nEstende \nCollectionAction\n. Azione pensata per l'utilizzo dentro una view list  per l'inserimento di un record all'interno della lista.\n\n\nPropriet\u00e0\n\n\n\n\nclassName\n : 'ActionInsert',\n\n\ntitle\n : 'Inserisci',\n\n\nicon\n : 'fa fa-plus text-success',\n\n\ncssClass\n : 'btn btn-default btn-xs text-success',\n\n\ntext\n : 'Nuovo',\n\n\nmultiText\n : 'Nuovo',\n\n\nrouteName\n : 'page_insert',\n\n\n\n\nMetodi\n\n\n\n\nexecute\n - utilizza al route per una pagina in insert per richiamare la pagina nuova\n\n\n\n\n- ActionSave\n\n\nEstende \nRecordAction\n. Azione pensata per l'utilizzo dentro una view edit per salvare le modifiche\n\n\n\n\nclassName\n : 'ActionSave',\n\n\ntitle\n : 'Salva',\n\n\ntext\n : 'Salva',\n\n\n\n\nmultiText\n : 'Salva',\n\n\n\n\n\n\nexecute\n - utilizza le route update o save a seconda se il modello dati \u00e8 in modifica o insert\n\n\n\n\n\n\n- ActionBack\n\n\nEstende \nRecordAction\n. Azione pensata per l'utilizzo dentro una view edit ritorna alla pagina di provienienza\n\n\n\n\nclassName\n : 'ActionBack',\n\n\ntitle\n : 'Indietro',\n\n\n\n\ntext\n : 'Torna indietro',\n\n\n\n\n\n\nexecute\n esegue sostanzialmente un history.back();\n\n\n\n\n\n\n- ActionView\n\n\nEstende \nRecordAction\n. Azione pensata per l'utilizzo dentro una view list  per la visualizzazione di un record all'interno della lista.\n\n\nPropriet\u00e0\n\n\n\n\nclassName\n : 'ActionView',\n\n\ntitle\n :'Visualizza',\n\n\nicon\n:  'fa fa-list-alt',\n\n\nmultiText\n : 'Visualizza',\n\n\nrouteName\n : 'page_view',\n\n\n\n\nMetodi\n\n\n\n\nexecute\n - utilizza al route per una pagina in view per richiamare la pagina nuova\n\n\n\n\n- ActionDelete\n\n\nEstende \nRecordAction\n. Azione pensata per l'utilizzo dentro una view list  per la cancellazione di un record all'interno della lista.\n\n\nPropriet\u00e0\n\n\n\n\nclassName\n : 'ActionDelete',\n\n\ntitle\n : 'Cancella',\n\n\nicon\n:  'fa fa-remove text-danger',\n\n\nmultiText\n : 'Cancella',\n\n\n\n\nMetodi\n\n\n\n\nexecute\n - utilizza al route delete per eseguire la richiesta di cancellazione. Prima chiede conferma\n\n\ncallback\n - metodo richiamata alla fine della execute\n\n\n\n\n- ActionMultiDelete\n\n\nEstende \nCollectionAction\n. Azione pensata per l'utilizzo dentro una view list  per la cancellazione di tutti i record selezionati nella lista.\n\n\nPropriet\u00e0\n\n\n\n\nclassName\n : 'ActionMultiDelete',\n\n\ntitle\n : 'Cancella selezionati',\n\n\nicon\n:  'fa fa-trash text-danger',\n\n\ncssClass\n : 'btn btn-default btn-xs text-danger',\n\n\ntext\n : 'Selezionati',\n\n\nneedSelection\n : true,\n\n\nmultiText\n : 'Cancella Selezionati',\n\n\n\n\nMetodi\n\n\n\n\nexecute\n - utilizza al route delete per eseguire la richiesta di cancellazione. Prima chiede conferma\n\n\ncallback\n - metodo richiamata alla fine della execute\n\n\n\n\n- ActionSearch\n\n\nEstende \nCollectionAction\n. Azione pensata per l'utilizzo dentro una view search  per la ricerca dei record con i filtri della view.\n\n\nPropriet\u00e0\n\n\n\n\nclassName\n : 'ActionSearch',\n\n\ntitle\n : 'Ricerca',\n\n\nicon\n:  'fa fa-search',\n\n\ncssClass\n : 'btn btn-xs btn-default text-info',\n\n\ntext\n : 'Cerca',\n\n\n\n\nMetodi\n\n\n\n\nexecute\n - richiama la pagina con i parametri in get presenti nella form della vista\n\n\n\n\n- ActionReset\n\n\nEstende \nCollectionAction\n. Azione pensata per l'utilizzo dentro una view search il reset dei parametri di \nricerca impostati\n\n\nPropriet\u00e0\n\n\n\n\nclassName\n : 'ActionReset',\n\n\ntitle\n : 'Annulla filtri ricerca',\n\n\ncssClass\n : 'btn btn-xs btn-default',\n\n\ntext\n : 'Annulla filtri',\n\n\n\n\nMetodi\n\n\n\n\nexecute\n - richiama il metodo clear su tutti i renders della view e richiama la callback\n\n\ncallback\n - metodo chiamato dopo il reset dei controlli\n\n\n\n\n- ActionNextPage\n\n\nnextpage del navigatore di una lista\n\n\nPropriet\u00e0  \n\n- \nicon\n : 'fa fa-angle-right',\n- \ncssClass\n : 'btn btn-default btn-xs',\n\n\nMetodi \n\n\n\n\nexecute\n : incrementa di uno il parametro page della route associata alla lista\n\n\n\n\n- ActionPrevPage\n\n\nPagina precendente di una view\n\n\nPropriet\u00e0\n\n\n\n\nicon\n : 'fa fa-angle-left',\n\n\n\n\ncssClass\n : 'btn btn-default btn-xs'\n\n\n\n\n\n\nexecute\n : Decrementa di uno il parametro page della route associata alla lista\n\n\n\n\n\n\n- ActionFirstPage\n\n\n\n\nicon\n : 'fa fa fa-angle-double-left',\n\n\ncssClass\n : 'btn btn-default btn-xs',\n\n\nexecute\n : Setta il parametro page a uno della route associata alla lista\n\n\n\n\n- actionLastPage\n\n\n\n\nicon\n : 'fa fa fa-angle-double-right',\n\n\ncssClass\n : 'btn btn-default btn-xs',\n\n\nexecute\n : Setta il parametro page all'ultima pagina della route associata alla lista\n\n\n\n\n- actionPerPage\n\n\n\n\nicon\n : 'fa fa fa-angle-double-right',\n\n\nhtmlEvent\n : 'onchange',\n\n\ncssClass\n : 'btn btn-default btn-xs',\n\n\n\n\nexecute\n : setta il parametro page e paginateNumber della route associata alla lista\n\n\n\n\n\n\n_getData\n : setta i valori della select prendendoli da data.pagination.pagination_steps\n\n\n\n\n\n\nbuttonTemplate\n : \n\n\n\n\n\n\nselect data-field=\npagination.per_page\n data-source=\npagination.pagination_steps\n \n        data-sourceorder=\npagination.pagination_order\n\n        data-attrs=`+ special_attrs + `  class=\npagination-input\n\n\n\n/select", 
            "title": "Actions"
        }, 
        {
            "location": "/actions/#actions", 
            "text": "", 
            "title": "Actions"
        }, 
        {
            "location": "/actions/#action", 
            "text": "Classe principale delle azioni. Le azioni rappresentano l'aggancio per le interazioni con \nl'utente sulle views, dashboard oppure semplici bottoni html. Da questa classe\nsono state definite altri due azioni generali la RecordAction e la CollectionAction che\nfondamentalmente dividono il comportamento in azioni che agiscono sul singolo record\ne azioni che agiscono su una collezione di record.", 
            "title": "Action"
        }, 
        {
            "location": "/actions/#proprieta", 
            "text": "container  : default null  htmlEvent  : default 'onclick'      evento html associato che fa scattare l'azione  type  : default null pu\u00f2 essere record o collection  controlType  : default 'button',  text  : '',  icon  : '',  cssClass  : '',  target  : '',  href  : '',  params  : [],  enabled  : true,  visible  : true,  title  : '',  _htmlProperties  : ['text','icon','cssClass','target','href','params','title','enabled','visible','onclick','onchange'],", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/actions/#metodi", 
            "text": "execute  : metodo chiamato quando l'azione viene cliccata  template  : metodo che restituisce i template di tipo button o link   buttonTemplate  : template con type button  linkTemplate  : template con type link  callback  : se definita viene chiamata al termi dell'execute  _getData  : ritorna i valori di instanza di tutti gli attributi html dell'azione", 
            "title": "Metodi"
        }, 
        {
            "location": "/actions/#recordaction", 
            "text": "Le recordAction sono quelle utilizzate nelle liste per ogni record", 
            "title": "RecordAction"
        }, 
        {
            "location": "/actions/#proprieta_1", 
            "text": "className  : 'RecordAction',  type  : 'record',   cssClass  : 'btn btn-default btn-xs btn-group',    buttonTemplate  : function ()    button data-action type= button  data-visible=visible data-class= cssClass   data-attrs= {'title':title,'data-params':params,'target':target}  data-addclass= enabled?'':'disabled' \n     i data-remove= !icon  data-class= icon /i \n     span data-field= text /span  /button     linkTemplate  : function ()    a data-href= href  data-visible= visible  data-class= cssClass   data-attrs= {'title':title,'data-params':params,'target':target}  target= _blank  data-addclass= enabled?'':'disabled' \n     i data-remove= !icon  data-class= icon /i \n     span data-field= text /span  /a", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/actions/#collectionaction", 
            "text": "", 
            "title": "CollectionAction"
        }, 
        {
            "location": "/actions/#proprieta_2", 
            "text": "className  : 'CollectionAction'  type  : 'collection'  buttonTemplate  :    button data-action type= button  data-visible=visible data-attrs= {'title':title,'data-params':params,'target':target}  data-class= cssClass  data-addclass= enabled?'':'disabled' \n     i data-remove= !icon  data-class= icon /i \n     span data-field= text /span  /button     linkTemplate  :    a data-href= href  data-visible= visible  data-class= cssClass   data-attrs= {'title':title,'data-params':params,'target':target}  target= _blank  data-addclass= enabled?'':'disabled' \n     i data-remove= !icon  data-class= icon /i \n     span data-field= text /span  /a", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/actions/#action-implementate", 
            "text": "", 
            "title": "Action Implementate"
        }, 
        {
            "location": "/actions/#-actionedit", 
            "text": "Estende  RecordAction . Azione pensata per l'utilizzo dentro una view list  l'edit di un record all'interno della lista.   Propriet\u00e0   className  : 'ActionEdit'  title  : 'Modifica',  icon  : 'fa fa-edit',  multiText  : 'Modifica',  routeName  : 'page_edit'   Metodi    execute  - utilizza la route per una pagina in edit per richiamare la pagina nuova", 
            "title": "- ActionEdit:"
        }, 
        {
            "location": "/actions/#-actioninsert", 
            "text": "Estende  CollectionAction . Azione pensata per l'utilizzo dentro una view list  per l'inserimento di un record all'interno della lista.  Propriet\u00e0   className  : 'ActionInsert',  title  : 'Inserisci',  icon  : 'fa fa-plus text-success',  cssClass  : 'btn btn-default btn-xs text-success',  text  : 'Nuovo',  multiText  : 'Nuovo',  routeName  : 'page_insert',   Metodi   execute  - utilizza al route per una pagina in insert per richiamare la pagina nuova", 
            "title": "- ActionInsert"
        }, 
        {
            "location": "/actions/#-actionsave", 
            "text": "Estende  RecordAction . Azione pensata per l'utilizzo dentro una view edit per salvare le modifiche   className  : 'ActionSave',  title  : 'Salva',  text  : 'Salva',   multiText  : 'Salva',    execute  - utilizza le route update o save a seconda se il modello dati \u00e8 in modifica o insert", 
            "title": "- ActionSave"
        }, 
        {
            "location": "/actions/#-actionback", 
            "text": "Estende  RecordAction . Azione pensata per l'utilizzo dentro una view edit ritorna alla pagina di provienienza   className  : 'ActionBack',  title  : 'Indietro',   text  : 'Torna indietro',    execute  esegue sostanzialmente un history.back();", 
            "title": "- ActionBack"
        }, 
        {
            "location": "/actions/#-actionview", 
            "text": "Estende  RecordAction . Azione pensata per l'utilizzo dentro una view list  per la visualizzazione di un record all'interno della lista.  Propriet\u00e0   className  : 'ActionView',  title  :'Visualizza',  icon :  'fa fa-list-alt',  multiText  : 'Visualizza',  routeName  : 'page_view',   Metodi   execute  - utilizza al route per una pagina in view per richiamare la pagina nuova", 
            "title": "- ActionView"
        }, 
        {
            "location": "/actions/#-actiondelete", 
            "text": "Estende  RecordAction . Azione pensata per l'utilizzo dentro una view list  per la cancellazione di un record all'interno della lista.  Propriet\u00e0   className  : 'ActionDelete',  title  : 'Cancella',  icon :  'fa fa-remove text-danger',  multiText  : 'Cancella',   Metodi   execute  - utilizza al route delete per eseguire la richiesta di cancellazione. Prima chiede conferma  callback  - metodo richiamata alla fine della execute", 
            "title": "- ActionDelete"
        }, 
        {
            "location": "/actions/#-actionmultidelete", 
            "text": "Estende  CollectionAction . Azione pensata per l'utilizzo dentro una view list  per la cancellazione di tutti i record selezionati nella lista.  Propriet\u00e0   className  : 'ActionMultiDelete',  title  : 'Cancella selezionati',  icon :  'fa fa-trash text-danger',  cssClass  : 'btn btn-default btn-xs text-danger',  text  : 'Selezionati',  needSelection  : true,  multiText  : 'Cancella Selezionati',   Metodi   execute  - utilizza al route delete per eseguire la richiesta di cancellazione. Prima chiede conferma  callback  - metodo richiamata alla fine della execute", 
            "title": "- ActionMultiDelete"
        }, 
        {
            "location": "/actions/#-actionsearch", 
            "text": "Estende  CollectionAction . Azione pensata per l'utilizzo dentro una view search  per la ricerca dei record con i filtri della view.  Propriet\u00e0   className  : 'ActionSearch',  title  : 'Ricerca',  icon :  'fa fa-search',  cssClass  : 'btn btn-xs btn-default text-info',  text  : 'Cerca',   Metodi   execute  - richiama la pagina con i parametri in get presenti nella form della vista", 
            "title": "- ActionSearch"
        }, 
        {
            "location": "/actions/#-actionreset", 
            "text": "Estende  CollectionAction . Azione pensata per l'utilizzo dentro una view search il reset dei parametri di \nricerca impostati  Propriet\u00e0   className  : 'ActionReset',  title  : 'Annulla filtri ricerca',  cssClass  : 'btn btn-xs btn-default',  text  : 'Annulla filtri',   Metodi   execute  - richiama il metodo clear su tutti i renders della view e richiama la callback  callback  - metodo chiamato dopo il reset dei controlli", 
            "title": "- ActionReset"
        }, 
        {
            "location": "/actions/#-actionnextpage", 
            "text": "nextpage del navigatore di una lista  Propriet\u00e0   \n-  icon  : 'fa fa-angle-right',\n-  cssClass  : 'btn btn-default btn-xs',  Metodi    execute  : incrementa di uno il parametro page della route associata alla lista", 
            "title": "- ActionNextPage"
        }, 
        {
            "location": "/actions/#-actionprevpage", 
            "text": "Pagina precendente di una view  Propriet\u00e0   icon  : 'fa fa-angle-left',   cssClass  : 'btn btn-default btn-xs'    execute  : Decrementa di uno il parametro page della route associata alla lista", 
            "title": "- ActionPrevPage"
        }, 
        {
            "location": "/actions/#-actionfirstpage", 
            "text": "icon  : 'fa fa fa-angle-double-left',  cssClass  : 'btn btn-default btn-xs',  execute  : Setta il parametro page a uno della route associata alla lista", 
            "title": "- ActionFirstPage"
        }, 
        {
            "location": "/actions/#-actionlastpage", 
            "text": "icon  : 'fa fa fa-angle-double-right',  cssClass  : 'btn btn-default btn-xs',  execute  : Setta il parametro page all'ultima pagina della route associata alla lista", 
            "title": "- actionLastPage"
        }, 
        {
            "location": "/actions/#-actionperpage", 
            "text": "icon  : 'fa fa fa-angle-double-right',  htmlEvent  : 'onchange',  cssClass  : 'btn btn-default btn-xs',   execute  : setta il parametro page e paginateNumber della route associata alla lista    _getData  : setta i valori della select prendendoli da data.pagination.pagination_steps    buttonTemplate  :     select data-field= pagination.per_page  data-source= pagination.pagination_steps  \n        data-sourceorder= pagination.pagination_order \n        data-attrs=`+ special_attrs + `  class= pagination-input  /select", 
            "title": "- actionPerPage"
        }, 
        {
            "location": "/confs/", 
            "text": "Confs\n\n\nLe Confs sono nate per creare configurazioni iniziali per le views di uso generale.\nQuesto permette di avere, con pochissimo codice, la configurazione\ndella view da utilizzare e modificare solo dove occorre. \n\n\nConf\n\n\nLa Classe Conf \u00e8 la classe base che ereditano tutte le confs. Il costrutture \naccetta un vettore associativo per la sostituizione di propriet\u00e0 della configurazione che \nandiamo ad instanziare. \n\n\nPropriet\u00e0\n\n\n\n\nrouteName\n: Indica la route da utilizzare per il caricamento dei dati della view. \nSu routeName verr\u00e0 utilizzata la convenzione del metodo statico \n\nRoute.factory(routeName)\n. \n\n\nviewClass\n: Indica la classe view da utilizzare. Esempio \nViewList\n\n\nactions\n: Vettore di azioni presenti nella view. La visualizzazione delle actions \nsar\u00e0 compito della view secondo le sue strategie di visualizzazione.\n\n\nextra_actions\n: Vettore di azioni con la loro definizione nel caso in cui \nnel vettore actions  siano indicate azioni custom o azioni che ridefiniscono quelle\ndi default.\n\n\nfields\n: Il Vettore dei campi che deve essere gestito dalla views.\n\n\ndetail_fields\n: Il Vettore di campi che hanno anche un dettaglio. Sono campi particali\ncome le aggregazioni, totale di una lista di records.\n\n\npagination\n: Valido solo per le liste, contiene le informazioni sulla paginazione\ndei risultati.\n\n\nfields_type\n : Vettore della definizione del tipo di tutti i campi presenti in \nfields\n \ncon le loro eventuali estensioni.\n\n\ndependencies\n: Vettore associativo di oggetti Dipendence per permettere l'interazione\ntra due campi diversi. \n\n\nfields_structure\n : Indica la classe struttura da utilizzare per renderizzare i\ncampi. \n\n\n\n\nMetodi\n\n\n\n\n__costruct(attrs)\n: attrs rappresenta il vettore associativo per la ridefinizione\ndi alcune propriet\u00e0 di confs.\n\n\n\n\nConfigurazioni implementate\n\n\nNella libreria ci sono gi\u00e0 delle configurazioni di uso comune per ogni oggetto vista \nimplementato di default.\n\n\n- ListConfs\n\n\nRappresenta la configurazione base utilizzare nella creazione di una Views.\n\n\nvar ListConfs = Conf.extend({\n    routeName : 'list',\n    viewClass : 'ViewList',\n    actions : ['ActionDelete','ActionMultiDelete','ActionEdit','ActionView','ActionInsert'],\n    extra_actions : {},\n    fields : [],\n    detail_fields: {},\n    pagination : true,\n    fields_config: {\n        id :            {type:'hidden'},\n        created_at:     {type:'hidden'},\n        updated_at:     {type:'hidden'},\n        deleted_at:     {type:'hidden'},\n        created_by:     {type:'hidden'},\n        updated_by:     {type:'hidden'},\n        descrizione :   {type:'hidden'},\n        activated:      {type: 'swap','mode': 'edit'},\n        verified:       {type: 'swap','mode': 'edit'},\n        fotos:          {type: 'hasmany_upload_image',limit:1},\n        attachments:    {type: 'hasmany_upload_attachment',limit:1},\n        data:           {type: 'date_picker'}\n    }\n});\n\n\n\n\n- EditConfs\n\n\nvar EditConfs = Conf.extend({\n    viewClass : 'ViewEdit',\n    actions : ['ActionSave','ActionBack'],\n    extra_actions : {},\n    labels: 'left',\n    fields: [],\n    fields_config: {\n        id: {type:'input'},\n        created_at: {type:'hidden'},\n        updated_at: {type:'hidden'},\n        deleted_at: {type:'hidden'},\n        created_by: {type:'hidden'},\n        updated_by: {type:'hidden'},\n        activated:  {type: 'radio'},\n        descrizione: {type: 'texthtml'},\n        body: {type: 'texthtml'},\n        note: {type: 'texthtml'},\n        fotos: {type: 'hasmany_upload_image', 'label': 'no'},\n        attachments: {type: 'hasmany_upload_attachment', 'label': 'no'},\n        data: {type: 'date_picker'},\n        data_formatted: {type:'hidden'},\n        status: {type:'hidden'},\n        token: {type:'hidden'},\n        captcha: {type: 'captcha'},\n    },\n    dependencies : {}\n});\n\n\n\n\n- InsertConfs\n\n\nvar InsertConfs = EditConfs.extend({\n    viewClass : 'ViewInsert',\n});\n\n\n\n\n- SearchConfs\n\n\nvar SearchConfs = Conf.extend({\n    viewClass : 'ViewSearch',\n    actions : ['ActionSearch','ActionReset'],\n    extra_actions : {},\n    fields:[],\n    fields_config : {},\n});\n\n\n\n\n- ViewConfs\n\n\nvar ViewConfs = Conf.extend({\n    viewClass : 'ViewView',\n    labels: 'left',\n    actions : [],\n    extra_actions : {},\n    fields : [],\n    fields_config: {\n        attivo: {type: 'swap'},\n        fotos : {type: 'hasmany_upload_image'},\n        attachments: {type: 'hasmany_upload_attachment'},\n        id: {type:'hidden'},\n        created_at: {type:'hidden'},\n        updated_at: {type:'hidden'},\n        deleted_at: {type:'hidden'},\n        created_by: {type:'hidden'},\n        updated_by: {type:'hidden'}\n    }\n});", 
            "title": "Confs"
        }, 
        {
            "location": "/confs/#confs", 
            "text": "Le Confs sono nate per creare configurazioni iniziali per le views di uso generale.\nQuesto permette di avere, con pochissimo codice, la configurazione\ndella view da utilizzare e modificare solo dove occorre.", 
            "title": "Confs"
        }, 
        {
            "location": "/confs/#conf", 
            "text": "La Classe Conf \u00e8 la classe base che ereditano tutte le confs. Il costrutture \naccetta un vettore associativo per la sostituizione di propriet\u00e0 della configurazione che \nandiamo ad instanziare.", 
            "title": "Conf"
        }, 
        {
            "location": "/confs/#proprieta", 
            "text": "routeName : Indica la route da utilizzare per il caricamento dei dati della view. \nSu routeName verr\u00e0 utilizzata la convenzione del metodo statico  Route.factory(routeName) .   viewClass : Indica la classe view da utilizzare. Esempio  ViewList  actions : Vettore di azioni presenti nella view. La visualizzazione delle actions \nsar\u00e0 compito della view secondo le sue strategie di visualizzazione.  extra_actions : Vettore di azioni con la loro definizione nel caso in cui \nnel vettore actions  siano indicate azioni custom o azioni che ridefiniscono quelle\ndi default.  fields : Il Vettore dei campi che deve essere gestito dalla views.  detail_fields : Il Vettore di campi che hanno anche un dettaglio. Sono campi particali\ncome le aggregazioni, totale di una lista di records.  pagination : Valido solo per le liste, contiene le informazioni sulla paginazione\ndei risultati.  fields_type  : Vettore della definizione del tipo di tutti i campi presenti in  fields  \ncon le loro eventuali estensioni.  dependencies : Vettore associativo di oggetti Dipendence per permettere l'interazione\ntra due campi diversi.   fields_structure  : Indica la classe struttura da utilizzare per renderizzare i\ncampi.", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/confs/#metodi", 
            "text": "__costruct(attrs) : attrs rappresenta il vettore associativo per la ridefinizione\ndi alcune propriet\u00e0 di confs.", 
            "title": "Metodi"
        }, 
        {
            "location": "/confs/#configurazioni-implementate", 
            "text": "Nella libreria ci sono gi\u00e0 delle configurazioni di uso comune per ogni oggetto vista \nimplementato di default.", 
            "title": "Configurazioni implementate"
        }, 
        {
            "location": "/confs/#-listconfs", 
            "text": "Rappresenta la configurazione base utilizzare nella creazione di una Views.  var ListConfs = Conf.extend({\n    routeName : 'list',\n    viewClass : 'ViewList',\n    actions : ['ActionDelete','ActionMultiDelete','ActionEdit','ActionView','ActionInsert'],\n    extra_actions : {},\n    fields : [],\n    detail_fields: {},\n    pagination : true,\n    fields_config: {\n        id :            {type:'hidden'},\n        created_at:     {type:'hidden'},\n        updated_at:     {type:'hidden'},\n        deleted_at:     {type:'hidden'},\n        created_by:     {type:'hidden'},\n        updated_by:     {type:'hidden'},\n        descrizione :   {type:'hidden'},\n        activated:      {type: 'swap','mode': 'edit'},\n        verified:       {type: 'swap','mode': 'edit'},\n        fotos:          {type: 'hasmany_upload_image',limit:1},\n        attachments:    {type: 'hasmany_upload_attachment',limit:1},\n        data:           {type: 'date_picker'}\n    }\n});", 
            "title": "- ListConfs"
        }, 
        {
            "location": "/confs/#-editconfs", 
            "text": "var EditConfs = Conf.extend({\n    viewClass : 'ViewEdit',\n    actions : ['ActionSave','ActionBack'],\n    extra_actions : {},\n    labels: 'left',\n    fields: [],\n    fields_config: {\n        id: {type:'input'},\n        created_at: {type:'hidden'},\n        updated_at: {type:'hidden'},\n        deleted_at: {type:'hidden'},\n        created_by: {type:'hidden'},\n        updated_by: {type:'hidden'},\n        activated:  {type: 'radio'},\n        descrizione: {type: 'texthtml'},\n        body: {type: 'texthtml'},\n        note: {type: 'texthtml'},\n        fotos: {type: 'hasmany_upload_image', 'label': 'no'},\n        attachments: {type: 'hasmany_upload_attachment', 'label': 'no'},\n        data: {type: 'date_picker'},\n        data_formatted: {type:'hidden'},\n        status: {type:'hidden'},\n        token: {type:'hidden'},\n        captcha: {type: 'captcha'},\n    },\n    dependencies : {}\n});", 
            "title": "- EditConfs"
        }, 
        {
            "location": "/confs/#-insertconfs", 
            "text": "var InsertConfs = EditConfs.extend({\n    viewClass : 'ViewInsert',\n});", 
            "title": "- InsertConfs"
        }, 
        {
            "location": "/confs/#-searchconfs", 
            "text": "var SearchConfs = Conf.extend({\n    viewClass : 'ViewSearch',\n    actions : ['ActionSearch','ActionReset'],\n    extra_actions : {},\n    fields:[],\n    fields_config : {},\n});", 
            "title": "- SearchConfs"
        }, 
        {
            "location": "/confs/#-viewconfs", 
            "text": "var ViewConfs = Conf.extend({\n    viewClass : 'ViewView',\n    labels: 'left',\n    actions : [],\n    extra_actions : {},\n    fields : [],\n    fields_config: {\n        attivo: {type: 'swap'},\n        fotos : {type: 'hasmany_upload_image'},\n        attachments: {type: 'hasmany_upload_attachment'},\n        id: {type:'hidden'},\n        created_at: {type:'hidden'},\n        updated_at: {type:'hidden'},\n        deleted_at: {type:'hidden'},\n        created_by: {type:'hidden'},\n        updated_by: {type:'hidden'}\n    }\n});", 
            "title": "- ViewConfs"
        }, 
        {
            "location": "/routes/", 
            "text": "Routes\n\n\nRoute\n\n\nClass base per la gestione delle route verso il backend. Sono state definite\nalcune route delle principali di interazioni con il backend\n secondo le specifiche REST.\n\n\nPropriet\u00e0\n\n\n\n\nclassName\n default \"Route\" variabile di comodo per riconoscere in quale route ci troviamo\n\n\nmethod\n default null rappresenta il metodo usato per la chiamata ajax, pu\u00f2 essere get o post\n\n\nurl\n default null rappresenta l'url che deve essere composto per eseguire la chiamataa \n    Le parti variabili devono essere racchiuse tra parentesi graffe. Per esempio : /action/{var1}/print \u00e8 un\n    url in cui {var1} verr\u00e0 sostituita con il valore che l'oggetto Route ha in quel momento.\n\n\nresultType\n default  null tipo di risultato, pu\u00f2 essere record o list\n\n\nprotocol\n default null nome della classe protocollo da utilizzare per applicare eventuali\n elaborazioni sui dati dopo averli ricevuti. Di default sono stati implementati due protocolli: \n\n\nListProtocol\n\n\nRecordProtocol\n\n\n\n\n\n\nextraParams\n  : {}, parametri statici da aggiungere sempre alla chiamata prima di eseguire la richiesta \nal server.\n\n\nvalues\n : {}, vettore associativo con il valore dei parametri per la costruzione dell'url\n\n\nparams\n :{} vettore associativo dei parametri passati nella richiesta. Prima\ndella richiesta vengono sommati agli extraParams\n\n\n\n\nMetodi\n\n\n\n\n\n\n__costruct(attrs)\n costruttore. Accetta come parametro un vettore associativo che permette\ndi sovrascrivere le propriet\u00e0 dell'oggetto creato.\n\n\n\n\n\n\ngetUrl(values)\n ritorna url esatto valorizzando le variabili parametriche tra {} \npresenti nella stringa url. Il parametro \nvalues\n \u00e8 il vettore associativo dei valori\nattuali per valorizzare le variabili. Se non viene passato prende i valori presenti\nnell'oggetto nel vettore values\n\n\n\n\n\n\ngetParams\n ritorna tutti i parametri che verranno passati nella richiesta. L'unione\ntra params ed extra_params dell'oggetto\n\n\n\n\n\n\ngetKeys\n ritorna un vettore con tutte le keys necessarie per la composizione dell'ulr\ndella route che devono essere valorizzati per ritornare l'url esatto. Peer esempio \nse url e' fatto come /pippo/{param1}/{param2} ritorna ['param1','param2']\n\n\n\n\n\n\nRoute Implementate\n\n\nLa libreria contiene gi\u00e0 delle route per l'uso comune che vengono utilizzate dalle views\ne dalle actions. Per la creazione di una route \u00e8 stato realizzato un pseduo metodo statico\nchiamato factory. Se vogliamo utilizzare il metodo factory dobbiamo rispettare la convenzione\nsui nomi. Chiamare il factory('list') il metodo cercher\u00e0 l'esistenza della classe\nRouteList, se chiamiamo il factory('list_mia') il metodo cercher\u00e0 l'esistenza\ndella classe RouteListMia. In altre parole sul nome passato al metodo factory viene\napplicata la funziona 'pascal case' concatenato con il prefisso \nRoute\n\n\n\n\nRoute.factory(type,attrs)\n questo metodo istanzia una Route di tipo type\npassando al costruttore gli attrs. Alla variabile type viene applicata la trasformazione\npascal case e aggiunto il prefisso \nRoute\n. Per esempio se vogliamo istanziare un oggetto chiamato RouteList si chiama il metodo\nstatico :\n\n\n\n\nvar r = Route.factory('list',{\n    values : {\n        modelName : 'user'\n    }\n});\n\n\n\n\nQuesto codice crea un'instanza della classe RouteList e il vettore associativo values\nprender\u00e0 come valori quelli passati.\n\n\n- RouteList\n\n\nla route \u00e8 stata creata per recuperare una lista di record del modello specificato.\nNel vettore \nvalues\n deve essere presente la chiave:\n\n\n\n\nmodelName\n: rappresenta il nome del modello.\n\n\n\n\n{\n    \nurl\n: \n/api/json/{modelName}\n,\n    \nprotocol\n: \nlist\n,\n    \nresultType\n: \nlist\n,\n    \nmethod\n: \nget\n,\n    \nkeys\n: [\n        \nmodelName\n\n    ]\n}\n\n\n\n\n- RouteEdit\n\n\nLa route carica i dati di un record per la modifica.\nNel vettore \nvalues\n devono essere presenti le chiavi:\n\n\n\n\nmodelName\n: rappresenta il nome del modello.\n\n\npk\n: rappresenta l'id che identifica il record specifico\n\n\n\n\n{\n    \nurl\n: \n/api/json/{modelName}/{pk}/edit\n,\n    \nprotocol\n: \nrecord\n,\n    \nresultType\n: \nrecord\n,\n    \nmethod\n: \nget\n,\n    \nkeys\n: [\n        \nmodelName\n,\n        \npk\n\n    ]\n}\n\n\n\n\n- RouteSearch\n\n\nLa route che chiede i dati di un record per la ricerca.\nNel vettore \nvalues\n deve essere presente la chiave:\n\n\n\n\nmodelName\n: rappresenta il nome del modello.\n\n\n\n\n{\n    \nurl\n: \n/api/json/{modelName}/search\n,\n    \nprotocol\n: \nrecord\n,\n    \nresultType\n: \nrecord\n,\n    \nmethod\n: \nget\n,\n    \nkeys\n: [\n        \nmodelName\n\n    ]\n}\n\n\n\n\n- RouteInsert\n\n\nLa route che chiede i dati di un record per l'inserimento.\nNel vettore \nvalues\n deve essere presente la chiave:\n\n\n\n\nmodelName\n: rappresenta il nome del modello.\n\n\n\n\n{\n    \nurl\n: \n/api/json/{modelName}/create\n,\n    \nprotocol\n: \nrecord\n,\n    \nresultType\n: \nrecord\n,\n    \nmethod\n: \nget\n,\n    \nkeys\n: [\n        \nmodelName\n\n    ]\n}\n\n\n\n\n- RouteSave\n\n\nLa route che invia i dati di un record per crearlo. I dati del modello verranno passati\ncome params. In questa route viene aggiunto sempre un parametro chiamato _method='POST' che \nserve a simulare il metodo save REST attraverso la chiamata http.\n\n\nNel vettore \nvalues\n deve essere presente la chiave:\n\n\n\n\nmodelName\n: rappresenta il nome del modello.\n\n\n\n\n{\n    \nurl\n: \n/api/json/{modelName}/create\n,\n    \nprotocol\n: \nrecord\n,\n    \nresultType\n: \nrecord\n,\n    \nmethod\n: \npost\n,\n    \nkeys\n: [\n        \nmodelName\n\n    ],\n    \nextra_params\n: {\n        \n_method\n: \nPOST\n\n    }\n}\n\n\n\n\n- RouteUpdate\n\n\nLa route che invia i dati di un record per la modifica. I dati del modello verranno passati\ncome params. In questa route viene aggiunto sempre un parametro chiamato _method='PUT' che \nserve a simulare il metodo put REST attraverso la chiamata http.\nNel vettore \nvalues\n devono essere presenti le chiavi:\n\n\n\n\nmodelName\n: rappresenta il nome del modello.\n\n\npk\n: rappresenta l'id che identifica il record specifico\n\n\n\n\n{\n    \nurl\n: \n/api/json/{modelName}/{pk}\n,\n    \nprotocol\n: \nrecord\n,\n    \nresultType\n: \nrecord\n,\n    \nmethod\n: \npost\n,\n    \nkeys\n: [\n        \nmodelName\n,\n        \npk\n\n    ],\n    \nextra_params\n: {\n        \n_method\n: \nPUT\n\n    }\n}\n\n\n\n\n- RouteView\n\n\nLa route che chiede i dati di un record in modalit\u00e0 lettura.\nNel vettore \nvalues\n devono essere presenti le chiavi:\n\n\n\n\nmodelName\n: rappresenta il nome del modello.\n\n\npk\n: rappresenta l'id che identifica il record specifico\n\n\n\n\n{\n    \nurl\n: \n/api/json/{modelName}/{pk}\n,\n    \nprotocol\n: \nrecord\n,\n    \nresultType\n: \nrecord\n,\n    \nmethod\n: \nget\n,\n    \nkeys\n: [\n        \nmodelName\n,\n        \npk\n\n    ]\n}\n\n\n\n\n- RouteDelete\n\n\nLa route che rimuove un record. In questa route viene aggiunto sempre un parametro chiamato \n_method='DELETE' che serve a simulare il metodo delete REST attraverso la chiamata http.\nNel vettore \nvalues\n devono essere presenti le chiavi:\n\n\n\n\nmodelName\n: rappresenta il nome del modello.\n\n\npk\n: rappresenta l'id che identifica il record specifico\n\n\n\n\n{\n    \nurl\n: \n/api/json/{modelName}/{pk}\n,\n    \nprotocol\n: \nrecord\n,\n    \nresultType\n: \nrecord\n,\n    \nmethod\n: \npost\n,\n    \nkeys\n: [\n        \nmodelName\n,\n        \npk\n\n    ],\n    \nextra_params\n: {\n        \n_method\n: \nDELETE\n\n    }\n}\n\n\n\n\n- RouteMultiDelete\n\n\nLa route che rimuove una lista di record. La lista viene passata come vettore di id\nnei params.\nNel vettore \nvalues\n deve essere presente la chiave:\n\n\n\n\nmodelName\n: rappresenta il nome del modello.\n\n\n\n\n{\n    \nurl\n: \n/api/json/{modelName}/deleteall\n,\n    \nprotocol\n: \nrecord\n,\n    \nresultType\n: \nrecord\n,\n    \nmethod\n: \npost\n,\n    \nkeys\n: [\n        \nmodelName\n\n    ]\n}", 
            "title": "Routes"
        }, 
        {
            "location": "/routes/#routes", 
            "text": "", 
            "title": "Routes"
        }, 
        {
            "location": "/routes/#route", 
            "text": "Class base per la gestione delle route verso il backend. Sono state definite\nalcune route delle principali di interazioni con il backend\n secondo le specifiche REST.", 
            "title": "Route"
        }, 
        {
            "location": "/routes/#proprieta", 
            "text": "className  default \"Route\" variabile di comodo per riconoscere in quale route ci troviamo  method  default null rappresenta il metodo usato per la chiamata ajax, pu\u00f2 essere get o post  url  default null rappresenta l'url che deve essere composto per eseguire la chiamataa \n    Le parti variabili devono essere racchiuse tra parentesi graffe. Per esempio : /action/{var1}/print \u00e8 un\n    url in cui {var1} verr\u00e0 sostituita con il valore che l'oggetto Route ha in quel momento.  resultType  default  null tipo di risultato, pu\u00f2 essere record o list  protocol  default null nome della classe protocollo da utilizzare per applicare eventuali\n elaborazioni sui dati dopo averli ricevuti. Di default sono stati implementati due protocolli:   ListProtocol  RecordProtocol    extraParams   : {}, parametri statici da aggiungere sempre alla chiamata prima di eseguire la richiesta \nal server.  values  : {}, vettore associativo con il valore dei parametri per la costruzione dell'url  params  :{} vettore associativo dei parametri passati nella richiesta. Prima\ndella richiesta vengono sommati agli extraParams", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/routes/#metodi", 
            "text": "__costruct(attrs)  costruttore. Accetta come parametro un vettore associativo che permette\ndi sovrascrivere le propriet\u00e0 dell'oggetto creato.    getUrl(values)  ritorna url esatto valorizzando le variabili parametriche tra {} \npresenti nella stringa url. Il parametro  values  \u00e8 il vettore associativo dei valori\nattuali per valorizzare le variabili. Se non viene passato prende i valori presenti\nnell'oggetto nel vettore values    getParams  ritorna tutti i parametri che verranno passati nella richiesta. L'unione\ntra params ed extra_params dell'oggetto    getKeys  ritorna un vettore con tutte le keys necessarie per la composizione dell'ulr\ndella route che devono essere valorizzati per ritornare l'url esatto. Peer esempio \nse url e' fatto come /pippo/{param1}/{param2} ritorna ['param1','param2']", 
            "title": "Metodi"
        }, 
        {
            "location": "/routes/#route-implementate", 
            "text": "La libreria contiene gi\u00e0 delle route per l'uso comune che vengono utilizzate dalle views\ne dalle actions. Per la creazione di una route \u00e8 stato realizzato un pseduo metodo statico\nchiamato factory. Se vogliamo utilizzare il metodo factory dobbiamo rispettare la convenzione\nsui nomi. Chiamare il factory('list') il metodo cercher\u00e0 l'esistenza della classe\nRouteList, se chiamiamo il factory('list_mia') il metodo cercher\u00e0 l'esistenza\ndella classe RouteListMia. In altre parole sul nome passato al metodo factory viene\napplicata la funziona 'pascal case' concatenato con il prefisso  Route   Route.factory(type,attrs)  questo metodo istanzia una Route di tipo type\npassando al costruttore gli attrs. Alla variabile type viene applicata la trasformazione\npascal case e aggiunto il prefisso  Route . Per esempio se vogliamo istanziare un oggetto chiamato RouteList si chiama il metodo\nstatico :   var r = Route.factory('list',{\n    values : {\n        modelName : 'user'\n    }\n});  Questo codice crea un'instanza della classe RouteList e il vettore associativo values\nprender\u00e0 come valori quelli passati.", 
            "title": "Route Implementate"
        }, 
        {
            "location": "/routes/#-routelist", 
            "text": "la route \u00e8 stata creata per recuperare una lista di record del modello specificato.\nNel vettore  values  deve essere presente la chiave:   modelName : rappresenta il nome del modello.   {\n     url :  /api/json/{modelName} ,\n     protocol :  list ,\n     resultType :  list ,\n     method :  get ,\n     keys : [\n         modelName \n    ]\n}", 
            "title": "- RouteList"
        }, 
        {
            "location": "/routes/#-routeedit", 
            "text": "La route carica i dati di un record per la modifica.\nNel vettore  values  devono essere presenti le chiavi:   modelName : rappresenta il nome del modello.  pk : rappresenta l'id che identifica il record specifico   {\n     url :  /api/json/{modelName}/{pk}/edit ,\n     protocol :  record ,\n     resultType :  record ,\n     method :  get ,\n     keys : [\n         modelName ,\n         pk \n    ]\n}", 
            "title": "- RouteEdit"
        }, 
        {
            "location": "/routes/#-routesearch", 
            "text": "La route che chiede i dati di un record per la ricerca.\nNel vettore  values  deve essere presente la chiave:   modelName : rappresenta il nome del modello.   {\n     url :  /api/json/{modelName}/search ,\n     protocol :  record ,\n     resultType :  record ,\n     method :  get ,\n     keys : [\n         modelName \n    ]\n}", 
            "title": "- RouteSearch"
        }, 
        {
            "location": "/routes/#-routeinsert", 
            "text": "La route che chiede i dati di un record per l'inserimento.\nNel vettore  values  deve essere presente la chiave:   modelName : rappresenta il nome del modello.   {\n     url :  /api/json/{modelName}/create ,\n     protocol :  record ,\n     resultType :  record ,\n     method :  get ,\n     keys : [\n         modelName \n    ]\n}", 
            "title": "- RouteInsert"
        }, 
        {
            "location": "/routes/#-routesave", 
            "text": "La route che invia i dati di un record per crearlo. I dati del modello verranno passati\ncome params. In questa route viene aggiunto sempre un parametro chiamato _method='POST' che \nserve a simulare il metodo save REST attraverso la chiamata http.  Nel vettore  values  deve essere presente la chiave:   modelName : rappresenta il nome del modello.   {\n     url :  /api/json/{modelName}/create ,\n     protocol :  record ,\n     resultType :  record ,\n     method :  post ,\n     keys : [\n         modelName \n    ],\n     extra_params : {\n         _method :  POST \n    }\n}", 
            "title": "- RouteSave"
        }, 
        {
            "location": "/routes/#-routeupdate", 
            "text": "La route che invia i dati di un record per la modifica. I dati del modello verranno passati\ncome params. In questa route viene aggiunto sempre un parametro chiamato _method='PUT' che \nserve a simulare il metodo put REST attraverso la chiamata http.\nNel vettore  values  devono essere presenti le chiavi:   modelName : rappresenta il nome del modello.  pk : rappresenta l'id che identifica il record specifico   {\n     url :  /api/json/{modelName}/{pk} ,\n     protocol :  record ,\n     resultType :  record ,\n     method :  post ,\n     keys : [\n         modelName ,\n         pk \n    ],\n     extra_params : {\n         _method :  PUT \n    }\n}", 
            "title": "- RouteUpdate"
        }, 
        {
            "location": "/routes/#-routeview", 
            "text": "La route che chiede i dati di un record in modalit\u00e0 lettura.\nNel vettore  values  devono essere presenti le chiavi:   modelName : rappresenta il nome del modello.  pk : rappresenta l'id che identifica il record specifico   {\n     url :  /api/json/{modelName}/{pk} ,\n     protocol :  record ,\n     resultType :  record ,\n     method :  get ,\n     keys : [\n         modelName ,\n         pk \n    ]\n}", 
            "title": "- RouteView"
        }, 
        {
            "location": "/routes/#-routedelete", 
            "text": "La route che rimuove un record. In questa route viene aggiunto sempre un parametro chiamato \n_method='DELETE' che serve a simulare il metodo delete REST attraverso la chiamata http.\nNel vettore  values  devono essere presenti le chiavi:   modelName : rappresenta il nome del modello.  pk : rappresenta l'id che identifica il record specifico   {\n     url :  /api/json/{modelName}/{pk} ,\n     protocol :  record ,\n     resultType :  record ,\n     method :  post ,\n     keys : [\n         modelName ,\n         pk \n    ],\n     extra_params : {\n         _method :  DELETE \n    }\n}", 
            "title": "- RouteDelete"
        }, 
        {
            "location": "/routes/#-routemultidelete", 
            "text": "La route che rimuove una lista di record. La lista viene passata come vettore di id\nnei params.\nNel vettore  values  deve essere presente la chiave:   modelName : rappresenta il nome del modello.   {\n     url :  /api/json/{modelName}/deleteall ,\n     protocol :  record ,\n     resultType :  record ,\n     method :  post ,\n     keys : [\n         modelName \n    ]\n}", 
            "title": "- RouteMultiDelete"
        }, 
        {
            "location": "/server/", 
            "text": "Server\n\n\nClasse per le comunicazioni ajax con il backend e' un wrapper delle chiamate jQuery\n\n\nPropriet\u00e0\n\n\n\n\nstatic subdomain\n : null\npropriet\u00e0 che permette di avere una base comune in tutti gli url codificati dentro\njavascript. E' il prefisso.  Esempio se il nostro sito si trova sotto una sottodominio\nhttp://dominio.it/sottodominio  settiamo il subdomain=sottodominio\n\n\n\n\nMetodi\n\n\n\n\n\n\nstatic getUrl(url)\n\nRitorna l'url reale combinato con il subdomain.\n\n\n\n\n\n\nstatic get(url, params, callback)\n\nEsegue una chiamata ajax al server in GET con i parametri \nparams\n e ritorna il\nrisultato json chiamando la \ncallback\n\n\n\n\n\n\nstatic post(url, params, callback)\n\nEsegue una chiamata ajax al server in POST con i parametri \nparams\n e ritorna il\nrisultato json chiamando la \ncallback\n\n\n\n\n\n\nstatic route(route,callback)\n\nEsegue una chiamata ajax al server utilizzando l'oggetto \nroute\n passato e ritorna\nil risultato chiamando la \ncallback", 
            "title": "Server"
        }, 
        {
            "location": "/server/#server", 
            "text": "Classe per le comunicazioni ajax con il backend e' un wrapper delle chiamate jQuery", 
            "title": "Server"
        }, 
        {
            "location": "/server/#proprieta", 
            "text": "static subdomain  : null\npropriet\u00e0 che permette di avere una base comune in tutti gli url codificati dentro\njavascript. E' il prefisso.  Esempio se il nostro sito si trova sotto una sottodominio\nhttp://dominio.it/sottodominio  settiamo il subdomain=sottodominio", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/server/#metodi", 
            "text": "static getUrl(url) \nRitorna l'url reale combinato con il subdomain.    static get(url, params, callback) \nEsegue una chiamata ajax al server in GET con i parametri  params  e ritorna il\nrisultato json chiamando la  callback    static post(url, params, callback) \nEsegue una chiamata ajax al server in POST con i parametri  params  e ritorna il\nrisultato json chiamando la  callback    static route(route,callback) \nEsegue una chiamata ajax al server utilizzando l'oggetto  route  passato e ritorna\nil risultato chiamando la  callback", 
            "title": "Metodi"
        }, 
        {
            "location": "/app/", 
            "text": "App\n\n\nApp \u00e8 la classe per la gestione della pagina. Permette di aggiungere e cancellare view, \ncreare dashboards ecc.\n\n\nPropriet\u00e0\n\n\n\n\nresources\n = [];     // vettore di risorse iniziali da caricare\n\n\npluginsPath\n = '/cupparis4/plugins/';\n\n\nlog\n = null;\n\n\nshow_log\n = false;\n\n\nmobile\n = false;\n\n\n\n\nMetodi\n\n\n\n\ngetResources\n = function () - vettore di tutte le risorse caricate dalla pagina\n\n\ninit\n = function(options,callback) metodo iniziale da chiamare subito dopo la new per inizializzare\nl'applicazione\n\n\n\n\nloadResource\n = function (fileName, callback) - carica una risorsa script o css dinamicamente partendo dalla cartella\n                                                      * pluginsPath quando lo script e' stato caricato chiama la callback\n                                                      * @param fileName\n                                                      * @param callback\n\n\n\n\n\n\nloadResources\n = function(resources, callback) /*\n\n                                                     * carica un vettore di risorse, al fine caricamento chiama la callback\n                                                     * @param resources\n                                                     * @param callback\n                                                     \n/\n\n\n\n\n\n\naddView\n = function (options) \n\n\n\n\naddDashboard = function(options)\n\n\nrenderViews\n = function () - renderizza tutte le view prensenti nella pagina\n\n\nrenderView\n = function (key, callback) \n\n\ngetView\n = function (key) \n\n\ngetViews\n = function ()\n\n\ngetKeyFromId\n = function (htmlId) \n\n\ngetViewById\n = function(htmlId)\n\n\nremoveViewById\n = function (htmlId) \n\n\nremoveAllViews\n = function () \n\n\nremoveView\n = function(key) \n\n\nrenderViewById\n = function (htmlId,callback) \n\n\n\n\ngetHtmlConf\n = function (jQe) \n\n\n\n\n\n\nparse\n = function (container)  /*\n\n                                    * esegue il parse di un container html e istanzia tutte le views trovate\n                                    * @param container\n                                    * @returns {Array} di views\n                                    \n/\n\n\n\n\n\n\nviewModal\n = function (title,ViewConf,callback) \n\n\n\n\ndashboardModal\n = function (title,dash,callback) \n\n\ngetConf\n = function (model,action,role) \n\n\ntranslate\n = function (key,plural,params) \n\n\ntranslateIfExist\n = function (key,plural,params) \n\n\ngetLocale\n = function () \n\n\nwaitStart\n = function (msg,container) \n\n\nwaitEnd\n = function (container) \n\n\nmessageDialog\n = function (body,callbacks) - crea una message dialog e ne ritorna l'oggetto\n\n\nerrorDialog\n = function (body,callbacks) - crea una message dialog e ne ritorna l'oggetto\n\n\nconfirmDialog\n = function (body,callbacks)\n\n\ncustomDialog\n = function (content,callbacks) \n\n\nprogressDialog\n = function (content,callbacks)", 
            "title": "App"
        }, 
        {
            "location": "/app/#app", 
            "text": "App \u00e8 la classe per la gestione della pagina. Permette di aggiungere e cancellare view, \ncreare dashboards ecc.", 
            "title": "App"
        }, 
        {
            "location": "/app/#proprieta", 
            "text": "resources  = [];     // vettore di risorse iniziali da caricare  pluginsPath  = '/cupparis4/plugins/';  log  = null;  show_log  = false;  mobile  = false;", 
            "title": "Propriet\u00e0"
        }, 
        {
            "location": "/app/#metodi", 
            "text": "getResources  = function () - vettore di tutte le risorse caricate dalla pagina  init  = function(options,callback) metodo iniziale da chiamare subito dopo la new per inizializzare\nl'applicazione   loadResource  = function (fileName, callback) - carica una risorsa script o css dinamicamente partendo dalla cartella\n                                                      * pluginsPath quando lo script e' stato caricato chiama la callback\n                                                      * @param fileName\n                                                      * @param callback    loadResources  = function(resources, callback) /* \n                                                     * carica un vettore di risorse, al fine caricamento chiama la callback\n                                                     * @param resources\n                                                     * @param callback\n                                                      /    addView  = function (options)    addDashboard = function(options)  renderViews  = function () - renderizza tutte le view prensenti nella pagina  renderView  = function (key, callback)   getView  = function (key)   getViews  = function ()  getKeyFromId  = function (htmlId)   getViewById  = function(htmlId)  removeViewById  = function (htmlId)   removeAllViews  = function ()   removeView  = function(key)   renderViewById  = function (htmlId,callback)    getHtmlConf  = function (jQe)     parse  = function (container)  /* \n                                    * esegue il parse di un container html e istanzia tutte le views trovate\n                                    * @param container\n                                    * @returns {Array} di views\n                                     /    viewModal  = function (title,ViewConf,callback)    dashboardModal  = function (title,dash,callback)   getConf  = function (model,action,role)   translate  = function (key,plural,params)   translateIfExist  = function (key,plural,params)   getLocale  = function ()   waitStart  = function (msg,container)   waitEnd  = function (container)   messageDialog  = function (body,callbacks) - crea una message dialog e ne ritorna l'oggetto  errorDialog  = function (body,callbacks) - crea una message dialog e ne ritorna l'oggetto  confirmDialog  = function (body,callbacks)  customDialog  = function (content,callbacks)   progressDialog  = function (content,callbacks)", 
            "title": "Metodi"
        }, 
        {
            "location": "/esempi_views/", 
            "text": "View che lavorano con liste di dati\n\n\n- Lista con dati json\n\n\n// definisco i miei dati\nvar mydata = {\n    value :  [\n        {\n            text : 100,\n            intero : '1',\n            stringa : 'prova'\n        },\n        {\n            text : 2,\n            intero : '1',\n            stringa : 'fprova2'\n        },\n    ]\n}\n\n// creo una configurazione per la view lista\nvar myList = new ConfList({\n    fields : ['stringa','intero','text'], // campi che voglio visualizzare\n    container : '#test_container1',  // container dove verr\u00e0 disegnata la view\n    modelName : 'dummy', // modelname dummy, uso sempre questo per i dati dinamici\n    routeName : null, // nessuna route verso il server i dati ci sono gi\u00e0\n    pagination : false, // se voglio o no il navigatore per la paginazione\n    actions : [], //azioni che si possono fare sui singoli record  o lista\n    data : mydata // dati della lista\n});\n\n// aggiungo la lista\nvar vkey = app.addView(myList);\n// la renderizzo \napp.renderView(vkey);\n\n\n\n\n\n Vai \n\n\n- Lista con dati json con intestazioni header custom\n\n\n// definisco i miei dati\nvar mydata = {\n    value :  [\n        {\n            text : 100,\n            intero : '1',\n            stringa : 'prova'\n        },\n        {\n            text : 2,\n            intero : '1',\n            stringa : 'fprova2'\n        },\n    ]\n}\n\n// creo una configurazione per la view lista\nvar myList = new ConfList({\n    fields : ['stringa','intero','text'], // campi che voglio visualizzare\n    container : '#test_container1',  // container dove verr\u00e0 disegnata la view\n    modelName : 'dummy', // modelname dummy, uso sempre questo per i dati dinamici\n    routeName : null, // nessuna route verso il server, i dati ci sono gi\u00e0\n    pagination : false, // se voglio o no il navigatore per la paginazione\n    actions : [], //azioni che si possono fare sui singoli record  o lista\n    data : mydata, // dati della lista\n    labels : {\n        'dummy.stringa.label' : 'campo stringa'\n    }\n});\n\n// aggiungo la lista\nvar vkey = app.addView(myList);\n// la renderizzo \napp.renderView(vkey);\n\n\n\n\nViews che lavorano con singolo record\n\n\n- Vista in modalit\u00e0 edit con azione ActionSave ridefinita\n\n\n\n// definisco i miei dati che propongo nella view. Un solo record\nvar mydata =  {\n    value : {  // valori del mio ipotetico modello dati\n        text : \ntesto \n,\n        intero : 1,\n        stringa : 'prova'\n    },\n    metadata : {  // metadata dei miei valori, in questo caso il campo intero pu\u00f2 avere solo 2 valori\n        intero : {\n            domainValues : {\n                0 : 'Zero',\n                1 : 'Uno'\n            }\n        }\n    }\n}\n// definisco la configurazione della mia vista\nvar myList = new ConfInsert({\n    fields : ['stringa','intero','text'],  //campi che voglio visualizzare\n    container : '#test_container1',        // container dove verr\u00e0 disegnata la vista\n    modelName : 'dummy',                    // model name per dati dinamici\n    routeName : null,                       // nessuna route verso il server, i dati ci sono gi\u00e0\n    actions : ['ActionSave','ActionMia'],   //azione save presente nella libreria\n    data : mydata,\n    fields_config : {                       // configurazione campi\n        intero : {                          // dico che il campo intero e' una select\n            type : 'select'\n        },\n        text : {\n            type : 'textarea'\n        }\n    },\n    custom_actions : {   // ridefiniamo l'azione ActionSave presente in libreria per inserire il nostro comportamento\n        ActionSave : ActionSave.extend({\n            execute : function () {\n                alert(JSON.stringify(this.view.getFormData()))\n            }\n        })  \n    },\n    autorender : true, // dico che la view la voglio renderizzare appena l'aggiungo\n});\napp.addView(myList);\n\n\n\n\n\n- Vista in modalit\u00e0 edit con azione custom e template custom\n\n\n\n// definisco i miei dati che propongo nella view. Un solo record\nvar mydata =  {\n    value : {  // valori del mio ipotetico modello dati\n        text : \ntesto \n,\n        intero : 1,\n        stringa : 'prova'\n    },\n    metadata : {  // metadata dei miei valori, in questo caso il campo intero pu\u00f2 avere solo 2 valori\n        intero : {\n            domainValues : {\n                0 : 'Zero',\n                1 : 'Uno'\n            }\n        }\n    }\n}\n// definisco la configurazione della mia vista\nvar myList = new ConfInsert({\n    fields : ['stringa','intero','text'],  //campi che voglio visualizzare\n    container : '#test_container1',        // container dove verr\u00e0 disegnata la vista\n    modelName : 'dummy',                    // model name per dati dinamici\n    routeName : null,                       // nessuna route verso il server, i dati ci sono gi\u00e0\n    actions : ['ActionMia'],               //azione save presente nella libreria\n    data : mydata,\n    fields_config : {                       // configurazione campi\n        intero : {                          // dico che il campo intero e' una select\n            type : 'select'\n        },\n        text : {\n            type : 'textarea'\n        }\n    },\n    custom_actions : {\n        ActionMia : RecordAction.extend({\n            text : 'mia',\n            title : 'azione custom',\n            execute : function () {\n                alert(JSON.stringify(this.view.getFormData()))\n            }\n        })  \n    },\n    labels : {\n        'app.mialabel' : 'Questa e\\' una vista con template personale rispetto a quello standard',  \n    },\n    template : function () {\n        return `\n        \ndiv class=\nwell\n data-edit-main\n\n            \ndiv data-alert class=\nalert alert-success hide\n/div\n\n            \ndiv data-label=\napp.mialabel\n/div\n\n            \nform name=\ndata_form\n class=\nmodel-edit\n\n                \ndiv data-hidden_fields\n\n                    \n!-- qui dentro verrano disegnati i renders speciali hidden --\n\n                \n/div\n\n                \ndiv data-view_elements\n\n                    \n!-- qui dentro verrano disegnati i renders --\n\n                \n/div\n\n                \ndiv data-view_action \n\n                    \n!-- qui dentro verrano disegnate le azioni definite --\n\n                \n/div\n\n            \n/form\n\n        \n/div\n\n    `\n    },\n    autorender : true, // dico che la view la voglio renderizzare appena l'aggiungo\n});\napp.addView(myList);", 
            "title": "Esempi Views"
        }, 
        {
            "location": "/esempi_views/#view-che-lavorano-con-liste-di-dati", 
            "text": "", 
            "title": "View che lavorano con liste di dati"
        }, 
        {
            "location": "/esempi_views/#-lista-con-dati-json", 
            "text": "// definisco i miei dati\nvar mydata = {\n    value :  [\n        {\n            text : 100,\n            intero : '1',\n            stringa : 'prova'\n        },\n        {\n            text : 2,\n            intero : '1',\n            stringa : 'fprova2'\n        },\n    ]\n}\n\n// creo una configurazione per la view lista\nvar myList = new ConfList({\n    fields : ['stringa','intero','text'], // campi che voglio visualizzare\n    container : '#test_container1',  // container dove verr\u00e0 disegnata la view\n    modelName : 'dummy', // modelname dummy, uso sempre questo per i dati dinamici\n    routeName : null, // nessuna route verso il server i dati ci sono gi\u00e0\n    pagination : false, // se voglio o no il navigatore per la paginazione\n    actions : [], //azioni che si possono fare sui singoli record  o lista\n    data : mydata // dati della lista\n});\n\n// aggiungo la lista\nvar vkey = app.addView(myList);\n// la renderizzo \napp.renderView(vkey);   Vai", 
            "title": "- Lista con dati json"
        }, 
        {
            "location": "/esempi_views/#-lista-con-dati-json-con-intestazioni-header-custom", 
            "text": "// definisco i miei dati\nvar mydata = {\n    value :  [\n        {\n            text : 100,\n            intero : '1',\n            stringa : 'prova'\n        },\n        {\n            text : 2,\n            intero : '1',\n            stringa : 'fprova2'\n        },\n    ]\n}\n\n// creo una configurazione per la view lista\nvar myList = new ConfList({\n    fields : ['stringa','intero','text'], // campi che voglio visualizzare\n    container : '#test_container1',  // container dove verr\u00e0 disegnata la view\n    modelName : 'dummy', // modelname dummy, uso sempre questo per i dati dinamici\n    routeName : null, // nessuna route verso il server, i dati ci sono gi\u00e0\n    pagination : false, // se voglio o no il navigatore per la paginazione\n    actions : [], //azioni che si possono fare sui singoli record  o lista\n    data : mydata, // dati della lista\n    labels : {\n        'dummy.stringa.label' : 'campo stringa'\n    }\n});\n\n// aggiungo la lista\nvar vkey = app.addView(myList);\n// la renderizzo \napp.renderView(vkey);", 
            "title": "- Lista con dati json con intestazioni header custom"
        }, 
        {
            "location": "/esempi_views/#views-che-lavorano-con-singolo-record", 
            "text": "", 
            "title": "Views che lavorano con singolo record"
        }, 
        {
            "location": "/esempi_views/#-vista-in-modalita-edit-con-azione-actionsave-ridefinita", 
            "text": "// definisco i miei dati che propongo nella view. Un solo record\nvar mydata =  {\n    value : {  // valori del mio ipotetico modello dati\n        text :  testo  ,\n        intero : 1,\n        stringa : 'prova'\n    },\n    metadata : {  // metadata dei miei valori, in questo caso il campo intero pu\u00f2 avere solo 2 valori\n        intero : {\n            domainValues : {\n                0 : 'Zero',\n                1 : 'Uno'\n            }\n        }\n    }\n}\n// definisco la configurazione della mia vista\nvar myList = new ConfInsert({\n    fields : ['stringa','intero','text'],  //campi che voglio visualizzare\n    container : '#test_container1',        // container dove verr\u00e0 disegnata la vista\n    modelName : 'dummy',                    // model name per dati dinamici\n    routeName : null,                       // nessuna route verso il server, i dati ci sono gi\u00e0\n    actions : ['ActionSave','ActionMia'],   //azione save presente nella libreria\n    data : mydata,\n    fields_config : {                       // configurazione campi\n        intero : {                          // dico che il campo intero e' una select\n            type : 'select'\n        },\n        text : {\n            type : 'textarea'\n        }\n    },\n    custom_actions : {   // ridefiniamo l'azione ActionSave presente in libreria per inserire il nostro comportamento\n        ActionSave : ActionSave.extend({\n            execute : function () {\n                alert(JSON.stringify(this.view.getFormData()))\n            }\n        })  \n    },\n    autorender : true, // dico che la view la voglio renderizzare appena l'aggiungo\n});\napp.addView(myList);", 
            "title": "- Vista in modalit\u00e0 edit con azione ActionSave ridefinita"
        }, 
        {
            "location": "/esempi_views/#-vista-in-modalita-edit-con-azione-custom-e-template-custom", 
            "text": "// definisco i miei dati che propongo nella view. Un solo record\nvar mydata =  {\n    value : {  // valori del mio ipotetico modello dati\n        text :  testo  ,\n        intero : 1,\n        stringa : 'prova'\n    },\n    metadata : {  // metadata dei miei valori, in questo caso il campo intero pu\u00f2 avere solo 2 valori\n        intero : {\n            domainValues : {\n                0 : 'Zero',\n                1 : 'Uno'\n            }\n        }\n    }\n}\n// definisco la configurazione della mia vista\nvar myList = new ConfInsert({\n    fields : ['stringa','intero','text'],  //campi che voglio visualizzare\n    container : '#test_container1',        // container dove verr\u00e0 disegnata la vista\n    modelName : 'dummy',                    // model name per dati dinamici\n    routeName : null,                       // nessuna route verso il server, i dati ci sono gi\u00e0\n    actions : ['ActionMia'],               //azione save presente nella libreria\n    data : mydata,\n    fields_config : {                       // configurazione campi\n        intero : {                          // dico che il campo intero e' una select\n            type : 'select'\n        },\n        text : {\n            type : 'textarea'\n        }\n    },\n    custom_actions : {\n        ActionMia : RecordAction.extend({\n            text : 'mia',\n            title : 'azione custom',\n            execute : function () {\n                alert(JSON.stringify(this.view.getFormData()))\n            }\n        })  \n    },\n    labels : {\n        'app.mialabel' : 'Questa e\\' una vista con template personale rispetto a quello standard',  \n    },\n    template : function () {\n        return `\n         div class= well  data-edit-main \n             div data-alert class= alert alert-success hide /div \n             div data-label= app.mialabel /div \n             form name= data_form  class= model-edit \n                 div data-hidden_fields \n                     !-- qui dentro verrano disegnati i renders speciali hidden -- \n                 /div \n                 div data-view_elements \n                     !-- qui dentro verrano disegnati i renders -- \n                 /div \n                 div data-view_action  \n                     !-- qui dentro verrano disegnate le azioni definite -- \n                 /div \n             /form \n         /div \n    `\n    },\n    autorender : true, // dico che la view la voglio renderizzare appena l'aggiungo\n});\napp.addView(myList);", 
            "title": "- Vista in modalit\u00e0 edit con azione custom e template custom"
        }
    ]
}